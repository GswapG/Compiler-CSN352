Created by PLY (http://www.dabeaz.com/ply)

Unused terminals:

    I_CONSTANT

Grammar

Rule 0     S' -> translation_unit
Rule 1     primary_expression -> IDENTIFIER
Rule 2     primary_expression -> constant
Rule 3     primary_expression -> string
Rule 4     primary_expression -> LPAREN expression RPAREN
Rule 5     primary_expression -> generic_selection
Rule 6     constant -> INTEGER
Rule 7     constant -> F_CONSTANT
Rule 8     constant -> ENUMERATION_CONSTANT
Rule 9     enumeration_constant -> IDENTIFIER
Rule 10    string -> STRING_LITERAL
Rule 11    string -> FUNC_NAME
Rule 12    generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
Rule 13    generic_assoc_list -> generic_association
Rule 14    generic_assoc_list -> generic_assoc_list COMMA generic_association
Rule 15    generic_association -> type_name COLON assignment_expression
Rule 16    generic_association -> DEFAULT COLON assignment_expression
Rule 17    postfix_expression -> primary_expression
Rule 18    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 19    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 20    postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 21    postfix_expression -> postfix_expression DOT IDENTIFIER
Rule 22    postfix_expression -> postfix_expression PTR_OP IDENTIFIER
Rule 23    postfix_expression -> postfix_expression INC_OP
Rule 24    postfix_expression -> postfix_expression DEC_OP
Rule 25    postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE
Rule 26    postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
Rule 27    argument_expression_list -> assignment_expression
Rule 28    argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 29    unary_expression -> postfix_expression
Rule 30    unary_expression -> INC_OP unary_expression
Rule 31    unary_expression -> DEC_OP unary_expression
Rule 32    unary_expression -> unary_operator cast_expression
Rule 33    unary_expression -> SIZEOF unary_expression
Rule 34    unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 35    unary_expression -> ALIGNOF LPAREN type_name RPAREN
Rule 36    unary_operator -> AND
Rule 37    unary_operator -> TIMES
Rule 38    unary_operator -> PLUS
Rule 39    unary_operator -> MINUS
Rule 40    unary_operator -> TILDE
Rule 41    unary_operator -> NOT
Rule 42    cast_expression -> unary_expression
Rule 43    cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 44    multiplicative_expression -> cast_expression
Rule 45    multiplicative_expression -> multiplicative_expression TIMES cast_expression
Rule 46    multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 47    multiplicative_expression -> multiplicative_expression MOD cast_expression
Rule 48    additive_expression -> multiplicative_expression
Rule 49    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 50    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 51    shift_expression -> additive_expression
Rule 52    shift_expression -> shift_expression LEFT_OP additive_expression
Rule 53    shift_expression -> shift_expression RIGHT_OP additive_expression
Rule 54    relational_expression -> shift_expression
Rule 55    relational_expression -> relational_expression LT shift_expression
Rule 56    relational_expression -> relational_expression GT shift_expression
Rule 57    relational_expression -> relational_expression LE_OP shift_expression
Rule 58    relational_expression -> relational_expression GE_OP shift_expression
Rule 59    equality_expression -> relational_expression
Rule 60    equality_expression -> equality_expression EQ_OP relational_expression
Rule 61    equality_expression -> equality_expression NE_OP relational_expression
Rule 62    and_expression -> equality_expression
Rule 63    and_expression -> and_expression AND equality_expression
Rule 64    exclusive_or_expression -> and_expression
Rule 65    exclusive_or_expression -> exclusive_or_expression XOR and_expression
Rule 66    inclusive_or_expression -> exclusive_or_expression
Rule 67    inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression
Rule 68    logical_and_expression -> inclusive_or_expression
Rule 69    logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression
Rule 70    logical_or_expression -> logical_and_expression
Rule 71    logical_or_expression -> logical_or_expression OR_OP logical_and_expression
Rule 72    conditional_expression -> logical_or_expression
Rule 73    conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression
Rule 74    assignment_expression -> conditional_expression
Rule 75    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 76    assignment_operator -> EQUALS
Rule 77    assignment_operator -> MUL_ASSIGN
Rule 78    assignment_operator -> DIV_ASSIGN
Rule 79    assignment_operator -> MOD_ASSIGN
Rule 80    assignment_operator -> ADD_ASSIGN
Rule 81    assignment_operator -> SUB_ASSIGN
Rule 82    assignment_operator -> LEFT_ASSIGN
Rule 83    assignment_operator -> RIGHT_ASSIGN
Rule 84    assignment_operator -> AND_ASSIGN
Rule 85    assignment_operator -> XOR_ASSIGN
Rule 86    assignment_operator -> OR_ASSIGN
Rule 87    expression -> assignment_expression
Rule 88    expression -> expression COMMA assignment_expression
Rule 89    constant_expression -> conditional_expression
Rule 90    declaration -> declaration_specifiers init_declarator_list SEMICOLON
Rule 91    declaration -> static_assert_declaration
Rule 92    declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 93    declaration_specifiers -> storage_class_specifier
Rule 94    declaration_specifiers -> type_specifier declaration_specifiers
Rule 95    declaration_specifiers -> type_specifier
Rule 96    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 97    declaration_specifiers -> type_qualifier
Rule 98    declaration_specifiers -> function_specifier declaration_specifiers
Rule 99    declaration_specifiers -> function_specifier
Rule 100   declaration_specifiers -> alignment_specifier declaration_specifiers
Rule 101   declaration_specifiers -> alignment_specifier
Rule 102   init_declarator_list -> init_declarator
Rule 103   init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 104   init_declarator -> declarator EQUALS initializer
Rule 105   init_declarator -> declarator
Rule 106   storage_class_specifier -> TYPEDEF
Rule 107   storage_class_specifier -> EXTERN
Rule 108   storage_class_specifier -> STATIC
Rule 109   storage_class_specifier -> THREAD_LOCAL
Rule 110   storage_class_specifier -> AUTO
Rule 111   storage_class_specifier -> REGISTER
Rule 112   type_specifier -> VOID
Rule 113   type_specifier -> CHAR
Rule 114   type_specifier -> SHORT
Rule 115   type_specifier -> INT
Rule 116   type_specifier -> LONG
Rule 117   type_specifier -> FLOAT
Rule 118   type_specifier -> DOUBLE
Rule 119   type_specifier -> SIGNED
Rule 120   type_specifier -> UNSIGNED
Rule 121   type_specifier -> BOOL
Rule 122   type_specifier -> COMPLEX
Rule 123   type_specifier -> IMAGINARY
Rule 124   type_specifier -> atomic_type_specifier
Rule 125   type_specifier -> struct_or_union_specifier
Rule 126   type_specifier -> enum_specifier
Rule 127   struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE
Rule 128   struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
Rule 129   struct_or_union_specifier -> struct_or_union IDENTIFIER
Rule 130   struct_or_union -> STRUCT
Rule 131   struct_or_union -> UNION
Rule 132   struct_declaration_list -> struct_declaration
Rule 133   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 134   struct_declaration -> specifier_qualifier_list SEMICOLON
Rule 135   struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON
Rule 136   struct_declaration -> static_assert_declaration
Rule 137   specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 138   specifier_qualifier_list -> type_specifier
Rule 139   specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 140   specifier_qualifier_list -> type_qualifier
Rule 141   struct_declarator_list -> struct_declarator
Rule 142   struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 143   struct_declarator -> COLON constant_expression
Rule 144   struct_declarator -> declarator COLON constant_expression
Rule 145   struct_declarator -> declarator
Rule 146   enum_specifier -> ENUM LBRACE enumerator_list RBRACE
Rule 147   enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE
Rule 148   enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE
Rule 149   enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
Rule 150   enum_specifier -> ENUM IDENTIFIER
Rule 151   enumerator_list -> enumerator
Rule 152   enumerator_list -> enumerator_list COMMA enumerator
Rule 153   enumerator -> enumeration_constant EQUALS constant_expression
Rule 154   enumerator -> enumeration_constant
Rule 155   atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN
Rule 156   type_qualifier -> CONST
Rule 157   type_qualifier -> RESTRICT
Rule 158   type_qualifier -> VOLATILE
Rule 159   type_qualifier -> ATOMIC
Rule 160   function_specifier -> INLINE
Rule 161   function_specifier -> NORETURN
Rule 162   alignment_specifier -> ALIGNAS LPAREN type_name RPAREN
Rule 163   alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN
Rule 164   declarator -> pointer direct_declarator
Rule 165   declarator -> direct_declarator
Rule 166   direct_declarator -> IDENTIFIER
Rule 167   direct_declarator -> LPAREN declarator RPAREN
Rule 168   direct_declarator -> direct_declarator LBRACKET RBRACKET
Rule 169   direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET
Rule 170   direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
Rule 171   direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET
Rule 172   direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
Rule 173   direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
Rule 174   direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
Rule 175   direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET
Rule 176   direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET
Rule 177   direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN
Rule 178   direct_declarator -> direct_declarator LPAREN RPAREN
Rule 179   direct_declarator -> direct_declarator LPAREN identifier_list RPAREN
Rule 180   pointer -> TIMES type_qualifier_list pointer
Rule 181   pointer -> TIMES type_qualifier_list
Rule 182   pointer -> TIMES pointer
Rule 183   pointer -> TIMES
Rule 184   type_qualifier_list -> type_qualifier
Rule 185   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 186   parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 187   parameter_type_list -> parameter_list
Rule 188   parameter_list -> parameter_declaration
Rule 189   parameter_list -> parameter_list COMMA parameter_declaration
Rule 190   parameter_declaration -> declaration_specifiers declarator
Rule 191   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 192   parameter_declaration -> declaration_specifiers
Rule 193   identifier_list -> IDENTIFIER
Rule 194   identifier_list -> identifier_list COMMA IDENTIFIER
Rule 195   type_name -> specifier_qualifier_list abstract_declarator
Rule 196   type_name -> specifier_qualifier_list
Rule 197   abstract_declarator -> pointer direct_abstract_declarator
Rule 198   abstract_declarator -> pointer
Rule 199   abstract_declarator -> direct_abstract_declarator
Rule 200   direct_abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 201   direct_abstract_declarator -> LBRACKET RBRACKET
Rule 202   direct_abstract_declarator -> LBRACKET TIMES RBRACKET
Rule 203   direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
Rule 204   direct_abstract_declarator -> LBRACKET STATIC assignment_expression RBRACKET
Rule 205   direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
Rule 206   direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression RBRACKET
Rule 207   direct_abstract_declarator -> LBRACKET type_qualifier_list RBRACKET
Rule 208   direct_abstract_declarator -> LBRACKET assignment_expression RBRACKET
Rule 209   direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET
Rule 210   direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET
Rule 211   direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
Rule 212   direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET
Rule 213   direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
Rule 214   direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
Rule 215   direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET
Rule 216   direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression RBRACKET
Rule 217   direct_abstract_declarator -> LPAREN RPAREN
Rule 218   direct_abstract_declarator -> LPAREN parameter_type_list RPAREN
Rule 219   direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN
Rule 220   direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN
Rule 221   initializer -> LBRACE initializer_list RBRACE
Rule 222   initializer -> LBRACE initializer_list COMMA RBRACE
Rule 223   initializer -> assignment_expression
Rule 224   initializer_list -> designation initializer
Rule 225   initializer_list -> initializer
Rule 226   initializer_list -> initializer_list COMMA designation initializer
Rule 227   initializer_list -> initializer_list COMMA initializer
Rule 228   designation -> designator_list EQUALS
Rule 229   designator_list -> designator
Rule 230   designator_list -> designator_list designator
Rule 231   designator -> LBRACKET constant_expression RBRACKET
Rule 232   designator -> DOT IDENTIFIER
Rule 233   static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON
Rule 234   statement -> labeled_statement
Rule 235   statement -> compound_statement
Rule 236   statement -> expression_statement
Rule 237   statement -> selection_statement
Rule 238   statement -> iteration_statement
Rule 239   statement -> jump_statement
Rule 240   labeled_statement -> IDENTIFIER COLON statement
Rule 241   labeled_statement -> CASE constant_expression COLON statement
Rule 242   labeled_statement -> DEFAULT COLON statement
Rule 243   compound_statement -> LBRACE RBRACE
Rule 244   compound_statement -> LBRACE block_item_list RBRACE
Rule 245   block_item_list -> block_item
Rule 246   block_item_list -> block_item_list block_item
Rule 247   block_item -> declaration
Rule 248   block_item -> statement
Rule 249   expression_statement -> expression SEMICOLON
Rule 250   expression_statement -> SEMICOLON
Rule 251   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 252   selection_statement -> IF LPAREN expression RPAREN statement
Rule 253   selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 254   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 255   iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON
Rule 256   iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement
Rule 257   iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement
Rule 258   iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement
Rule 259   iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement
Rule 260   jump_statement -> GOTO IDENTIFIER SEMICOLON
Rule 261   jump_statement -> CONTINUE SEMICOLON
Rule 262   jump_statement -> BREAK SEMICOLON
Rule 263   jump_statement -> RETURN SEMICOLON
Rule 264   jump_statement -> RETURN expression SEMICOLON
Rule 265   translation_unit -> external_declaration
Rule 266   translation_unit -> translation_unit external_declaration
Rule 267   external_declaration -> function_definition
Rule 268   external_declaration -> declaration
Rule 269   external_declaration -> SEMICOLON
Rule 270   function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 271   function_definition -> declaration_specifiers declarator compound_statement
Rule 272   declaration_list -> declaration
Rule 273   declaration_list -> declaration_list declaration

Terminals, with rules where they appear

ADD_ASSIGN           : 80
ALIGNAS              : 162 163
ALIGNOF              : 35
AND                  : 36 63
AND_ASSIGN           : 84
AND_OP               : 69
ATOMIC               : 155 159
AUTO                 : 110
BOOL                 : 121
BREAK                : 262
CASE                 : 241
CHAR                 : 113
COLON                : 15 16 73 143 144 240 241 242
COMMA                : 12 14 26 28 88 103 142 147 149 152 186 189 194 222 226 227 233
COMPLEX              : 122
CONST                : 156
CONTINUE             : 261
DEC_OP               : 24 31
DEFAULT              : 16 242
DIVIDE               : 46
DIV_ASSIGN           : 78
DO                   : 255
DOT                  : 21 232
DOUBLE               : 118
ELLIPSIS             : 186
ELSE                 : 251
ENUM                 : 146 147 148 149 150
ENUMERATION_CONSTANT : 8
EQUALS               : 76 104 153 228
EQ_OP                : 60
EXTERN               : 107
FLOAT                : 117
FOR                  : 256 257 258 259
FUNC_NAME            : 11
F_CONSTANT           : 7
GENERIC              : 12
GE_OP                : 58
GOTO                 : 260
GT                   : 56
IDENTIFIER           : 1 9 21 22 128 129 148 149 150 166 193 194 232 240 260
IF                   : 251 252
IMAGINARY            : 123
INC_OP               : 23 30
INLINE               : 160
INT                  : 115
INTEGER              : 6
I_CONSTANT           : 
LBRACE               : 25 26 127 128 146 147 148 149 221 222 243 244
LBRACKET             : 18 168 169 170 171 172 173 174 175 176 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 231
LEFT_ASSIGN          : 82
LEFT_OP              : 52
LE_OP                : 57
LONG                 : 116
LPAREN               : 4 12 19 20 25 26 34 35 43 155 162 163 167 177 178 179 200 217 218 219 220 233 251 252 253 254 255 256 257 258 259
LT                   : 55
MINUS                : 39 50
MOD                  : 47
MOD_ASSIGN           : 79
MUL_ASSIGN           : 77
NE_OP                : 61
NORETURN             : 161
NOT                  : 41
OR                   : 67
OR_ASSIGN            : 86
OR_OP                : 71
PLUS                 : 38 49
PTR_OP               : 22
QUESTION             : 73
RBRACE               : 25 26 127 128 146 147 148 149 221 222 243 244
RBRACKET             : 18 168 169 170 171 172 173 174 175 176 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 231
REGISTER             : 111
RESTRICT             : 157
RETURN               : 263 264
RIGHT_ASSIGN         : 83
RIGHT_OP             : 53
RPAREN               : 4 12 19 20 25 26 34 35 43 155 162 163 167 177 178 179 200 217 218 219 220 233 251 252 253 254 255 256 257 258 259
SEMICOLON            : 90 134 135 233 249 250 255 260 261 262 263 264 269
SHORT                : 114
SIGNED               : 119
SIZEOF               : 33 34
STATIC               : 108 170 171 173 203 204 205 211 212 214
STATIC_ASSERT        : 233
STRING_LITERAL       : 10 233
STRUCT               : 130
SUB_ASSIGN           : 81
SWITCH               : 253
THREAD_LOCAL         : 109
TILDE                : 40
TIMES                : 37 45 169 172 180 181 182 183 202 210
TYPEDEF              : 106
UNION                : 131
UNSIGNED             : 120
VOID                 : 112
VOLATILE             : 158
WHILE                : 254 255
XOR                  : 65
XOR_ASSIGN           : 85
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 191 195 200
additive_expression  : 49 50 51 52 53
alignment_specifier  : 100 101
and_expression       : 63 64 65
argument_expression_list : 20 28
assignment_expression : 12 15 16 27 28 75 87 88 170 171 173 174 176 203 204 205 206 208 211 212 213 214 216 223
assignment_operator  : 75
atomic_type_specifier : 124
block_item           : 245 246
block_item_list      : 244 246
cast_expression      : 32 43 44 45 46 47
compound_statement   : 235 270 271
conditional_expression : 73 74 89
constant             : 2
constant_expression  : 143 144 153 163 231 233 241
declaration          : 247 258 259 268 272 273
declaration_list     : 270 273
declaration_specifiers : 90 92 94 96 98 100 190 191 192 270 271
declarator           : 104 105 144 145 167 190 270 271
designation          : 224 226
designator           : 229 230
designator_list      : 228 230
direct_abstract_declarator : 197 199 209 210 211 212 213 214 215 216 219 220
direct_declarator    : 164 165 168 169 170 171 172 173 174 175 176 177 178 179
enum_specifier       : 126
enumeration_constant : 153 154
enumerator           : 151 152
enumerator_list      : 146 147 148 149 152
equality_expression  : 60 61 62 63
exclusive_or_expression : 65 66 67
expression           : 4 18 73 88 249 251 252 253 254 255 257 259 264
expression_statement : 236 256 256 257 257 258 259
external_declaration : 265 266
function_definition  : 267
function_specifier   : 98 99
generic_assoc_list   : 12 14
generic_association  : 13 14
generic_selection    : 5
identifier_list      : 179 194
inclusive_or_expression : 67 68 69
init_declarator      : 102 103
init_declarator_list : 90 103
initializer          : 104 224 225 226 227
initializer_list     : 25 26 221 222 226 227
iteration_statement  : 238
jump_statement       : 239
labeled_statement    : 234
logical_and_expression : 69 70 71
logical_or_expression : 71 72 73
multiplicative_expression : 45 46 47 48 49 50
parameter_declaration : 188 189
parameter_list       : 186 187 189
parameter_type_list  : 177 218 220
pointer              : 164 180 182 197 198
postfix_expression   : 18 19 20 21 22 23 24 29
primary_expression   : 17
relational_expression : 55 56 57 58 59 60 61
selection_statement  : 237
shift_expression     : 52 53 54 55 56 57 58
specifier_qualifier_list : 134 135 137 139 195 196
statement            : 240 241 242 248 251 251 252 253 254 255 256 257 258 259
static_assert_declaration : 91 136
storage_class_specifier : 92 93
string               : 3
struct_declaration   : 132 133
struct_declaration_list : 127 128 133
struct_declarator    : 141 142
struct_declarator_list : 135 142
struct_or_union      : 127 128 129
struct_or_union_specifier : 125
translation_unit     : 266 0
type_name            : 15 25 26 34 35 43 155 162
type_qualifier       : 96 97 139 140 184 185
type_qualifier_list  : 170 172 173 174 175 180 181 185 203 205 206 207 211 213 214 215
type_specifier       : 94 95 137 138
unary_expression     : 30 31 33 42 75
unary_operator       : 32


state 0

    (0) S' -> . translation_unit
    (265) translation_unit -> . external_declaration
    (266) translation_unit -> . translation_unit external_declaration
    (267) external_declaration -> . function_definition
    (268) external_declaration -> . declaration
    (269) external_declaration -> . SEMICOLON
    (270) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (271) function_definition -> . declaration_specifiers declarator compound_statement
    (90) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (91) declaration -> . static_assert_declaration
    (92) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (93) declaration_specifiers -> . storage_class_specifier
    (94) declaration_specifiers -> . type_specifier declaration_specifiers
    (95) declaration_specifiers -> . type_specifier
    (96) declaration_specifiers -> . type_qualifier declaration_specifiers
    (97) declaration_specifiers -> . type_qualifier
    (98) declaration_specifiers -> . function_specifier declaration_specifiers
    (99) declaration_specifiers -> . function_specifier
    (100) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (101) declaration_specifiers -> . alignment_specifier
    (233) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON
    (106) storage_class_specifier -> . TYPEDEF
    (107) storage_class_specifier -> . EXTERN
    (108) storage_class_specifier -> . STATIC
    (109) storage_class_specifier -> . THREAD_LOCAL
    (110) storage_class_specifier -> . AUTO
    (111) storage_class_specifier -> . REGISTER
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (160) function_specifier -> . INLINE
    (161) function_specifier -> . NORETURN
    (162) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (163) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    SEMICOLON       shift and go to state 5
    STATIC_ASSERT   shift and go to state 13
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    INLINE          shift and go to state 39
    NORETURN        shift and go to state 40
    ALIGNAS         shift and go to state 41
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    translation_unit               shift and go to state 1
    external_declaration           shift and go to state 2
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 6
    static_assert_declaration      shift and go to state 7
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 42

state 1

    (0) S' -> translation_unit .
    (266) translation_unit -> translation_unit . external_declaration
    (267) external_declaration -> . function_definition
    (268) external_declaration -> . declaration
    (269) external_declaration -> . SEMICOLON
    (270) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (271) function_definition -> . declaration_specifiers declarator compound_statement
    (90) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (91) declaration -> . static_assert_declaration
    (92) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (93) declaration_specifiers -> . storage_class_specifier
    (94) declaration_specifiers -> . type_specifier declaration_specifiers
    (95) declaration_specifiers -> . type_specifier
    (96) declaration_specifiers -> . type_qualifier declaration_specifiers
    (97) declaration_specifiers -> . type_qualifier
    (98) declaration_specifiers -> . function_specifier declaration_specifiers
    (99) declaration_specifiers -> . function_specifier
    (100) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (101) declaration_specifiers -> . alignment_specifier
    (233) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON
    (106) storage_class_specifier -> . TYPEDEF
    (107) storage_class_specifier -> . EXTERN
    (108) storage_class_specifier -> . STATIC
    (109) storage_class_specifier -> . THREAD_LOCAL
    (110) storage_class_specifier -> . AUTO
    (111) storage_class_specifier -> . REGISTER
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (160) function_specifier -> . INLINE
    (161) function_specifier -> . NORETURN
    (162) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (163) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    SEMICOLON       shift and go to state 5
    STATIC_ASSERT   shift and go to state 13
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    INLINE          shift and go to state 39
    NORETURN        shift and go to state 40
    ALIGNAS         shift and go to state 41
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    external_declaration           shift and go to state 46
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 6
    static_assert_declaration      shift and go to state 7
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 42

state 2

    (265) translation_unit -> external_declaration .

    SEMICOLON       reduce using rule 265 (translation_unit -> external_declaration .)
    STATIC_ASSERT   reduce using rule 265 (translation_unit -> external_declaration .)
    TYPEDEF         reduce using rule 265 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 265 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 265 (translation_unit -> external_declaration .)
    THREAD_LOCAL    reduce using rule 265 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 265 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 265 (translation_unit -> external_declaration .)
    VOID            reduce using rule 265 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 265 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 265 (translation_unit -> external_declaration .)
    INT             reduce using rule 265 (translation_unit -> external_declaration .)
    LONG            reduce using rule 265 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 265 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 265 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 265 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 265 (translation_unit -> external_declaration .)
    BOOL            reduce using rule 265 (translation_unit -> external_declaration .)
    COMPLEX         reduce using rule 265 (translation_unit -> external_declaration .)
    IMAGINARY       reduce using rule 265 (translation_unit -> external_declaration .)
    CONST           reduce using rule 265 (translation_unit -> external_declaration .)
    RESTRICT        reduce using rule 265 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 265 (translation_unit -> external_declaration .)
    ATOMIC          reduce using rule 265 (translation_unit -> external_declaration .)
    INLINE          reduce using rule 265 (translation_unit -> external_declaration .)
    NORETURN        reduce using rule 265 (translation_unit -> external_declaration .)
    ALIGNAS         reduce using rule 265 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 265 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 265 (translation_unit -> external_declaration .)
    UNION           reduce using rule 265 (translation_unit -> external_declaration .)
    $end            reduce using rule 265 (translation_unit -> external_declaration .)


state 3

    (267) external_declaration -> function_definition .

    SEMICOLON       reduce using rule 267 (external_declaration -> function_definition .)
    STATIC_ASSERT   reduce using rule 267 (external_declaration -> function_definition .)
    TYPEDEF         reduce using rule 267 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 267 (external_declaration -> function_definition .)
    STATIC          reduce using rule 267 (external_declaration -> function_definition .)
    THREAD_LOCAL    reduce using rule 267 (external_declaration -> function_definition .)
    AUTO            reduce using rule 267 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 267 (external_declaration -> function_definition .)
    VOID            reduce using rule 267 (external_declaration -> function_definition .)
    CHAR            reduce using rule 267 (external_declaration -> function_definition .)
    SHORT           reduce using rule 267 (external_declaration -> function_definition .)
    INT             reduce using rule 267 (external_declaration -> function_definition .)
    LONG            reduce using rule 267 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 267 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 267 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 267 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 267 (external_declaration -> function_definition .)
    BOOL            reduce using rule 267 (external_declaration -> function_definition .)
    COMPLEX         reduce using rule 267 (external_declaration -> function_definition .)
    IMAGINARY       reduce using rule 267 (external_declaration -> function_definition .)
    CONST           reduce using rule 267 (external_declaration -> function_definition .)
    RESTRICT        reduce using rule 267 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 267 (external_declaration -> function_definition .)
    ATOMIC          reduce using rule 267 (external_declaration -> function_definition .)
    INLINE          reduce using rule 267 (external_declaration -> function_definition .)
    NORETURN        reduce using rule 267 (external_declaration -> function_definition .)
    ALIGNAS         reduce using rule 267 (external_declaration -> function_definition .)
    ENUM            reduce using rule 267 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 267 (external_declaration -> function_definition .)
    UNION           reduce using rule 267 (external_declaration -> function_definition .)
    $end            reduce using rule 267 (external_declaration -> function_definition .)


state 4

    (268) external_declaration -> declaration .

    SEMICOLON       reduce using rule 268 (external_declaration -> declaration .)
    STATIC_ASSERT   reduce using rule 268 (external_declaration -> declaration .)
    TYPEDEF         reduce using rule 268 (external_declaration -> declaration .)
    EXTERN          reduce using rule 268 (external_declaration -> declaration .)
    STATIC          reduce using rule 268 (external_declaration -> declaration .)
    THREAD_LOCAL    reduce using rule 268 (external_declaration -> declaration .)
    AUTO            reduce using rule 268 (external_declaration -> declaration .)
    REGISTER        reduce using rule 268 (external_declaration -> declaration .)
    VOID            reduce using rule 268 (external_declaration -> declaration .)
    CHAR            reduce using rule 268 (external_declaration -> declaration .)
    SHORT           reduce using rule 268 (external_declaration -> declaration .)
    INT             reduce using rule 268 (external_declaration -> declaration .)
    LONG            reduce using rule 268 (external_declaration -> declaration .)
    FLOAT           reduce using rule 268 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 268 (external_declaration -> declaration .)
    SIGNED          reduce using rule 268 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 268 (external_declaration -> declaration .)
    BOOL            reduce using rule 268 (external_declaration -> declaration .)
    COMPLEX         reduce using rule 268 (external_declaration -> declaration .)
    IMAGINARY       reduce using rule 268 (external_declaration -> declaration .)
    CONST           reduce using rule 268 (external_declaration -> declaration .)
    RESTRICT        reduce using rule 268 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 268 (external_declaration -> declaration .)
    ATOMIC          reduce using rule 268 (external_declaration -> declaration .)
    INLINE          reduce using rule 268 (external_declaration -> declaration .)
    NORETURN        reduce using rule 268 (external_declaration -> declaration .)
    ALIGNAS         reduce using rule 268 (external_declaration -> declaration .)
    ENUM            reduce using rule 268 (external_declaration -> declaration .)
    STRUCT          reduce using rule 268 (external_declaration -> declaration .)
    UNION           reduce using rule 268 (external_declaration -> declaration .)
    $end            reduce using rule 268 (external_declaration -> declaration .)


state 5

    (269) external_declaration -> SEMICOLON .

    SEMICOLON       reduce using rule 269 (external_declaration -> SEMICOLON .)
    STATIC_ASSERT   reduce using rule 269 (external_declaration -> SEMICOLON .)
    TYPEDEF         reduce using rule 269 (external_declaration -> SEMICOLON .)
    EXTERN          reduce using rule 269 (external_declaration -> SEMICOLON .)
    STATIC          reduce using rule 269 (external_declaration -> SEMICOLON .)
    THREAD_LOCAL    reduce using rule 269 (external_declaration -> SEMICOLON .)
    AUTO            reduce using rule 269 (external_declaration -> SEMICOLON .)
    REGISTER        reduce using rule 269 (external_declaration -> SEMICOLON .)
    VOID            reduce using rule 269 (external_declaration -> SEMICOLON .)
    CHAR            reduce using rule 269 (external_declaration -> SEMICOLON .)
    SHORT           reduce using rule 269 (external_declaration -> SEMICOLON .)
    INT             reduce using rule 269 (external_declaration -> SEMICOLON .)
    LONG            reduce using rule 269 (external_declaration -> SEMICOLON .)
    FLOAT           reduce using rule 269 (external_declaration -> SEMICOLON .)
    DOUBLE          reduce using rule 269 (external_declaration -> SEMICOLON .)
    SIGNED          reduce using rule 269 (external_declaration -> SEMICOLON .)
    UNSIGNED        reduce using rule 269 (external_declaration -> SEMICOLON .)
    BOOL            reduce using rule 269 (external_declaration -> SEMICOLON .)
    COMPLEX         reduce using rule 269 (external_declaration -> SEMICOLON .)
    IMAGINARY       reduce using rule 269 (external_declaration -> SEMICOLON .)
    CONST           reduce using rule 269 (external_declaration -> SEMICOLON .)
    RESTRICT        reduce using rule 269 (external_declaration -> SEMICOLON .)
    VOLATILE        reduce using rule 269 (external_declaration -> SEMICOLON .)
    ATOMIC          reduce using rule 269 (external_declaration -> SEMICOLON .)
    INLINE          reduce using rule 269 (external_declaration -> SEMICOLON .)
    NORETURN        reduce using rule 269 (external_declaration -> SEMICOLON .)
    ALIGNAS         reduce using rule 269 (external_declaration -> SEMICOLON .)
    ENUM            reduce using rule 269 (external_declaration -> SEMICOLON .)
    STRUCT          reduce using rule 269 (external_declaration -> SEMICOLON .)
    UNION           reduce using rule 269 (external_declaration -> SEMICOLON .)
    $end            reduce using rule 269 (external_declaration -> SEMICOLON .)


state 6

    (270) function_definition -> declaration_specifiers . declarator declaration_list compound_statement
    (271) function_definition -> declaration_specifiers . declarator compound_statement
    (90) declaration -> declaration_specifiers . init_declarator_list SEMICOLON
    (164) declarator -> . pointer direct_declarator
    (165) declarator -> . direct_declarator
    (102) init_declarator_list -> . init_declarator
    (103) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (180) pointer -> . TIMES type_qualifier_list pointer
    (181) pointer -> . TIMES type_qualifier_list
    (182) pointer -> . TIMES pointer
    (183) pointer -> . TIMES
    (166) direct_declarator -> . IDENTIFIER
    (167) direct_declarator -> . LPAREN declarator RPAREN
    (168) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (169) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (170) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (171) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (172) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (173) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (174) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (175) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (176) direct_declarator -> . direct_declarator LBRACKET assignment_expression RBRACKET
    (177) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (178) direct_declarator -> . direct_declarator LPAREN RPAREN
    (179) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (104) init_declarator -> . declarator EQUALS initializer
    (105) init_declarator -> . declarator

    TIMES           shift and go to state 52
    IDENTIFIER      shift and go to state 53
    LPAREN          shift and go to state 54

    declarator                     shift and go to state 47
    init_declarator_list           shift and go to state 48
    pointer                        shift and go to state 49
    direct_declarator              shift and go to state 50
    init_declarator                shift and go to state 51

state 7

    (91) declaration -> static_assert_declaration .

    SEMICOLON       reduce using rule 91 (declaration -> static_assert_declaration .)
    STATIC_ASSERT   reduce using rule 91 (declaration -> static_assert_declaration .)
    TYPEDEF         reduce using rule 91 (declaration -> static_assert_declaration .)
    EXTERN          reduce using rule 91 (declaration -> static_assert_declaration .)
    STATIC          reduce using rule 91 (declaration -> static_assert_declaration .)
    THREAD_LOCAL    reduce using rule 91 (declaration -> static_assert_declaration .)
    AUTO            reduce using rule 91 (declaration -> static_assert_declaration .)
    REGISTER        reduce using rule 91 (declaration -> static_assert_declaration .)
    VOID            reduce using rule 91 (declaration -> static_assert_declaration .)
    CHAR            reduce using rule 91 (declaration -> static_assert_declaration .)
    SHORT           reduce using rule 91 (declaration -> static_assert_declaration .)
    INT             reduce using rule 91 (declaration -> static_assert_declaration .)
    LONG            reduce using rule 91 (declaration -> static_assert_declaration .)
    FLOAT           reduce using rule 91 (declaration -> static_assert_declaration .)
    DOUBLE          reduce using rule 91 (declaration -> static_assert_declaration .)
    SIGNED          reduce using rule 91 (declaration -> static_assert_declaration .)
    UNSIGNED        reduce using rule 91 (declaration -> static_assert_declaration .)
    BOOL            reduce using rule 91 (declaration -> static_assert_declaration .)
    COMPLEX         reduce using rule 91 (declaration -> static_assert_declaration .)
    IMAGINARY       reduce using rule 91 (declaration -> static_assert_declaration .)
    CONST           reduce using rule 91 (declaration -> static_assert_declaration .)
    RESTRICT        reduce using rule 91 (declaration -> static_assert_declaration .)
    VOLATILE        reduce using rule 91 (declaration -> static_assert_declaration .)
    ATOMIC          reduce using rule 91 (declaration -> static_assert_declaration .)
    INLINE          reduce using rule 91 (declaration -> static_assert_declaration .)
    NORETURN        reduce using rule 91 (declaration -> static_assert_declaration .)
    ALIGNAS         reduce using rule 91 (declaration -> static_assert_declaration .)
    ENUM            reduce using rule 91 (declaration -> static_assert_declaration .)
    STRUCT          reduce using rule 91 (declaration -> static_assert_declaration .)
    UNION           reduce using rule 91 (declaration -> static_assert_declaration .)
    $end            reduce using rule 91 (declaration -> static_assert_declaration .)
    LBRACE          reduce using rule 91 (declaration -> static_assert_declaration .)
    RBRACE          reduce using rule 91 (declaration -> static_assert_declaration .)
    IDENTIFIER      reduce using rule 91 (declaration -> static_assert_declaration .)
    CASE            reduce using rule 91 (declaration -> static_assert_declaration .)
    DEFAULT         reduce using rule 91 (declaration -> static_assert_declaration .)
    IF              reduce using rule 91 (declaration -> static_assert_declaration .)
    SWITCH          reduce using rule 91 (declaration -> static_assert_declaration .)
    WHILE           reduce using rule 91 (declaration -> static_assert_declaration .)
    DO              reduce using rule 91 (declaration -> static_assert_declaration .)
    FOR             reduce using rule 91 (declaration -> static_assert_declaration .)
    GOTO            reduce using rule 91 (declaration -> static_assert_declaration .)
    CONTINUE        reduce using rule 91 (declaration -> static_assert_declaration .)
    BREAK           reduce using rule 91 (declaration -> static_assert_declaration .)
    RETURN          reduce using rule 91 (declaration -> static_assert_declaration .)
    INC_OP          reduce using rule 91 (declaration -> static_assert_declaration .)
    DEC_OP          reduce using rule 91 (declaration -> static_assert_declaration .)
    SIZEOF          reduce using rule 91 (declaration -> static_assert_declaration .)
    ALIGNOF         reduce using rule 91 (declaration -> static_assert_declaration .)
    LPAREN          reduce using rule 91 (declaration -> static_assert_declaration .)
    AND             reduce using rule 91 (declaration -> static_assert_declaration .)
    TIMES           reduce using rule 91 (declaration -> static_assert_declaration .)
    PLUS            reduce using rule 91 (declaration -> static_assert_declaration .)
    MINUS           reduce using rule 91 (declaration -> static_assert_declaration .)
    TILDE           reduce using rule 91 (declaration -> static_assert_declaration .)
    NOT             reduce using rule 91 (declaration -> static_assert_declaration .)
    INTEGER         reduce using rule 91 (declaration -> static_assert_declaration .)
    F_CONSTANT      reduce using rule 91 (declaration -> static_assert_declaration .)
    ENUMERATION_CONSTANT reduce using rule 91 (declaration -> static_assert_declaration .)
    STRING_LITERAL  reduce using rule 91 (declaration -> static_assert_declaration .)
    FUNC_NAME       reduce using rule 91 (declaration -> static_assert_declaration .)
    GENERIC         reduce using rule 91 (declaration -> static_assert_declaration .)


state 8

    (92) declaration_specifiers -> storage_class_specifier . declaration_specifiers
    (93) declaration_specifiers -> storage_class_specifier .
    (92) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (93) declaration_specifiers -> . storage_class_specifier
    (94) declaration_specifiers -> . type_specifier declaration_specifiers
    (95) declaration_specifiers -> . type_specifier
    (96) declaration_specifiers -> . type_qualifier declaration_specifiers
    (97) declaration_specifiers -> . type_qualifier
    (98) declaration_specifiers -> . function_specifier declaration_specifiers
    (99) declaration_specifiers -> . function_specifier
    (100) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (101) declaration_specifiers -> . alignment_specifier
    (106) storage_class_specifier -> . TYPEDEF
    (107) storage_class_specifier -> . EXTERN
    (108) storage_class_specifier -> . STATIC
    (109) storage_class_specifier -> . THREAD_LOCAL
    (110) storage_class_specifier -> . AUTO
    (111) storage_class_specifier -> . REGISTER
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (160) function_specifier -> . INLINE
    (161) function_specifier -> . NORETURN
    (162) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (163) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    TIMES           reduce using rule 93 (declaration_specifiers -> storage_class_specifier .)
    IDENTIFIER      reduce using rule 93 (declaration_specifiers -> storage_class_specifier .)
    LPAREN          reduce using rule 93 (declaration_specifiers -> storage_class_specifier .)
    LBRACKET        reduce using rule 93 (declaration_specifiers -> storage_class_specifier .)
    COMMA           reduce using rule 93 (declaration_specifiers -> storage_class_specifier .)
    RPAREN          reduce using rule 93 (declaration_specifiers -> storage_class_specifier .)
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    INLINE          shift and go to state 39
    NORETURN        shift and go to state 40
    ALIGNAS         shift and go to state 41
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    storage_class_specifier        shift and go to state 8
    declaration_specifiers         shift and go to state 55
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 42

state 9

    (94) declaration_specifiers -> type_specifier . declaration_specifiers
    (95) declaration_specifiers -> type_specifier .
    (92) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (93) declaration_specifiers -> . storage_class_specifier
    (94) declaration_specifiers -> . type_specifier declaration_specifiers
    (95) declaration_specifiers -> . type_specifier
    (96) declaration_specifiers -> . type_qualifier declaration_specifiers
    (97) declaration_specifiers -> . type_qualifier
    (98) declaration_specifiers -> . function_specifier declaration_specifiers
    (99) declaration_specifiers -> . function_specifier
    (100) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (101) declaration_specifiers -> . alignment_specifier
    (106) storage_class_specifier -> . TYPEDEF
    (107) storage_class_specifier -> . EXTERN
    (108) storage_class_specifier -> . STATIC
    (109) storage_class_specifier -> . THREAD_LOCAL
    (110) storage_class_specifier -> . AUTO
    (111) storage_class_specifier -> . REGISTER
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (160) function_specifier -> . INLINE
    (161) function_specifier -> . NORETURN
    (162) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (163) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    TIMES           reduce using rule 95 (declaration_specifiers -> type_specifier .)
    IDENTIFIER      reduce using rule 95 (declaration_specifiers -> type_specifier .)
    LPAREN          reduce using rule 95 (declaration_specifiers -> type_specifier .)
    LBRACKET        reduce using rule 95 (declaration_specifiers -> type_specifier .)
    COMMA           reduce using rule 95 (declaration_specifiers -> type_specifier .)
    RPAREN          reduce using rule 95 (declaration_specifiers -> type_specifier .)
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    INLINE          shift and go to state 39
    NORETURN        shift and go to state 40
    ALIGNAS         shift and go to state 41
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    type_specifier                 shift and go to state 9
    declaration_specifiers         shift and go to state 56
    storage_class_specifier        shift and go to state 8
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 42

state 10

    (96) declaration_specifiers -> type_qualifier . declaration_specifiers
    (97) declaration_specifiers -> type_qualifier .
    (92) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (93) declaration_specifiers -> . storage_class_specifier
    (94) declaration_specifiers -> . type_specifier declaration_specifiers
    (95) declaration_specifiers -> . type_specifier
    (96) declaration_specifiers -> . type_qualifier declaration_specifiers
    (97) declaration_specifiers -> . type_qualifier
    (98) declaration_specifiers -> . function_specifier declaration_specifiers
    (99) declaration_specifiers -> . function_specifier
    (100) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (101) declaration_specifiers -> . alignment_specifier
    (106) storage_class_specifier -> . TYPEDEF
    (107) storage_class_specifier -> . EXTERN
    (108) storage_class_specifier -> . STATIC
    (109) storage_class_specifier -> . THREAD_LOCAL
    (110) storage_class_specifier -> . AUTO
    (111) storage_class_specifier -> . REGISTER
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (160) function_specifier -> . INLINE
    (161) function_specifier -> . NORETURN
    (162) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (163) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    TIMES           reduce using rule 97 (declaration_specifiers -> type_qualifier .)
    IDENTIFIER      reduce using rule 97 (declaration_specifiers -> type_qualifier .)
    LPAREN          reduce using rule 97 (declaration_specifiers -> type_qualifier .)
    LBRACKET        reduce using rule 97 (declaration_specifiers -> type_qualifier .)
    COMMA           reduce using rule 97 (declaration_specifiers -> type_qualifier .)
    RPAREN          reduce using rule 97 (declaration_specifiers -> type_qualifier .)
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    INLINE          shift and go to state 39
    NORETURN        shift and go to state 40
    ALIGNAS         shift and go to state 41
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    type_qualifier                 shift and go to state 10
    declaration_specifiers         shift and go to state 57
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 42

state 11

    (98) declaration_specifiers -> function_specifier . declaration_specifiers
    (99) declaration_specifiers -> function_specifier .
    (92) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (93) declaration_specifiers -> . storage_class_specifier
    (94) declaration_specifiers -> . type_specifier declaration_specifiers
    (95) declaration_specifiers -> . type_specifier
    (96) declaration_specifiers -> . type_qualifier declaration_specifiers
    (97) declaration_specifiers -> . type_qualifier
    (98) declaration_specifiers -> . function_specifier declaration_specifiers
    (99) declaration_specifiers -> . function_specifier
    (100) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (101) declaration_specifiers -> . alignment_specifier
    (106) storage_class_specifier -> . TYPEDEF
    (107) storage_class_specifier -> . EXTERN
    (108) storage_class_specifier -> . STATIC
    (109) storage_class_specifier -> . THREAD_LOCAL
    (110) storage_class_specifier -> . AUTO
    (111) storage_class_specifier -> . REGISTER
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (160) function_specifier -> . INLINE
    (161) function_specifier -> . NORETURN
    (162) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (163) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    TIMES           reduce using rule 99 (declaration_specifiers -> function_specifier .)
    IDENTIFIER      reduce using rule 99 (declaration_specifiers -> function_specifier .)
    LPAREN          reduce using rule 99 (declaration_specifiers -> function_specifier .)
    LBRACKET        reduce using rule 99 (declaration_specifiers -> function_specifier .)
    COMMA           reduce using rule 99 (declaration_specifiers -> function_specifier .)
    RPAREN          reduce using rule 99 (declaration_specifiers -> function_specifier .)
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    INLINE          shift and go to state 39
    NORETURN        shift and go to state 40
    ALIGNAS         shift and go to state 41
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    function_specifier             shift and go to state 11
    declaration_specifiers         shift and go to state 58
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 42

state 12

    (100) declaration_specifiers -> alignment_specifier . declaration_specifiers
    (101) declaration_specifiers -> alignment_specifier .
    (92) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (93) declaration_specifiers -> . storage_class_specifier
    (94) declaration_specifiers -> . type_specifier declaration_specifiers
    (95) declaration_specifiers -> . type_specifier
    (96) declaration_specifiers -> . type_qualifier declaration_specifiers
    (97) declaration_specifiers -> . type_qualifier
    (98) declaration_specifiers -> . function_specifier declaration_specifiers
    (99) declaration_specifiers -> . function_specifier
    (100) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (101) declaration_specifiers -> . alignment_specifier
    (106) storage_class_specifier -> . TYPEDEF
    (107) storage_class_specifier -> . EXTERN
    (108) storage_class_specifier -> . STATIC
    (109) storage_class_specifier -> . THREAD_LOCAL
    (110) storage_class_specifier -> . AUTO
    (111) storage_class_specifier -> . REGISTER
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (160) function_specifier -> . INLINE
    (161) function_specifier -> . NORETURN
    (162) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (163) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    TIMES           reduce using rule 101 (declaration_specifiers -> alignment_specifier .)
    IDENTIFIER      reduce using rule 101 (declaration_specifiers -> alignment_specifier .)
    LPAREN          reduce using rule 101 (declaration_specifiers -> alignment_specifier .)
    LBRACKET        reduce using rule 101 (declaration_specifiers -> alignment_specifier .)
    COMMA           reduce using rule 101 (declaration_specifiers -> alignment_specifier .)
    RPAREN          reduce using rule 101 (declaration_specifiers -> alignment_specifier .)
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    INLINE          shift and go to state 39
    NORETURN        shift and go to state 40
    ALIGNAS         shift and go to state 41
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    alignment_specifier            shift and go to state 12
    declaration_specifiers         shift and go to state 59
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 42

state 13

    (233) static_assert_declaration -> STATIC_ASSERT . LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON

    LPAREN          shift and go to state 60


state 14

    (106) storage_class_specifier -> TYPEDEF .

    TYPEDEF         reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    THREAD_LOCAL    reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    BOOL            reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    COMPLEX         reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    IMAGINARY       reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    RESTRICT        reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    ATOMIC          reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    INLINE          reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    NORETURN        reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    ALIGNAS         reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    TIMES           reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    IDENTIFIER      reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    LPAREN          reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    LBRACKET        reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    COMMA           reduce using rule 106 (storage_class_specifier -> TYPEDEF .)
    RPAREN          reduce using rule 106 (storage_class_specifier -> TYPEDEF .)


state 15

    (107) storage_class_specifier -> EXTERN .

    TYPEDEF         reduce using rule 107 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 107 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 107 (storage_class_specifier -> EXTERN .)
    THREAD_LOCAL    reduce using rule 107 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 107 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 107 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 107 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 107 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 107 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 107 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 107 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 107 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 107 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 107 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 107 (storage_class_specifier -> EXTERN .)
    BOOL            reduce using rule 107 (storage_class_specifier -> EXTERN .)
    COMPLEX         reduce using rule 107 (storage_class_specifier -> EXTERN .)
    IMAGINARY       reduce using rule 107 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 107 (storage_class_specifier -> EXTERN .)
    RESTRICT        reduce using rule 107 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 107 (storage_class_specifier -> EXTERN .)
    ATOMIC          reduce using rule 107 (storage_class_specifier -> EXTERN .)
    INLINE          reduce using rule 107 (storage_class_specifier -> EXTERN .)
    NORETURN        reduce using rule 107 (storage_class_specifier -> EXTERN .)
    ALIGNAS         reduce using rule 107 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 107 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 107 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 107 (storage_class_specifier -> EXTERN .)
    TIMES           reduce using rule 107 (storage_class_specifier -> EXTERN .)
    IDENTIFIER      reduce using rule 107 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 107 (storage_class_specifier -> EXTERN .)
    LBRACKET        reduce using rule 107 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 107 (storage_class_specifier -> EXTERN .)
    RPAREN          reduce using rule 107 (storage_class_specifier -> EXTERN .)


state 16

    (108) storage_class_specifier -> STATIC .

    TYPEDEF         reduce using rule 108 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 108 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 108 (storage_class_specifier -> STATIC .)
    THREAD_LOCAL    reduce using rule 108 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 108 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 108 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 108 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 108 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 108 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 108 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 108 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 108 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 108 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 108 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 108 (storage_class_specifier -> STATIC .)
    BOOL            reduce using rule 108 (storage_class_specifier -> STATIC .)
    COMPLEX         reduce using rule 108 (storage_class_specifier -> STATIC .)
    IMAGINARY       reduce using rule 108 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 108 (storage_class_specifier -> STATIC .)
    RESTRICT        reduce using rule 108 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 108 (storage_class_specifier -> STATIC .)
    ATOMIC          reduce using rule 108 (storage_class_specifier -> STATIC .)
    INLINE          reduce using rule 108 (storage_class_specifier -> STATIC .)
    NORETURN        reduce using rule 108 (storage_class_specifier -> STATIC .)
    ALIGNAS         reduce using rule 108 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 108 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 108 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 108 (storage_class_specifier -> STATIC .)
    TIMES           reduce using rule 108 (storage_class_specifier -> STATIC .)
    IDENTIFIER      reduce using rule 108 (storage_class_specifier -> STATIC .)
    LPAREN          reduce using rule 108 (storage_class_specifier -> STATIC .)
    LBRACKET        reduce using rule 108 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 108 (storage_class_specifier -> STATIC .)
    RPAREN          reduce using rule 108 (storage_class_specifier -> STATIC .)


state 17

    (109) storage_class_specifier -> THREAD_LOCAL .

    TYPEDEF         reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    EXTERN          reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    STATIC          reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    THREAD_LOCAL    reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    AUTO            reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    REGISTER        reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    VOID            reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    CHAR            reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    SHORT           reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    INT             reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    LONG            reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    FLOAT           reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    DOUBLE          reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    SIGNED          reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    UNSIGNED        reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    BOOL            reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    COMPLEX         reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    IMAGINARY       reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    CONST           reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    RESTRICT        reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    VOLATILE        reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    ATOMIC          reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    INLINE          reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    NORETURN        reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    ALIGNAS         reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    ENUM            reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    STRUCT          reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    UNION           reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    TIMES           reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    IDENTIFIER      reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    LPAREN          reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    LBRACKET        reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    COMMA           reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)
    RPAREN          reduce using rule 109 (storage_class_specifier -> THREAD_LOCAL .)


state 18

    (110) storage_class_specifier -> AUTO .

    TYPEDEF         reduce using rule 110 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 110 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 110 (storage_class_specifier -> AUTO .)
    THREAD_LOCAL    reduce using rule 110 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 110 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 110 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 110 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 110 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 110 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 110 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 110 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 110 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 110 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 110 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 110 (storage_class_specifier -> AUTO .)
    BOOL            reduce using rule 110 (storage_class_specifier -> AUTO .)
    COMPLEX         reduce using rule 110 (storage_class_specifier -> AUTO .)
    IMAGINARY       reduce using rule 110 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 110 (storage_class_specifier -> AUTO .)
    RESTRICT        reduce using rule 110 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 110 (storage_class_specifier -> AUTO .)
    ATOMIC          reduce using rule 110 (storage_class_specifier -> AUTO .)
    INLINE          reduce using rule 110 (storage_class_specifier -> AUTO .)
    NORETURN        reduce using rule 110 (storage_class_specifier -> AUTO .)
    ALIGNAS         reduce using rule 110 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 110 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 110 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 110 (storage_class_specifier -> AUTO .)
    TIMES           reduce using rule 110 (storage_class_specifier -> AUTO .)
    IDENTIFIER      reduce using rule 110 (storage_class_specifier -> AUTO .)
    LPAREN          reduce using rule 110 (storage_class_specifier -> AUTO .)
    LBRACKET        reduce using rule 110 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 110 (storage_class_specifier -> AUTO .)
    RPAREN          reduce using rule 110 (storage_class_specifier -> AUTO .)


state 19

    (111) storage_class_specifier -> REGISTER .

    TYPEDEF         reduce using rule 111 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 111 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 111 (storage_class_specifier -> REGISTER .)
    THREAD_LOCAL    reduce using rule 111 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 111 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 111 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 111 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 111 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 111 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 111 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 111 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 111 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 111 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 111 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 111 (storage_class_specifier -> REGISTER .)
    BOOL            reduce using rule 111 (storage_class_specifier -> REGISTER .)
    COMPLEX         reduce using rule 111 (storage_class_specifier -> REGISTER .)
    IMAGINARY       reduce using rule 111 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 111 (storage_class_specifier -> REGISTER .)
    RESTRICT        reduce using rule 111 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 111 (storage_class_specifier -> REGISTER .)
    ATOMIC          reduce using rule 111 (storage_class_specifier -> REGISTER .)
    INLINE          reduce using rule 111 (storage_class_specifier -> REGISTER .)
    NORETURN        reduce using rule 111 (storage_class_specifier -> REGISTER .)
    ALIGNAS         reduce using rule 111 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 111 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 111 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 111 (storage_class_specifier -> REGISTER .)
    TIMES           reduce using rule 111 (storage_class_specifier -> REGISTER .)
    IDENTIFIER      reduce using rule 111 (storage_class_specifier -> REGISTER .)
    LPAREN          reduce using rule 111 (storage_class_specifier -> REGISTER .)
    LBRACKET        reduce using rule 111 (storage_class_specifier -> REGISTER .)
    COMMA           reduce using rule 111 (storage_class_specifier -> REGISTER .)
    RPAREN          reduce using rule 111 (storage_class_specifier -> REGISTER .)


state 20

    (112) type_specifier -> VOID .

    TYPEDEF         reduce using rule 112 (type_specifier -> VOID .)
    EXTERN          reduce using rule 112 (type_specifier -> VOID .)
    STATIC          reduce using rule 112 (type_specifier -> VOID .)
    THREAD_LOCAL    reduce using rule 112 (type_specifier -> VOID .)
    AUTO            reduce using rule 112 (type_specifier -> VOID .)
    REGISTER        reduce using rule 112 (type_specifier -> VOID .)
    VOID            reduce using rule 112 (type_specifier -> VOID .)
    CHAR            reduce using rule 112 (type_specifier -> VOID .)
    SHORT           reduce using rule 112 (type_specifier -> VOID .)
    INT             reduce using rule 112 (type_specifier -> VOID .)
    LONG            reduce using rule 112 (type_specifier -> VOID .)
    FLOAT           reduce using rule 112 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 112 (type_specifier -> VOID .)
    SIGNED          reduce using rule 112 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 112 (type_specifier -> VOID .)
    BOOL            reduce using rule 112 (type_specifier -> VOID .)
    COMPLEX         reduce using rule 112 (type_specifier -> VOID .)
    IMAGINARY       reduce using rule 112 (type_specifier -> VOID .)
    CONST           reduce using rule 112 (type_specifier -> VOID .)
    RESTRICT        reduce using rule 112 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 112 (type_specifier -> VOID .)
    ATOMIC          reduce using rule 112 (type_specifier -> VOID .)
    INLINE          reduce using rule 112 (type_specifier -> VOID .)
    NORETURN        reduce using rule 112 (type_specifier -> VOID .)
    ALIGNAS         reduce using rule 112 (type_specifier -> VOID .)
    ENUM            reduce using rule 112 (type_specifier -> VOID .)
    STRUCT          reduce using rule 112 (type_specifier -> VOID .)
    UNION           reduce using rule 112 (type_specifier -> VOID .)
    TIMES           reduce using rule 112 (type_specifier -> VOID .)
    IDENTIFIER      reduce using rule 112 (type_specifier -> VOID .)
    LPAREN          reduce using rule 112 (type_specifier -> VOID .)
    LBRACKET        reduce using rule 112 (type_specifier -> VOID .)
    COMMA           reduce using rule 112 (type_specifier -> VOID .)
    RPAREN          reduce using rule 112 (type_specifier -> VOID .)
    SEMICOLON       reduce using rule 112 (type_specifier -> VOID .)
    COLON           reduce using rule 112 (type_specifier -> VOID .)


state 21

    (113) type_specifier -> CHAR .

    TYPEDEF         reduce using rule 113 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 113 (type_specifier -> CHAR .)
    STATIC          reduce using rule 113 (type_specifier -> CHAR .)
    THREAD_LOCAL    reduce using rule 113 (type_specifier -> CHAR .)
    AUTO            reduce using rule 113 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 113 (type_specifier -> CHAR .)
    VOID            reduce using rule 113 (type_specifier -> CHAR .)
    CHAR            reduce using rule 113 (type_specifier -> CHAR .)
    SHORT           reduce using rule 113 (type_specifier -> CHAR .)
    INT             reduce using rule 113 (type_specifier -> CHAR .)
    LONG            reduce using rule 113 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 113 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 113 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 113 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 113 (type_specifier -> CHAR .)
    BOOL            reduce using rule 113 (type_specifier -> CHAR .)
    COMPLEX         reduce using rule 113 (type_specifier -> CHAR .)
    IMAGINARY       reduce using rule 113 (type_specifier -> CHAR .)
    CONST           reduce using rule 113 (type_specifier -> CHAR .)
    RESTRICT        reduce using rule 113 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 113 (type_specifier -> CHAR .)
    ATOMIC          reduce using rule 113 (type_specifier -> CHAR .)
    INLINE          reduce using rule 113 (type_specifier -> CHAR .)
    NORETURN        reduce using rule 113 (type_specifier -> CHAR .)
    ALIGNAS         reduce using rule 113 (type_specifier -> CHAR .)
    ENUM            reduce using rule 113 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 113 (type_specifier -> CHAR .)
    UNION           reduce using rule 113 (type_specifier -> CHAR .)
    TIMES           reduce using rule 113 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 113 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 113 (type_specifier -> CHAR .)
    LBRACKET        reduce using rule 113 (type_specifier -> CHAR .)
    COMMA           reduce using rule 113 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 113 (type_specifier -> CHAR .)
    SEMICOLON       reduce using rule 113 (type_specifier -> CHAR .)
    COLON           reduce using rule 113 (type_specifier -> CHAR .)


state 22

    (114) type_specifier -> SHORT .

    TYPEDEF         reduce using rule 114 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 114 (type_specifier -> SHORT .)
    STATIC          reduce using rule 114 (type_specifier -> SHORT .)
    THREAD_LOCAL    reduce using rule 114 (type_specifier -> SHORT .)
    AUTO            reduce using rule 114 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 114 (type_specifier -> SHORT .)
    VOID            reduce using rule 114 (type_specifier -> SHORT .)
    CHAR            reduce using rule 114 (type_specifier -> SHORT .)
    SHORT           reduce using rule 114 (type_specifier -> SHORT .)
    INT             reduce using rule 114 (type_specifier -> SHORT .)
    LONG            reduce using rule 114 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 114 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 114 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 114 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 114 (type_specifier -> SHORT .)
    BOOL            reduce using rule 114 (type_specifier -> SHORT .)
    COMPLEX         reduce using rule 114 (type_specifier -> SHORT .)
    IMAGINARY       reduce using rule 114 (type_specifier -> SHORT .)
    CONST           reduce using rule 114 (type_specifier -> SHORT .)
    RESTRICT        reduce using rule 114 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 114 (type_specifier -> SHORT .)
    ATOMIC          reduce using rule 114 (type_specifier -> SHORT .)
    INLINE          reduce using rule 114 (type_specifier -> SHORT .)
    NORETURN        reduce using rule 114 (type_specifier -> SHORT .)
    ALIGNAS         reduce using rule 114 (type_specifier -> SHORT .)
    ENUM            reduce using rule 114 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 114 (type_specifier -> SHORT .)
    UNION           reduce using rule 114 (type_specifier -> SHORT .)
    TIMES           reduce using rule 114 (type_specifier -> SHORT .)
    IDENTIFIER      reduce using rule 114 (type_specifier -> SHORT .)
    LPAREN          reduce using rule 114 (type_specifier -> SHORT .)
    LBRACKET        reduce using rule 114 (type_specifier -> SHORT .)
    COMMA           reduce using rule 114 (type_specifier -> SHORT .)
    RPAREN          reduce using rule 114 (type_specifier -> SHORT .)
    SEMICOLON       reduce using rule 114 (type_specifier -> SHORT .)
    COLON           reduce using rule 114 (type_specifier -> SHORT .)


state 23

    (115) type_specifier -> INT .

    TYPEDEF         reduce using rule 115 (type_specifier -> INT .)
    EXTERN          reduce using rule 115 (type_specifier -> INT .)
    STATIC          reduce using rule 115 (type_specifier -> INT .)
    THREAD_LOCAL    reduce using rule 115 (type_specifier -> INT .)
    AUTO            reduce using rule 115 (type_specifier -> INT .)
    REGISTER        reduce using rule 115 (type_specifier -> INT .)
    VOID            reduce using rule 115 (type_specifier -> INT .)
    CHAR            reduce using rule 115 (type_specifier -> INT .)
    SHORT           reduce using rule 115 (type_specifier -> INT .)
    INT             reduce using rule 115 (type_specifier -> INT .)
    LONG            reduce using rule 115 (type_specifier -> INT .)
    FLOAT           reduce using rule 115 (type_specifier -> INT .)
    DOUBLE          reduce using rule 115 (type_specifier -> INT .)
    SIGNED          reduce using rule 115 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 115 (type_specifier -> INT .)
    BOOL            reduce using rule 115 (type_specifier -> INT .)
    COMPLEX         reduce using rule 115 (type_specifier -> INT .)
    IMAGINARY       reduce using rule 115 (type_specifier -> INT .)
    CONST           reduce using rule 115 (type_specifier -> INT .)
    RESTRICT        reduce using rule 115 (type_specifier -> INT .)
    VOLATILE        reduce using rule 115 (type_specifier -> INT .)
    ATOMIC          reduce using rule 115 (type_specifier -> INT .)
    INLINE          reduce using rule 115 (type_specifier -> INT .)
    NORETURN        reduce using rule 115 (type_specifier -> INT .)
    ALIGNAS         reduce using rule 115 (type_specifier -> INT .)
    ENUM            reduce using rule 115 (type_specifier -> INT .)
    STRUCT          reduce using rule 115 (type_specifier -> INT .)
    UNION           reduce using rule 115 (type_specifier -> INT .)
    TIMES           reduce using rule 115 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 115 (type_specifier -> INT .)
    LPAREN          reduce using rule 115 (type_specifier -> INT .)
    LBRACKET        reduce using rule 115 (type_specifier -> INT .)
    COMMA           reduce using rule 115 (type_specifier -> INT .)
    RPAREN          reduce using rule 115 (type_specifier -> INT .)
    SEMICOLON       reduce using rule 115 (type_specifier -> INT .)
    COLON           reduce using rule 115 (type_specifier -> INT .)


state 24

    (116) type_specifier -> LONG .

    TYPEDEF         reduce using rule 116 (type_specifier -> LONG .)
    EXTERN          reduce using rule 116 (type_specifier -> LONG .)
    STATIC          reduce using rule 116 (type_specifier -> LONG .)
    THREAD_LOCAL    reduce using rule 116 (type_specifier -> LONG .)
    AUTO            reduce using rule 116 (type_specifier -> LONG .)
    REGISTER        reduce using rule 116 (type_specifier -> LONG .)
    VOID            reduce using rule 116 (type_specifier -> LONG .)
    CHAR            reduce using rule 116 (type_specifier -> LONG .)
    SHORT           reduce using rule 116 (type_specifier -> LONG .)
    INT             reduce using rule 116 (type_specifier -> LONG .)
    LONG            reduce using rule 116 (type_specifier -> LONG .)
    FLOAT           reduce using rule 116 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 116 (type_specifier -> LONG .)
    SIGNED          reduce using rule 116 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 116 (type_specifier -> LONG .)
    BOOL            reduce using rule 116 (type_specifier -> LONG .)
    COMPLEX         reduce using rule 116 (type_specifier -> LONG .)
    IMAGINARY       reduce using rule 116 (type_specifier -> LONG .)
    CONST           reduce using rule 116 (type_specifier -> LONG .)
    RESTRICT        reduce using rule 116 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 116 (type_specifier -> LONG .)
    ATOMIC          reduce using rule 116 (type_specifier -> LONG .)
    INLINE          reduce using rule 116 (type_specifier -> LONG .)
    NORETURN        reduce using rule 116 (type_specifier -> LONG .)
    ALIGNAS         reduce using rule 116 (type_specifier -> LONG .)
    ENUM            reduce using rule 116 (type_specifier -> LONG .)
    STRUCT          reduce using rule 116 (type_specifier -> LONG .)
    UNION           reduce using rule 116 (type_specifier -> LONG .)
    TIMES           reduce using rule 116 (type_specifier -> LONG .)
    IDENTIFIER      reduce using rule 116 (type_specifier -> LONG .)
    LPAREN          reduce using rule 116 (type_specifier -> LONG .)
    LBRACKET        reduce using rule 116 (type_specifier -> LONG .)
    COMMA           reduce using rule 116 (type_specifier -> LONG .)
    RPAREN          reduce using rule 116 (type_specifier -> LONG .)
    SEMICOLON       reduce using rule 116 (type_specifier -> LONG .)
    COLON           reduce using rule 116 (type_specifier -> LONG .)


state 25

    (117) type_specifier -> FLOAT .

    TYPEDEF         reduce using rule 117 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 117 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 117 (type_specifier -> FLOAT .)
    THREAD_LOCAL    reduce using rule 117 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 117 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 117 (type_specifier -> FLOAT .)
    VOID            reduce using rule 117 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 117 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 117 (type_specifier -> FLOAT .)
    INT             reduce using rule 117 (type_specifier -> FLOAT .)
    LONG            reduce using rule 117 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 117 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 117 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 117 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 117 (type_specifier -> FLOAT .)
    BOOL            reduce using rule 117 (type_specifier -> FLOAT .)
    COMPLEX         reduce using rule 117 (type_specifier -> FLOAT .)
    IMAGINARY       reduce using rule 117 (type_specifier -> FLOAT .)
    CONST           reduce using rule 117 (type_specifier -> FLOAT .)
    RESTRICT        reduce using rule 117 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 117 (type_specifier -> FLOAT .)
    ATOMIC          reduce using rule 117 (type_specifier -> FLOAT .)
    INLINE          reduce using rule 117 (type_specifier -> FLOAT .)
    NORETURN        reduce using rule 117 (type_specifier -> FLOAT .)
    ALIGNAS         reduce using rule 117 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 117 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 117 (type_specifier -> FLOAT .)
    UNION           reduce using rule 117 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 117 (type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 117 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 117 (type_specifier -> FLOAT .)
    LBRACKET        reduce using rule 117 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 117 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 117 (type_specifier -> FLOAT .)
    SEMICOLON       reduce using rule 117 (type_specifier -> FLOAT .)
    COLON           reduce using rule 117 (type_specifier -> FLOAT .)


state 26

    (118) type_specifier -> DOUBLE .

    TYPEDEF         reduce using rule 118 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 118 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 118 (type_specifier -> DOUBLE .)
    THREAD_LOCAL    reduce using rule 118 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 118 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 118 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 118 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 118 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 118 (type_specifier -> DOUBLE .)
    INT             reduce using rule 118 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 118 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 118 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 118 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 118 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 118 (type_specifier -> DOUBLE .)
    BOOL            reduce using rule 118 (type_specifier -> DOUBLE .)
    COMPLEX         reduce using rule 118 (type_specifier -> DOUBLE .)
    IMAGINARY       reduce using rule 118 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 118 (type_specifier -> DOUBLE .)
    RESTRICT        reduce using rule 118 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 118 (type_specifier -> DOUBLE .)
    ATOMIC          reduce using rule 118 (type_specifier -> DOUBLE .)
    INLINE          reduce using rule 118 (type_specifier -> DOUBLE .)
    NORETURN        reduce using rule 118 (type_specifier -> DOUBLE .)
    ALIGNAS         reduce using rule 118 (type_specifier -> DOUBLE .)
    ENUM            reduce using rule 118 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 118 (type_specifier -> DOUBLE .)
    UNION           reduce using rule 118 (type_specifier -> DOUBLE .)
    TIMES           reduce using rule 118 (type_specifier -> DOUBLE .)
    IDENTIFIER      reduce using rule 118 (type_specifier -> DOUBLE .)
    LPAREN          reduce using rule 118 (type_specifier -> DOUBLE .)
    LBRACKET        reduce using rule 118 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 118 (type_specifier -> DOUBLE .)
    RPAREN          reduce using rule 118 (type_specifier -> DOUBLE .)
    SEMICOLON       reduce using rule 118 (type_specifier -> DOUBLE .)
    COLON           reduce using rule 118 (type_specifier -> DOUBLE .)


state 27

    (119) type_specifier -> SIGNED .

    TYPEDEF         reduce using rule 119 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 119 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 119 (type_specifier -> SIGNED .)
    THREAD_LOCAL    reduce using rule 119 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 119 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 119 (type_specifier -> SIGNED .)
    VOID            reduce using rule 119 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 119 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 119 (type_specifier -> SIGNED .)
    INT             reduce using rule 119 (type_specifier -> SIGNED .)
    LONG            reduce using rule 119 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 119 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 119 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 119 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 119 (type_specifier -> SIGNED .)
    BOOL            reduce using rule 119 (type_specifier -> SIGNED .)
    COMPLEX         reduce using rule 119 (type_specifier -> SIGNED .)
    IMAGINARY       reduce using rule 119 (type_specifier -> SIGNED .)
    CONST           reduce using rule 119 (type_specifier -> SIGNED .)
    RESTRICT        reduce using rule 119 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 119 (type_specifier -> SIGNED .)
    ATOMIC          reduce using rule 119 (type_specifier -> SIGNED .)
    INLINE          reduce using rule 119 (type_specifier -> SIGNED .)
    NORETURN        reduce using rule 119 (type_specifier -> SIGNED .)
    ALIGNAS         reduce using rule 119 (type_specifier -> SIGNED .)
    ENUM            reduce using rule 119 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 119 (type_specifier -> SIGNED .)
    UNION           reduce using rule 119 (type_specifier -> SIGNED .)
    TIMES           reduce using rule 119 (type_specifier -> SIGNED .)
    IDENTIFIER      reduce using rule 119 (type_specifier -> SIGNED .)
    LPAREN          reduce using rule 119 (type_specifier -> SIGNED .)
    LBRACKET        reduce using rule 119 (type_specifier -> SIGNED .)
    COMMA           reduce using rule 119 (type_specifier -> SIGNED .)
    RPAREN          reduce using rule 119 (type_specifier -> SIGNED .)
    SEMICOLON       reduce using rule 119 (type_specifier -> SIGNED .)
    COLON           reduce using rule 119 (type_specifier -> SIGNED .)


state 28

    (120) type_specifier -> UNSIGNED .

    TYPEDEF         reduce using rule 120 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 120 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 120 (type_specifier -> UNSIGNED .)
    THREAD_LOCAL    reduce using rule 120 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 120 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 120 (type_specifier -> UNSIGNED .)
    VOID            reduce using rule 120 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 120 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 120 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 120 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 120 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 120 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 120 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 120 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 120 (type_specifier -> UNSIGNED .)
    BOOL            reduce using rule 120 (type_specifier -> UNSIGNED .)
    COMPLEX         reduce using rule 120 (type_specifier -> UNSIGNED .)
    IMAGINARY       reduce using rule 120 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 120 (type_specifier -> UNSIGNED .)
    RESTRICT        reduce using rule 120 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 120 (type_specifier -> UNSIGNED .)
    ATOMIC          reduce using rule 120 (type_specifier -> UNSIGNED .)
    INLINE          reduce using rule 120 (type_specifier -> UNSIGNED .)
    NORETURN        reduce using rule 120 (type_specifier -> UNSIGNED .)
    ALIGNAS         reduce using rule 120 (type_specifier -> UNSIGNED .)
    ENUM            reduce using rule 120 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 120 (type_specifier -> UNSIGNED .)
    UNION           reduce using rule 120 (type_specifier -> UNSIGNED .)
    TIMES           reduce using rule 120 (type_specifier -> UNSIGNED .)
    IDENTIFIER      reduce using rule 120 (type_specifier -> UNSIGNED .)
    LPAREN          reduce using rule 120 (type_specifier -> UNSIGNED .)
    LBRACKET        reduce using rule 120 (type_specifier -> UNSIGNED .)
    COMMA           reduce using rule 120 (type_specifier -> UNSIGNED .)
    RPAREN          reduce using rule 120 (type_specifier -> UNSIGNED .)
    SEMICOLON       reduce using rule 120 (type_specifier -> UNSIGNED .)
    COLON           reduce using rule 120 (type_specifier -> UNSIGNED .)


state 29

    (121) type_specifier -> BOOL .

    TYPEDEF         reduce using rule 121 (type_specifier -> BOOL .)
    EXTERN          reduce using rule 121 (type_specifier -> BOOL .)
    STATIC          reduce using rule 121 (type_specifier -> BOOL .)
    THREAD_LOCAL    reduce using rule 121 (type_specifier -> BOOL .)
    AUTO            reduce using rule 121 (type_specifier -> BOOL .)
    REGISTER        reduce using rule 121 (type_specifier -> BOOL .)
    VOID            reduce using rule 121 (type_specifier -> BOOL .)
    CHAR            reduce using rule 121 (type_specifier -> BOOL .)
    SHORT           reduce using rule 121 (type_specifier -> BOOL .)
    INT             reduce using rule 121 (type_specifier -> BOOL .)
    LONG            reduce using rule 121 (type_specifier -> BOOL .)
    FLOAT           reduce using rule 121 (type_specifier -> BOOL .)
    DOUBLE          reduce using rule 121 (type_specifier -> BOOL .)
    SIGNED          reduce using rule 121 (type_specifier -> BOOL .)
    UNSIGNED        reduce using rule 121 (type_specifier -> BOOL .)
    BOOL            reduce using rule 121 (type_specifier -> BOOL .)
    COMPLEX         reduce using rule 121 (type_specifier -> BOOL .)
    IMAGINARY       reduce using rule 121 (type_specifier -> BOOL .)
    CONST           reduce using rule 121 (type_specifier -> BOOL .)
    RESTRICT        reduce using rule 121 (type_specifier -> BOOL .)
    VOLATILE        reduce using rule 121 (type_specifier -> BOOL .)
    ATOMIC          reduce using rule 121 (type_specifier -> BOOL .)
    INLINE          reduce using rule 121 (type_specifier -> BOOL .)
    NORETURN        reduce using rule 121 (type_specifier -> BOOL .)
    ALIGNAS         reduce using rule 121 (type_specifier -> BOOL .)
    ENUM            reduce using rule 121 (type_specifier -> BOOL .)
    STRUCT          reduce using rule 121 (type_specifier -> BOOL .)
    UNION           reduce using rule 121 (type_specifier -> BOOL .)
    TIMES           reduce using rule 121 (type_specifier -> BOOL .)
    IDENTIFIER      reduce using rule 121 (type_specifier -> BOOL .)
    LPAREN          reduce using rule 121 (type_specifier -> BOOL .)
    LBRACKET        reduce using rule 121 (type_specifier -> BOOL .)
    COMMA           reduce using rule 121 (type_specifier -> BOOL .)
    RPAREN          reduce using rule 121 (type_specifier -> BOOL .)
    SEMICOLON       reduce using rule 121 (type_specifier -> BOOL .)
    COLON           reduce using rule 121 (type_specifier -> BOOL .)


state 30

    (122) type_specifier -> COMPLEX .

    TYPEDEF         reduce using rule 122 (type_specifier -> COMPLEX .)
    EXTERN          reduce using rule 122 (type_specifier -> COMPLEX .)
    STATIC          reduce using rule 122 (type_specifier -> COMPLEX .)
    THREAD_LOCAL    reduce using rule 122 (type_specifier -> COMPLEX .)
    AUTO            reduce using rule 122 (type_specifier -> COMPLEX .)
    REGISTER        reduce using rule 122 (type_specifier -> COMPLEX .)
    VOID            reduce using rule 122 (type_specifier -> COMPLEX .)
    CHAR            reduce using rule 122 (type_specifier -> COMPLEX .)
    SHORT           reduce using rule 122 (type_specifier -> COMPLEX .)
    INT             reduce using rule 122 (type_specifier -> COMPLEX .)
    LONG            reduce using rule 122 (type_specifier -> COMPLEX .)
    FLOAT           reduce using rule 122 (type_specifier -> COMPLEX .)
    DOUBLE          reduce using rule 122 (type_specifier -> COMPLEX .)
    SIGNED          reduce using rule 122 (type_specifier -> COMPLEX .)
    UNSIGNED        reduce using rule 122 (type_specifier -> COMPLEX .)
    BOOL            reduce using rule 122 (type_specifier -> COMPLEX .)
    COMPLEX         reduce using rule 122 (type_specifier -> COMPLEX .)
    IMAGINARY       reduce using rule 122 (type_specifier -> COMPLEX .)
    CONST           reduce using rule 122 (type_specifier -> COMPLEX .)
    RESTRICT        reduce using rule 122 (type_specifier -> COMPLEX .)
    VOLATILE        reduce using rule 122 (type_specifier -> COMPLEX .)
    ATOMIC          reduce using rule 122 (type_specifier -> COMPLEX .)
    INLINE          reduce using rule 122 (type_specifier -> COMPLEX .)
    NORETURN        reduce using rule 122 (type_specifier -> COMPLEX .)
    ALIGNAS         reduce using rule 122 (type_specifier -> COMPLEX .)
    ENUM            reduce using rule 122 (type_specifier -> COMPLEX .)
    STRUCT          reduce using rule 122 (type_specifier -> COMPLEX .)
    UNION           reduce using rule 122 (type_specifier -> COMPLEX .)
    TIMES           reduce using rule 122 (type_specifier -> COMPLEX .)
    IDENTIFIER      reduce using rule 122 (type_specifier -> COMPLEX .)
    LPAREN          reduce using rule 122 (type_specifier -> COMPLEX .)
    LBRACKET        reduce using rule 122 (type_specifier -> COMPLEX .)
    COMMA           reduce using rule 122 (type_specifier -> COMPLEX .)
    RPAREN          reduce using rule 122 (type_specifier -> COMPLEX .)
    SEMICOLON       reduce using rule 122 (type_specifier -> COMPLEX .)
    COLON           reduce using rule 122 (type_specifier -> COMPLEX .)


state 31

    (123) type_specifier -> IMAGINARY .

    TYPEDEF         reduce using rule 123 (type_specifier -> IMAGINARY .)
    EXTERN          reduce using rule 123 (type_specifier -> IMAGINARY .)
    STATIC          reduce using rule 123 (type_specifier -> IMAGINARY .)
    THREAD_LOCAL    reduce using rule 123 (type_specifier -> IMAGINARY .)
    AUTO            reduce using rule 123 (type_specifier -> IMAGINARY .)
    REGISTER        reduce using rule 123 (type_specifier -> IMAGINARY .)
    VOID            reduce using rule 123 (type_specifier -> IMAGINARY .)
    CHAR            reduce using rule 123 (type_specifier -> IMAGINARY .)
    SHORT           reduce using rule 123 (type_specifier -> IMAGINARY .)
    INT             reduce using rule 123 (type_specifier -> IMAGINARY .)
    LONG            reduce using rule 123 (type_specifier -> IMAGINARY .)
    FLOAT           reduce using rule 123 (type_specifier -> IMAGINARY .)
    DOUBLE          reduce using rule 123 (type_specifier -> IMAGINARY .)
    SIGNED          reduce using rule 123 (type_specifier -> IMAGINARY .)
    UNSIGNED        reduce using rule 123 (type_specifier -> IMAGINARY .)
    BOOL            reduce using rule 123 (type_specifier -> IMAGINARY .)
    COMPLEX         reduce using rule 123 (type_specifier -> IMAGINARY .)
    IMAGINARY       reduce using rule 123 (type_specifier -> IMAGINARY .)
    CONST           reduce using rule 123 (type_specifier -> IMAGINARY .)
    RESTRICT        reduce using rule 123 (type_specifier -> IMAGINARY .)
    VOLATILE        reduce using rule 123 (type_specifier -> IMAGINARY .)
    ATOMIC          reduce using rule 123 (type_specifier -> IMAGINARY .)
    INLINE          reduce using rule 123 (type_specifier -> IMAGINARY .)
    NORETURN        reduce using rule 123 (type_specifier -> IMAGINARY .)
    ALIGNAS         reduce using rule 123 (type_specifier -> IMAGINARY .)
    ENUM            reduce using rule 123 (type_specifier -> IMAGINARY .)
    STRUCT          reduce using rule 123 (type_specifier -> IMAGINARY .)
    UNION           reduce using rule 123 (type_specifier -> IMAGINARY .)
    TIMES           reduce using rule 123 (type_specifier -> IMAGINARY .)
    IDENTIFIER      reduce using rule 123 (type_specifier -> IMAGINARY .)
    LPAREN          reduce using rule 123 (type_specifier -> IMAGINARY .)
    LBRACKET        reduce using rule 123 (type_specifier -> IMAGINARY .)
    COMMA           reduce using rule 123 (type_specifier -> IMAGINARY .)
    RPAREN          reduce using rule 123 (type_specifier -> IMAGINARY .)
    SEMICOLON       reduce using rule 123 (type_specifier -> IMAGINARY .)
    COLON           reduce using rule 123 (type_specifier -> IMAGINARY .)


state 32

    (124) type_specifier -> atomic_type_specifier .

    TYPEDEF         reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    EXTERN          reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    STATIC          reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    THREAD_LOCAL    reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    AUTO            reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    REGISTER        reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    VOID            reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    CHAR            reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    SHORT           reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    INT             reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    LONG            reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    FLOAT           reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    DOUBLE          reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    SIGNED          reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    UNSIGNED        reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    BOOL            reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    COMPLEX         reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    IMAGINARY       reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    CONST           reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    RESTRICT        reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    VOLATILE        reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    ATOMIC          reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    INLINE          reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    NORETURN        reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    ALIGNAS         reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    ENUM            reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    STRUCT          reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    UNION           reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    TIMES           reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    IDENTIFIER      reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    LPAREN          reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    LBRACKET        reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    COMMA           reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    RPAREN          reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    SEMICOLON       reduce using rule 124 (type_specifier -> atomic_type_specifier .)
    COLON           reduce using rule 124 (type_specifier -> atomic_type_specifier .)


state 33

    (125) type_specifier -> struct_or_union_specifier .

    TYPEDEF         reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    THREAD_LOCAL    reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    BOOL            reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    COMPLEX         reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    IMAGINARY       reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    CONST           reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    RESTRICT        reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    ATOMIC          reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    INLINE          reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    NORETURN        reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    ALIGNAS         reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    TIMES           reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    IDENTIFIER      reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    LPAREN          reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    LBRACKET        reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    COMMA           reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    RPAREN          reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    SEMICOLON       reduce using rule 125 (type_specifier -> struct_or_union_specifier .)
    COLON           reduce using rule 125 (type_specifier -> struct_or_union_specifier .)


state 34

    (126) type_specifier -> enum_specifier .

    TYPEDEF         reduce using rule 126 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 126 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 126 (type_specifier -> enum_specifier .)
    THREAD_LOCAL    reduce using rule 126 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 126 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 126 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 126 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 126 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 126 (type_specifier -> enum_specifier .)
    INT             reduce using rule 126 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 126 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 126 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 126 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 126 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 126 (type_specifier -> enum_specifier .)
    BOOL            reduce using rule 126 (type_specifier -> enum_specifier .)
    COMPLEX         reduce using rule 126 (type_specifier -> enum_specifier .)
    IMAGINARY       reduce using rule 126 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 126 (type_specifier -> enum_specifier .)
    RESTRICT        reduce using rule 126 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 126 (type_specifier -> enum_specifier .)
    ATOMIC          reduce using rule 126 (type_specifier -> enum_specifier .)
    INLINE          reduce using rule 126 (type_specifier -> enum_specifier .)
    NORETURN        reduce using rule 126 (type_specifier -> enum_specifier .)
    ALIGNAS         reduce using rule 126 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 126 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 126 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 126 (type_specifier -> enum_specifier .)
    TIMES           reduce using rule 126 (type_specifier -> enum_specifier .)
    IDENTIFIER      reduce using rule 126 (type_specifier -> enum_specifier .)
    LPAREN          reduce using rule 126 (type_specifier -> enum_specifier .)
    LBRACKET        reduce using rule 126 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 126 (type_specifier -> enum_specifier .)
    RPAREN          reduce using rule 126 (type_specifier -> enum_specifier .)
    SEMICOLON       reduce using rule 126 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 126 (type_specifier -> enum_specifier .)


state 35

    (156) type_qualifier -> CONST .

    TYPEDEF         reduce using rule 156 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 156 (type_qualifier -> CONST .)
    STATIC          reduce using rule 156 (type_qualifier -> CONST .)
    THREAD_LOCAL    reduce using rule 156 (type_qualifier -> CONST .)
    AUTO            reduce using rule 156 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 156 (type_qualifier -> CONST .)
    VOID            reduce using rule 156 (type_qualifier -> CONST .)
    CHAR            reduce using rule 156 (type_qualifier -> CONST .)
    SHORT           reduce using rule 156 (type_qualifier -> CONST .)
    INT             reduce using rule 156 (type_qualifier -> CONST .)
    LONG            reduce using rule 156 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 156 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 156 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 156 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 156 (type_qualifier -> CONST .)
    BOOL            reduce using rule 156 (type_qualifier -> CONST .)
    COMPLEX         reduce using rule 156 (type_qualifier -> CONST .)
    IMAGINARY       reduce using rule 156 (type_qualifier -> CONST .)
    CONST           reduce using rule 156 (type_qualifier -> CONST .)
    RESTRICT        reduce using rule 156 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 156 (type_qualifier -> CONST .)
    ATOMIC          reduce using rule 156 (type_qualifier -> CONST .)
    INLINE          reduce using rule 156 (type_qualifier -> CONST .)
    NORETURN        reduce using rule 156 (type_qualifier -> CONST .)
    ALIGNAS         reduce using rule 156 (type_qualifier -> CONST .)
    ENUM            reduce using rule 156 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 156 (type_qualifier -> CONST .)
    UNION           reduce using rule 156 (type_qualifier -> CONST .)
    TIMES           reduce using rule 156 (type_qualifier -> CONST .)
    IDENTIFIER      reduce using rule 156 (type_qualifier -> CONST .)
    LPAREN          reduce using rule 156 (type_qualifier -> CONST .)
    LBRACKET        reduce using rule 156 (type_qualifier -> CONST .)
    COMMA           reduce using rule 156 (type_qualifier -> CONST .)
    RPAREN          reduce using rule 156 (type_qualifier -> CONST .)
    COLON           reduce using rule 156 (type_qualifier -> CONST .)
    SEMICOLON       reduce using rule 156 (type_qualifier -> CONST .)
    RBRACKET        reduce using rule 156 (type_qualifier -> CONST .)
    INC_OP          reduce using rule 156 (type_qualifier -> CONST .)
    DEC_OP          reduce using rule 156 (type_qualifier -> CONST .)
    SIZEOF          reduce using rule 156 (type_qualifier -> CONST .)
    ALIGNOF         reduce using rule 156 (type_qualifier -> CONST .)
    AND             reduce using rule 156 (type_qualifier -> CONST .)
    PLUS            reduce using rule 156 (type_qualifier -> CONST .)
    MINUS           reduce using rule 156 (type_qualifier -> CONST .)
    TILDE           reduce using rule 156 (type_qualifier -> CONST .)
    NOT             reduce using rule 156 (type_qualifier -> CONST .)
    INTEGER         reduce using rule 156 (type_qualifier -> CONST .)
    F_CONSTANT      reduce using rule 156 (type_qualifier -> CONST .)
    ENUMERATION_CONSTANT reduce using rule 156 (type_qualifier -> CONST .)
    STRING_LITERAL  reduce using rule 156 (type_qualifier -> CONST .)
    FUNC_NAME       reduce using rule 156 (type_qualifier -> CONST .)
    GENERIC         reduce using rule 156 (type_qualifier -> CONST .)


state 36

    (157) type_qualifier -> RESTRICT .

    TYPEDEF         reduce using rule 157 (type_qualifier -> RESTRICT .)
    EXTERN          reduce using rule 157 (type_qualifier -> RESTRICT .)
    STATIC          reduce using rule 157 (type_qualifier -> RESTRICT .)
    THREAD_LOCAL    reduce using rule 157 (type_qualifier -> RESTRICT .)
    AUTO            reduce using rule 157 (type_qualifier -> RESTRICT .)
    REGISTER        reduce using rule 157 (type_qualifier -> RESTRICT .)
    VOID            reduce using rule 157 (type_qualifier -> RESTRICT .)
    CHAR            reduce using rule 157 (type_qualifier -> RESTRICT .)
    SHORT           reduce using rule 157 (type_qualifier -> RESTRICT .)
    INT             reduce using rule 157 (type_qualifier -> RESTRICT .)
    LONG            reduce using rule 157 (type_qualifier -> RESTRICT .)
    FLOAT           reduce using rule 157 (type_qualifier -> RESTRICT .)
    DOUBLE          reduce using rule 157 (type_qualifier -> RESTRICT .)
    SIGNED          reduce using rule 157 (type_qualifier -> RESTRICT .)
    UNSIGNED        reduce using rule 157 (type_qualifier -> RESTRICT .)
    BOOL            reduce using rule 157 (type_qualifier -> RESTRICT .)
    COMPLEX         reduce using rule 157 (type_qualifier -> RESTRICT .)
    IMAGINARY       reduce using rule 157 (type_qualifier -> RESTRICT .)
    CONST           reduce using rule 157 (type_qualifier -> RESTRICT .)
    RESTRICT        reduce using rule 157 (type_qualifier -> RESTRICT .)
    VOLATILE        reduce using rule 157 (type_qualifier -> RESTRICT .)
    ATOMIC          reduce using rule 157 (type_qualifier -> RESTRICT .)
    INLINE          reduce using rule 157 (type_qualifier -> RESTRICT .)
    NORETURN        reduce using rule 157 (type_qualifier -> RESTRICT .)
    ALIGNAS         reduce using rule 157 (type_qualifier -> RESTRICT .)
    ENUM            reduce using rule 157 (type_qualifier -> RESTRICT .)
    STRUCT          reduce using rule 157 (type_qualifier -> RESTRICT .)
    UNION           reduce using rule 157 (type_qualifier -> RESTRICT .)
    TIMES           reduce using rule 157 (type_qualifier -> RESTRICT .)
    IDENTIFIER      reduce using rule 157 (type_qualifier -> RESTRICT .)
    LPAREN          reduce using rule 157 (type_qualifier -> RESTRICT .)
    LBRACKET        reduce using rule 157 (type_qualifier -> RESTRICT .)
    COMMA           reduce using rule 157 (type_qualifier -> RESTRICT .)
    RPAREN          reduce using rule 157 (type_qualifier -> RESTRICT .)
    COLON           reduce using rule 157 (type_qualifier -> RESTRICT .)
    SEMICOLON       reduce using rule 157 (type_qualifier -> RESTRICT .)
    RBRACKET        reduce using rule 157 (type_qualifier -> RESTRICT .)
    INC_OP          reduce using rule 157 (type_qualifier -> RESTRICT .)
    DEC_OP          reduce using rule 157 (type_qualifier -> RESTRICT .)
    SIZEOF          reduce using rule 157 (type_qualifier -> RESTRICT .)
    ALIGNOF         reduce using rule 157 (type_qualifier -> RESTRICT .)
    AND             reduce using rule 157 (type_qualifier -> RESTRICT .)
    PLUS            reduce using rule 157 (type_qualifier -> RESTRICT .)
    MINUS           reduce using rule 157 (type_qualifier -> RESTRICT .)
    TILDE           reduce using rule 157 (type_qualifier -> RESTRICT .)
    NOT             reduce using rule 157 (type_qualifier -> RESTRICT .)
    INTEGER         reduce using rule 157 (type_qualifier -> RESTRICT .)
    F_CONSTANT      reduce using rule 157 (type_qualifier -> RESTRICT .)
    ENUMERATION_CONSTANT reduce using rule 157 (type_qualifier -> RESTRICT .)
    STRING_LITERAL  reduce using rule 157 (type_qualifier -> RESTRICT .)
    FUNC_NAME       reduce using rule 157 (type_qualifier -> RESTRICT .)
    GENERIC         reduce using rule 157 (type_qualifier -> RESTRICT .)


state 37

    (158) type_qualifier -> VOLATILE .

    TYPEDEF         reduce using rule 158 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 158 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 158 (type_qualifier -> VOLATILE .)
    THREAD_LOCAL    reduce using rule 158 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 158 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 158 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 158 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 158 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 158 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 158 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 158 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 158 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 158 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 158 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 158 (type_qualifier -> VOLATILE .)
    BOOL            reduce using rule 158 (type_qualifier -> VOLATILE .)
    COMPLEX         reduce using rule 158 (type_qualifier -> VOLATILE .)
    IMAGINARY       reduce using rule 158 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 158 (type_qualifier -> VOLATILE .)
    RESTRICT        reduce using rule 158 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 158 (type_qualifier -> VOLATILE .)
    ATOMIC          reduce using rule 158 (type_qualifier -> VOLATILE .)
    INLINE          reduce using rule 158 (type_qualifier -> VOLATILE .)
    NORETURN        reduce using rule 158 (type_qualifier -> VOLATILE .)
    ALIGNAS         reduce using rule 158 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 158 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 158 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 158 (type_qualifier -> VOLATILE .)
    TIMES           reduce using rule 158 (type_qualifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 158 (type_qualifier -> VOLATILE .)
    LPAREN          reduce using rule 158 (type_qualifier -> VOLATILE .)
    LBRACKET        reduce using rule 158 (type_qualifier -> VOLATILE .)
    COMMA           reduce using rule 158 (type_qualifier -> VOLATILE .)
    RPAREN          reduce using rule 158 (type_qualifier -> VOLATILE .)
    COLON           reduce using rule 158 (type_qualifier -> VOLATILE .)
    SEMICOLON       reduce using rule 158 (type_qualifier -> VOLATILE .)
    RBRACKET        reduce using rule 158 (type_qualifier -> VOLATILE .)
    INC_OP          reduce using rule 158 (type_qualifier -> VOLATILE .)
    DEC_OP          reduce using rule 158 (type_qualifier -> VOLATILE .)
    SIZEOF          reduce using rule 158 (type_qualifier -> VOLATILE .)
    ALIGNOF         reduce using rule 158 (type_qualifier -> VOLATILE .)
    AND             reduce using rule 158 (type_qualifier -> VOLATILE .)
    PLUS            reduce using rule 158 (type_qualifier -> VOLATILE .)
    MINUS           reduce using rule 158 (type_qualifier -> VOLATILE .)
    TILDE           reduce using rule 158 (type_qualifier -> VOLATILE .)
    NOT             reduce using rule 158 (type_qualifier -> VOLATILE .)
    INTEGER         reduce using rule 158 (type_qualifier -> VOLATILE .)
    F_CONSTANT      reduce using rule 158 (type_qualifier -> VOLATILE .)
    ENUMERATION_CONSTANT reduce using rule 158 (type_qualifier -> VOLATILE .)
    STRING_LITERAL  reduce using rule 158 (type_qualifier -> VOLATILE .)
    FUNC_NAME       reduce using rule 158 (type_qualifier -> VOLATILE .)
    GENERIC         reduce using rule 158 (type_qualifier -> VOLATILE .)


state 38

    (159) type_qualifier -> ATOMIC .
    (155) atomic_type_specifier -> ATOMIC . LPAREN type_name RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    TYPEDEF         reduce using rule 159 (type_qualifier -> ATOMIC .)
    EXTERN          reduce using rule 159 (type_qualifier -> ATOMIC .)
    STATIC          reduce using rule 159 (type_qualifier -> ATOMIC .)
    THREAD_LOCAL    reduce using rule 159 (type_qualifier -> ATOMIC .)
    AUTO            reduce using rule 159 (type_qualifier -> ATOMIC .)
    REGISTER        reduce using rule 159 (type_qualifier -> ATOMIC .)
    VOID            reduce using rule 159 (type_qualifier -> ATOMIC .)
    CHAR            reduce using rule 159 (type_qualifier -> ATOMIC .)
    SHORT           reduce using rule 159 (type_qualifier -> ATOMIC .)
    INT             reduce using rule 159 (type_qualifier -> ATOMIC .)
    LONG            reduce using rule 159 (type_qualifier -> ATOMIC .)
    FLOAT           reduce using rule 159 (type_qualifier -> ATOMIC .)
    DOUBLE          reduce using rule 159 (type_qualifier -> ATOMIC .)
    SIGNED          reduce using rule 159 (type_qualifier -> ATOMIC .)
    UNSIGNED        reduce using rule 159 (type_qualifier -> ATOMIC .)
    BOOL            reduce using rule 159 (type_qualifier -> ATOMIC .)
    COMPLEX         reduce using rule 159 (type_qualifier -> ATOMIC .)
    IMAGINARY       reduce using rule 159 (type_qualifier -> ATOMIC .)
    CONST           reduce using rule 159 (type_qualifier -> ATOMIC .)
    RESTRICT        reduce using rule 159 (type_qualifier -> ATOMIC .)
    VOLATILE        reduce using rule 159 (type_qualifier -> ATOMIC .)
    ATOMIC          reduce using rule 159 (type_qualifier -> ATOMIC .)
    INLINE          reduce using rule 159 (type_qualifier -> ATOMIC .)
    NORETURN        reduce using rule 159 (type_qualifier -> ATOMIC .)
    ALIGNAS         reduce using rule 159 (type_qualifier -> ATOMIC .)
    ENUM            reduce using rule 159 (type_qualifier -> ATOMIC .)
    STRUCT          reduce using rule 159 (type_qualifier -> ATOMIC .)
    UNION           reduce using rule 159 (type_qualifier -> ATOMIC .)
    TIMES           reduce using rule 159 (type_qualifier -> ATOMIC .)
    IDENTIFIER      reduce using rule 159 (type_qualifier -> ATOMIC .)
    LBRACKET        reduce using rule 159 (type_qualifier -> ATOMIC .)
    COMMA           reduce using rule 159 (type_qualifier -> ATOMIC .)
    RPAREN          reduce using rule 159 (type_qualifier -> ATOMIC .)
    SEMICOLON       reduce using rule 159 (type_qualifier -> ATOMIC .)
    COLON           reduce using rule 159 (type_qualifier -> ATOMIC .)
    LPAREN          shift and go to state 61

  ! LPAREN          [ reduce using rule 159 (type_qualifier -> ATOMIC .) ]


state 39

    (160) function_specifier -> INLINE .

    TYPEDEF         reduce using rule 160 (function_specifier -> INLINE .)
    EXTERN          reduce using rule 160 (function_specifier -> INLINE .)
    STATIC          reduce using rule 160 (function_specifier -> INLINE .)
    THREAD_LOCAL    reduce using rule 160 (function_specifier -> INLINE .)
    AUTO            reduce using rule 160 (function_specifier -> INLINE .)
    REGISTER        reduce using rule 160 (function_specifier -> INLINE .)
    VOID            reduce using rule 160 (function_specifier -> INLINE .)
    CHAR            reduce using rule 160 (function_specifier -> INLINE .)
    SHORT           reduce using rule 160 (function_specifier -> INLINE .)
    INT             reduce using rule 160 (function_specifier -> INLINE .)
    LONG            reduce using rule 160 (function_specifier -> INLINE .)
    FLOAT           reduce using rule 160 (function_specifier -> INLINE .)
    DOUBLE          reduce using rule 160 (function_specifier -> INLINE .)
    SIGNED          reduce using rule 160 (function_specifier -> INLINE .)
    UNSIGNED        reduce using rule 160 (function_specifier -> INLINE .)
    BOOL            reduce using rule 160 (function_specifier -> INLINE .)
    COMPLEX         reduce using rule 160 (function_specifier -> INLINE .)
    IMAGINARY       reduce using rule 160 (function_specifier -> INLINE .)
    CONST           reduce using rule 160 (function_specifier -> INLINE .)
    RESTRICT        reduce using rule 160 (function_specifier -> INLINE .)
    VOLATILE        reduce using rule 160 (function_specifier -> INLINE .)
    ATOMIC          reduce using rule 160 (function_specifier -> INLINE .)
    INLINE          reduce using rule 160 (function_specifier -> INLINE .)
    NORETURN        reduce using rule 160 (function_specifier -> INLINE .)
    ALIGNAS         reduce using rule 160 (function_specifier -> INLINE .)
    ENUM            reduce using rule 160 (function_specifier -> INLINE .)
    STRUCT          reduce using rule 160 (function_specifier -> INLINE .)
    UNION           reduce using rule 160 (function_specifier -> INLINE .)
    TIMES           reduce using rule 160 (function_specifier -> INLINE .)
    IDENTIFIER      reduce using rule 160 (function_specifier -> INLINE .)
    LPAREN          reduce using rule 160 (function_specifier -> INLINE .)
    LBRACKET        reduce using rule 160 (function_specifier -> INLINE .)
    COMMA           reduce using rule 160 (function_specifier -> INLINE .)
    RPAREN          reduce using rule 160 (function_specifier -> INLINE .)


state 40

    (161) function_specifier -> NORETURN .

    TYPEDEF         reduce using rule 161 (function_specifier -> NORETURN .)
    EXTERN          reduce using rule 161 (function_specifier -> NORETURN .)
    STATIC          reduce using rule 161 (function_specifier -> NORETURN .)
    THREAD_LOCAL    reduce using rule 161 (function_specifier -> NORETURN .)
    AUTO            reduce using rule 161 (function_specifier -> NORETURN .)
    REGISTER        reduce using rule 161 (function_specifier -> NORETURN .)
    VOID            reduce using rule 161 (function_specifier -> NORETURN .)
    CHAR            reduce using rule 161 (function_specifier -> NORETURN .)
    SHORT           reduce using rule 161 (function_specifier -> NORETURN .)
    INT             reduce using rule 161 (function_specifier -> NORETURN .)
    LONG            reduce using rule 161 (function_specifier -> NORETURN .)
    FLOAT           reduce using rule 161 (function_specifier -> NORETURN .)
    DOUBLE          reduce using rule 161 (function_specifier -> NORETURN .)
    SIGNED          reduce using rule 161 (function_specifier -> NORETURN .)
    UNSIGNED        reduce using rule 161 (function_specifier -> NORETURN .)
    BOOL            reduce using rule 161 (function_specifier -> NORETURN .)
    COMPLEX         reduce using rule 161 (function_specifier -> NORETURN .)
    IMAGINARY       reduce using rule 161 (function_specifier -> NORETURN .)
    CONST           reduce using rule 161 (function_specifier -> NORETURN .)
    RESTRICT        reduce using rule 161 (function_specifier -> NORETURN .)
    VOLATILE        reduce using rule 161 (function_specifier -> NORETURN .)
    ATOMIC          reduce using rule 161 (function_specifier -> NORETURN .)
    INLINE          reduce using rule 161 (function_specifier -> NORETURN .)
    NORETURN        reduce using rule 161 (function_specifier -> NORETURN .)
    ALIGNAS         reduce using rule 161 (function_specifier -> NORETURN .)
    ENUM            reduce using rule 161 (function_specifier -> NORETURN .)
    STRUCT          reduce using rule 161 (function_specifier -> NORETURN .)
    UNION           reduce using rule 161 (function_specifier -> NORETURN .)
    TIMES           reduce using rule 161 (function_specifier -> NORETURN .)
    IDENTIFIER      reduce using rule 161 (function_specifier -> NORETURN .)
    LPAREN          reduce using rule 161 (function_specifier -> NORETURN .)
    LBRACKET        reduce using rule 161 (function_specifier -> NORETURN .)
    COMMA           reduce using rule 161 (function_specifier -> NORETURN .)
    RPAREN          reduce using rule 161 (function_specifier -> NORETURN .)


state 41

    (162) alignment_specifier -> ALIGNAS . LPAREN type_name RPAREN
    (163) alignment_specifier -> ALIGNAS . LPAREN constant_expression RPAREN

    LPAREN          shift and go to state 62


state 42

    (127) struct_or_union_specifier -> struct_or_union . LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> struct_or_union . IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> struct_or_union . IDENTIFIER

    LBRACE          shift and go to state 63
    IDENTIFIER      shift and go to state 64


state 43

    (146) enum_specifier -> ENUM . LBRACE enumerator_list RBRACE
    (147) enum_specifier -> ENUM . LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> ENUM . IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> ENUM . IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> ENUM . IDENTIFIER

    LBRACE          shift and go to state 65
    IDENTIFIER      shift and go to state 66


state 44

    (130) struct_or_union -> STRUCT .

    LBRACE          reduce using rule 130 (struct_or_union -> STRUCT .)
    IDENTIFIER      reduce using rule 130 (struct_or_union -> STRUCT .)


state 45

    (131) struct_or_union -> UNION .

    LBRACE          reduce using rule 131 (struct_or_union -> UNION .)
    IDENTIFIER      reduce using rule 131 (struct_or_union -> UNION .)


state 46

    (266) translation_unit -> translation_unit external_declaration .

    SEMICOLON       reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    STATIC_ASSERT   reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    TYPEDEF         reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    THREAD_LOCAL    reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    BOOL            reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    COMPLEX         reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    IMAGINARY       reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    RESTRICT        reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    ATOMIC          reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    INLINE          reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    NORETURN        reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    ALIGNAS         reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    UNION           reduce using rule 266 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 266 (translation_unit -> translation_unit external_declaration .)


state 47

    (270) function_definition -> declaration_specifiers declarator . declaration_list compound_statement
    (271) function_definition -> declaration_specifiers declarator . compound_statement
    (104) init_declarator -> declarator . EQUALS initializer
    (105) init_declarator -> declarator .
    (272) declaration_list -> . declaration
    (273) declaration_list -> . declaration_list declaration
    (243) compound_statement -> . LBRACE RBRACE
    (244) compound_statement -> . LBRACE block_item_list RBRACE
    (90) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (91) declaration -> . static_assert_declaration
    (92) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (93) declaration_specifiers -> . storage_class_specifier
    (94) declaration_specifiers -> . type_specifier declaration_specifiers
    (95) declaration_specifiers -> . type_specifier
    (96) declaration_specifiers -> . type_qualifier declaration_specifiers
    (97) declaration_specifiers -> . type_qualifier
    (98) declaration_specifiers -> . function_specifier declaration_specifiers
    (99) declaration_specifiers -> . function_specifier
    (100) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (101) declaration_specifiers -> . alignment_specifier
    (233) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON
    (106) storage_class_specifier -> . TYPEDEF
    (107) storage_class_specifier -> . EXTERN
    (108) storage_class_specifier -> . STATIC
    (109) storage_class_specifier -> . THREAD_LOCAL
    (110) storage_class_specifier -> . AUTO
    (111) storage_class_specifier -> . REGISTER
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (160) function_specifier -> . INLINE
    (161) function_specifier -> . NORETURN
    (162) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (163) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    EQUALS          shift and go to state 70
    SEMICOLON       reduce using rule 105 (init_declarator -> declarator .)
    COMMA           reduce using rule 105 (init_declarator -> declarator .)
    LBRACE          shift and go to state 72
    STATIC_ASSERT   shift and go to state 13
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    INLINE          shift and go to state 39
    NORETURN        shift and go to state 40
    ALIGNAS         shift and go to state 41
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    declaration_specifiers         shift and go to state 67
    declaration_list               shift and go to state 68
    compound_statement             shift and go to state 69
    declaration                    shift and go to state 71
    static_assert_declaration      shift and go to state 7
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 42

state 48

    (90) declaration -> declaration_specifiers init_declarator_list . SEMICOLON
    (103) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMICOLON       shift and go to state 73
    COMMA           shift and go to state 74


state 49

    (164) declarator -> pointer . direct_declarator
    (166) direct_declarator -> . IDENTIFIER
    (167) direct_declarator -> . LPAREN declarator RPAREN
    (168) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (169) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (170) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (171) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (172) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (173) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (174) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (175) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (176) direct_declarator -> . direct_declarator LBRACKET assignment_expression RBRACKET
    (177) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (178) direct_declarator -> . direct_declarator LPAREN RPAREN
    (179) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN

    IDENTIFIER      shift and go to state 53
    LPAREN          shift and go to state 54

    direct_declarator              shift and go to state 75

state 50

    (165) declarator -> direct_declarator .
    (168) direct_declarator -> direct_declarator . LBRACKET RBRACKET
    (169) direct_declarator -> direct_declarator . LBRACKET TIMES RBRACKET
    (170) direct_declarator -> direct_declarator . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (171) direct_declarator -> direct_declarator . LBRACKET STATIC assignment_expression RBRACKET
    (172) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list TIMES RBRACKET
    (173) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (174) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (175) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list RBRACKET
    (176) direct_declarator -> direct_declarator . LBRACKET assignment_expression RBRACKET
    (177) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (178) direct_declarator -> direct_declarator . LPAREN RPAREN
    (179) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN

    EQUALS          reduce using rule 165 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 165 (declarator -> direct_declarator .)
    STATIC_ASSERT   reduce using rule 165 (declarator -> direct_declarator .)
    TYPEDEF         reduce using rule 165 (declarator -> direct_declarator .)
    EXTERN          reduce using rule 165 (declarator -> direct_declarator .)
    STATIC          reduce using rule 165 (declarator -> direct_declarator .)
    THREAD_LOCAL    reduce using rule 165 (declarator -> direct_declarator .)
    AUTO            reduce using rule 165 (declarator -> direct_declarator .)
    REGISTER        reduce using rule 165 (declarator -> direct_declarator .)
    VOID            reduce using rule 165 (declarator -> direct_declarator .)
    CHAR            reduce using rule 165 (declarator -> direct_declarator .)
    SHORT           reduce using rule 165 (declarator -> direct_declarator .)
    INT             reduce using rule 165 (declarator -> direct_declarator .)
    LONG            reduce using rule 165 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 165 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 165 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 165 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 165 (declarator -> direct_declarator .)
    BOOL            reduce using rule 165 (declarator -> direct_declarator .)
    COMPLEX         reduce using rule 165 (declarator -> direct_declarator .)
    IMAGINARY       reduce using rule 165 (declarator -> direct_declarator .)
    CONST           reduce using rule 165 (declarator -> direct_declarator .)
    RESTRICT        reduce using rule 165 (declarator -> direct_declarator .)
    VOLATILE        reduce using rule 165 (declarator -> direct_declarator .)
    ATOMIC          reduce using rule 165 (declarator -> direct_declarator .)
    INLINE          reduce using rule 165 (declarator -> direct_declarator .)
    NORETURN        reduce using rule 165 (declarator -> direct_declarator .)
    ALIGNAS         reduce using rule 165 (declarator -> direct_declarator .)
    ENUM            reduce using rule 165 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 165 (declarator -> direct_declarator .)
    UNION           reduce using rule 165 (declarator -> direct_declarator .)
    SEMICOLON       reduce using rule 165 (declarator -> direct_declarator .)
    COMMA           reduce using rule 165 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 165 (declarator -> direct_declarator .)
    COLON           reduce using rule 165 (declarator -> direct_declarator .)
    LBRACKET        shift and go to state 76
    LPAREN          shift and go to state 77


state 51

    (102) init_declarator_list -> init_declarator .

    SEMICOLON       reduce using rule 102 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 102 (init_declarator_list -> init_declarator .)


state 52

    (180) pointer -> TIMES . type_qualifier_list pointer
    (181) pointer -> TIMES . type_qualifier_list
    (182) pointer -> TIMES . pointer
    (183) pointer -> TIMES .
    (184) type_qualifier_list -> . type_qualifier
    (185) type_qualifier_list -> . type_qualifier_list type_qualifier
    (180) pointer -> . TIMES type_qualifier_list pointer
    (181) pointer -> . TIMES type_qualifier_list
    (182) pointer -> . TIMES pointer
    (183) pointer -> . TIMES
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC

    IDENTIFIER      reduce using rule 183 (pointer -> TIMES .)
    LPAREN          reduce using rule 183 (pointer -> TIMES .)
    LBRACKET        reduce using rule 183 (pointer -> TIMES .)
    RPAREN          reduce using rule 183 (pointer -> TIMES .)
    COLON           reduce using rule 183 (pointer -> TIMES .)
    COMMA           reduce using rule 183 (pointer -> TIMES .)
    TIMES           shift and go to state 52
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 81

    type_qualifier_list            shift and go to state 78
    pointer                        shift and go to state 79
    type_qualifier                 shift and go to state 80

state 53

    (166) direct_declarator -> IDENTIFIER .

    LBRACKET        reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    LPAREN          reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    EQUALS          reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    LBRACE          reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    STATIC_ASSERT   reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    TYPEDEF         reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    EXTERN          reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    STATIC          reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    THREAD_LOCAL    reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    AUTO            reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    REGISTER        reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    VOID            reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    CHAR            reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    SHORT           reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    INT             reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    LONG            reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    FLOAT           reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    DOUBLE          reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    SIGNED          reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    UNSIGNED        reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    BOOL            reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    COMPLEX         reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    IMAGINARY       reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    CONST           reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    RESTRICT        reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    VOLATILE        reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    ATOMIC          reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    INLINE          reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    NORETURN        reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    ALIGNAS         reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    ENUM            reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    STRUCT          reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    UNION           reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    SEMICOLON       reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    COMMA           reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    RPAREN          reduce using rule 166 (direct_declarator -> IDENTIFIER .)
    COLON           reduce using rule 166 (direct_declarator -> IDENTIFIER .)


state 54

    (167) direct_declarator -> LPAREN . declarator RPAREN
    (164) declarator -> . pointer direct_declarator
    (165) declarator -> . direct_declarator
    (180) pointer -> . TIMES type_qualifier_list pointer
    (181) pointer -> . TIMES type_qualifier_list
    (182) pointer -> . TIMES pointer
    (183) pointer -> . TIMES
    (166) direct_declarator -> . IDENTIFIER
    (167) direct_declarator -> . LPAREN declarator RPAREN
    (168) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (169) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (170) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (171) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (172) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (173) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (174) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (175) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (176) direct_declarator -> . direct_declarator LBRACKET assignment_expression RBRACKET
    (177) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (178) direct_declarator -> . direct_declarator LPAREN RPAREN
    (179) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN

    TIMES           shift and go to state 52
    IDENTIFIER      shift and go to state 53
    LPAREN          shift and go to state 54

    declarator                     shift and go to state 82
    pointer                        shift and go to state 49
    direct_declarator              shift and go to state 50

state 55

    (92) declaration_specifiers -> storage_class_specifier declaration_specifiers .

    TIMES           reduce using rule 92 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 92 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LPAREN          reduce using rule 92 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LBRACKET        reduce using rule 92 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    COMMA           reduce using rule 92 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    RPAREN          reduce using rule 92 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)


state 56

    (94) declaration_specifiers -> type_specifier declaration_specifiers .

    TIMES           reduce using rule 94 (declaration_specifiers -> type_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 94 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LPAREN          reduce using rule 94 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LBRACKET        reduce using rule 94 (declaration_specifiers -> type_specifier declaration_specifiers .)
    COMMA           reduce using rule 94 (declaration_specifiers -> type_specifier declaration_specifiers .)
    RPAREN          reduce using rule 94 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 57

    (96) declaration_specifiers -> type_qualifier declaration_specifiers .

    TIMES           reduce using rule 96 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 96 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LPAREN          reduce using rule 96 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LBRACKET        reduce using rule 96 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    COMMA           reduce using rule 96 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    RPAREN          reduce using rule 96 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 58

    (98) declaration_specifiers -> function_specifier declaration_specifiers .

    TIMES           reduce using rule 98 (declaration_specifiers -> function_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 98 (declaration_specifiers -> function_specifier declaration_specifiers .)
    LPAREN          reduce using rule 98 (declaration_specifiers -> function_specifier declaration_specifiers .)
    LBRACKET        reduce using rule 98 (declaration_specifiers -> function_specifier declaration_specifiers .)
    COMMA           reduce using rule 98 (declaration_specifiers -> function_specifier declaration_specifiers .)
    RPAREN          reduce using rule 98 (declaration_specifiers -> function_specifier declaration_specifiers .)


state 59

    (100) declaration_specifiers -> alignment_specifier declaration_specifiers .

    TIMES           reduce using rule 100 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 100 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    LPAREN          reduce using rule 100 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    LBRACKET        reduce using rule 100 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    COMMA           reduce using rule 100 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    RPAREN          reduce using rule 100 (declaration_specifiers -> alignment_specifier declaration_specifiers .)


state 60

    (233) static_assert_declaration -> STATIC_ASSERT LPAREN . constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON
    (89) constant_expression -> . conditional_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    constant_expression            shift and go to state 84
    conditional_expression         shift and go to state 86
    logical_or_expression          shift and go to state 87
    logical_and_expression         shift and go to state 88
    inclusive_or_expression        shift and go to state 89
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 61

    (155) atomic_type_specifier -> ATOMIC LPAREN . type_name RPAREN
    (195) type_name -> . specifier_qualifier_list abstract_declarator
    (196) type_name -> . specifier_qualifier_list
    (137) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (138) specifier_qualifier_list -> . type_specifier
    (139) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (140) specifier_qualifier_list -> . type_qualifier
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    type_name                      shift and go to state 121
    specifier_qualifier_list       shift and go to state 122
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 42

state 62

    (162) alignment_specifier -> ALIGNAS LPAREN . type_name RPAREN
    (163) alignment_specifier -> ALIGNAS LPAREN . constant_expression RPAREN
    (195) type_name -> . specifier_qualifier_list abstract_declarator
    (196) type_name -> . specifier_qualifier_list
    (89) constant_expression -> . conditional_expression
    (137) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (138) specifier_qualifier_list -> . type_specifier
    (139) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (140) specifier_qualifier_list -> . type_qualifier
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45
    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    type_name                      shift and go to state 125
    constant_expression            shift and go to state 126
    specifier_qualifier_list       shift and go to state 122
    conditional_expression         shift and go to state 86
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    logical_or_expression          shift and go to state 87
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    logical_and_expression         shift and go to state 88
    struct_or_union                shift and go to state 42
    inclusive_or_expression        shift and go to state 89
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 63

    (127) struct_or_union_specifier -> struct_or_union LBRACE . struct_declaration_list RBRACE
    (132) struct_declaration_list -> . struct_declaration
    (133) struct_declaration_list -> . struct_declaration_list struct_declaration
    (134) struct_declaration -> . specifier_qualifier_list SEMICOLON
    (135) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (136) struct_declaration -> . static_assert_declaration
    (137) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (138) specifier_qualifier_list -> . type_specifier
    (139) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (140) specifier_qualifier_list -> . type_qualifier
    (233) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    STATIC_ASSERT   shift and go to state 13
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    struct_or_union                shift and go to state 42
    struct_declaration_list        shift and go to state 127
    struct_declaration             shift and go to state 128
    specifier_qualifier_list       shift and go to state 129
    static_assert_declaration      shift and go to state 130
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34

state 64

    (128) struct_or_union_specifier -> struct_or_union IDENTIFIER . LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> struct_or_union IDENTIFIER .

    LBRACE          shift and go to state 131
    TYPEDEF         reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    EXTERN          reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STATIC          reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    THREAD_LOCAL    reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    AUTO            reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    REGISTER        reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOID            reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CHAR            reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SHORT           reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INT             reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LONG            reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    FLOAT           reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    DOUBLE          reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SIGNED          reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNSIGNED        reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    BOOL            reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COMPLEX         reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    IMAGINARY       reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CONST           reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    RESTRICT        reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOLATILE        reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ATOMIC          reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INLINE          reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    NORETURN        reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ALIGNAS         reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ENUM            reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STRUCT          reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNION           reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    TIMES           reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    IDENTIFIER      reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LPAREN          reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LBRACKET        reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COMMA           reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    RPAREN          reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SEMICOLON       reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COLON           reduce using rule 129 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)


state 65

    (146) enum_specifier -> ENUM LBRACE . enumerator_list RBRACE
    (147) enum_specifier -> ENUM LBRACE . enumerator_list COMMA RBRACE
    (151) enumerator_list -> . enumerator
    (152) enumerator_list -> . enumerator_list COMMA enumerator
    (153) enumerator -> . enumeration_constant EQUALS constant_expression
    (154) enumerator -> . enumeration_constant
    (9) enumeration_constant -> . IDENTIFIER

    IDENTIFIER      shift and go to state 135

    enumerator_list                shift and go to state 132
    enumerator                     shift and go to state 133
    enumeration_constant           shift and go to state 134

state 66

    (148) enum_specifier -> ENUM IDENTIFIER . LBRACE enumerator_list RBRACE
    (149) enum_specifier -> ENUM IDENTIFIER . LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> ENUM IDENTIFIER .

    LBRACE          shift and go to state 136
    TYPEDEF         reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    EXTERN          reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    STATIC          reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    THREAD_LOCAL    reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    AUTO            reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    REGISTER        reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    VOID            reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    CHAR            reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    SHORT           reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    INT             reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    LONG            reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    FLOAT           reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    DOUBLE          reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    SIGNED          reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    UNSIGNED        reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    BOOL            reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    COMPLEX         reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    IMAGINARY       reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    CONST           reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    RESTRICT        reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    VOLATILE        reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    ATOMIC          reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    INLINE          reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    NORETURN        reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    ALIGNAS         reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    ENUM            reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    STRUCT          reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    UNION           reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    TIMES           reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    IDENTIFIER      reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    LPAREN          reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    LBRACKET        reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    COMMA           reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    RPAREN          reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    SEMICOLON       reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)
    COLON           reduce using rule 150 (enum_specifier -> ENUM IDENTIFIER .)


state 67

    (90) declaration -> declaration_specifiers . init_declarator_list SEMICOLON
    (102) init_declarator_list -> . init_declarator
    (103) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (104) init_declarator -> . declarator EQUALS initializer
    (105) init_declarator -> . declarator
    (164) declarator -> . pointer direct_declarator
    (165) declarator -> . direct_declarator
    (180) pointer -> . TIMES type_qualifier_list pointer
    (181) pointer -> . TIMES type_qualifier_list
    (182) pointer -> . TIMES pointer
    (183) pointer -> . TIMES
    (166) direct_declarator -> . IDENTIFIER
    (167) direct_declarator -> . LPAREN declarator RPAREN
    (168) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (169) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (170) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (171) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (172) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (173) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (174) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (175) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (176) direct_declarator -> . direct_declarator LBRACKET assignment_expression RBRACKET
    (177) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (178) direct_declarator -> . direct_declarator LPAREN RPAREN
    (179) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN

    TIMES           shift and go to state 52
    IDENTIFIER      shift and go to state 53
    LPAREN          shift and go to state 54

    init_declarator_list           shift and go to state 48
    init_declarator                shift and go to state 51
    declarator                     shift and go to state 137
    pointer                        shift and go to state 49
    direct_declarator              shift and go to state 50

state 68

    (270) function_definition -> declaration_specifiers declarator declaration_list . compound_statement
    (273) declaration_list -> declaration_list . declaration
    (243) compound_statement -> . LBRACE RBRACE
    (244) compound_statement -> . LBRACE block_item_list RBRACE
    (90) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (91) declaration -> . static_assert_declaration
    (92) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (93) declaration_specifiers -> . storage_class_specifier
    (94) declaration_specifiers -> . type_specifier declaration_specifiers
    (95) declaration_specifiers -> . type_specifier
    (96) declaration_specifiers -> . type_qualifier declaration_specifiers
    (97) declaration_specifiers -> . type_qualifier
    (98) declaration_specifiers -> . function_specifier declaration_specifiers
    (99) declaration_specifiers -> . function_specifier
    (100) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (101) declaration_specifiers -> . alignment_specifier
    (233) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON
    (106) storage_class_specifier -> . TYPEDEF
    (107) storage_class_specifier -> . EXTERN
    (108) storage_class_specifier -> . STATIC
    (109) storage_class_specifier -> . THREAD_LOCAL
    (110) storage_class_specifier -> . AUTO
    (111) storage_class_specifier -> . REGISTER
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (160) function_specifier -> . INLINE
    (161) function_specifier -> . NORETURN
    (162) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (163) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    LBRACE          shift and go to state 72
    STATIC_ASSERT   shift and go to state 13
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    INLINE          shift and go to state 39
    NORETURN        shift and go to state 40
    ALIGNAS         shift and go to state 41
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    declaration_specifiers         shift and go to state 67
    compound_statement             shift and go to state 138
    declaration                    shift and go to state 139
    static_assert_declaration      shift and go to state 7
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 42

state 69

    (271) function_definition -> declaration_specifiers declarator compound_statement .

    SEMICOLON       reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    STATIC_ASSERT   reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    TYPEDEF         reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    EXTERN          reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    STATIC          reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    THREAD_LOCAL    reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    AUTO            reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    REGISTER        reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOID            reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    CHAR            reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    SHORT           reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    LONG            reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    FLOAT           reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    DOUBLE          reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    SIGNED          reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNSIGNED        reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    BOOL            reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    COMPLEX         reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    IMAGINARY       reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    CONST           reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    RESTRICT        reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOLATILE        reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    ATOMIC          reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    INLINE          reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    NORETURN        reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    ALIGNAS         reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    ENUM            reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    STRUCT          reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNION           reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 271 (function_definition -> declaration_specifiers declarator compound_statement .)


state 70

    (104) init_declarator -> declarator EQUALS . initializer
    (221) initializer -> . LBRACE initializer_list RBRACE
    (222) initializer -> . LBRACE initializer_list COMMA RBRACE
    (223) initializer -> . assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 141
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    initializer                    shift and go to state 140
    assignment_expression          shift and go to state 142
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 71

    (272) declaration_list -> declaration .

    LBRACE          reduce using rule 272 (declaration_list -> declaration .)
    STATIC_ASSERT   reduce using rule 272 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 272 (declaration_list -> declaration .)
    EXTERN          reduce using rule 272 (declaration_list -> declaration .)
    STATIC          reduce using rule 272 (declaration_list -> declaration .)
    THREAD_LOCAL    reduce using rule 272 (declaration_list -> declaration .)
    AUTO            reduce using rule 272 (declaration_list -> declaration .)
    REGISTER        reduce using rule 272 (declaration_list -> declaration .)
    VOID            reduce using rule 272 (declaration_list -> declaration .)
    CHAR            reduce using rule 272 (declaration_list -> declaration .)
    SHORT           reduce using rule 272 (declaration_list -> declaration .)
    INT             reduce using rule 272 (declaration_list -> declaration .)
    LONG            reduce using rule 272 (declaration_list -> declaration .)
    FLOAT           reduce using rule 272 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 272 (declaration_list -> declaration .)
    SIGNED          reduce using rule 272 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 272 (declaration_list -> declaration .)
    BOOL            reduce using rule 272 (declaration_list -> declaration .)
    COMPLEX         reduce using rule 272 (declaration_list -> declaration .)
    IMAGINARY       reduce using rule 272 (declaration_list -> declaration .)
    CONST           reduce using rule 272 (declaration_list -> declaration .)
    RESTRICT        reduce using rule 272 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 272 (declaration_list -> declaration .)
    ATOMIC          reduce using rule 272 (declaration_list -> declaration .)
    INLINE          reduce using rule 272 (declaration_list -> declaration .)
    NORETURN        reduce using rule 272 (declaration_list -> declaration .)
    ALIGNAS         reduce using rule 272 (declaration_list -> declaration .)
    ENUM            reduce using rule 272 (declaration_list -> declaration .)
    STRUCT          reduce using rule 272 (declaration_list -> declaration .)
    UNION           reduce using rule 272 (declaration_list -> declaration .)


state 72

    (243) compound_statement -> LBRACE . RBRACE
    (244) compound_statement -> LBRACE . block_item_list RBRACE
    (245) block_item_list -> . block_item
    (246) block_item_list -> . block_item_list block_item
    (247) block_item -> . declaration
    (248) block_item -> . statement
    (90) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (91) declaration -> . static_assert_declaration
    (234) statement -> . labeled_statement
    (235) statement -> . compound_statement
    (236) statement -> . expression_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (92) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (93) declaration_specifiers -> . storage_class_specifier
    (94) declaration_specifiers -> . type_specifier declaration_specifiers
    (95) declaration_specifiers -> . type_specifier
    (96) declaration_specifiers -> . type_qualifier declaration_specifiers
    (97) declaration_specifiers -> . type_qualifier
    (98) declaration_specifiers -> . function_specifier declaration_specifiers
    (99) declaration_specifiers -> . function_specifier
    (100) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (101) declaration_specifiers -> . alignment_specifier
    (233) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON
    (240) labeled_statement -> . IDENTIFIER COLON statement
    (241) labeled_statement -> . CASE constant_expression COLON statement
    (242) labeled_statement -> . DEFAULT COLON statement
    (243) compound_statement -> . LBRACE RBRACE
    (244) compound_statement -> . LBRACE block_item_list RBRACE
    (249) expression_statement -> . expression SEMICOLON
    (250) expression_statement -> . SEMICOLON
    (251) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (252) selection_statement -> . IF LPAREN expression RPAREN statement
    (253) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (260) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (261) jump_statement -> . CONTINUE SEMICOLON
    (262) jump_statement -> . BREAK SEMICOLON
    (263) jump_statement -> . RETURN SEMICOLON
    (264) jump_statement -> . RETURN expression SEMICOLON
    (106) storage_class_specifier -> . TYPEDEF
    (107) storage_class_specifier -> . EXTERN
    (108) storage_class_specifier -> . STATIC
    (109) storage_class_specifier -> . THREAD_LOCAL
    (110) storage_class_specifier -> . AUTO
    (111) storage_class_specifier -> . REGISTER
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (160) function_specifier -> . INLINE
    (161) function_specifier -> . NORETURN
    (162) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (163) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 146
    STATIC_ASSERT   shift and go to state 13
    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LBRACE          shift and go to state 72
    SEMICOLON       shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    INLINE          shift and go to state 39
    NORETURN        shift and go to state 40
    ALIGNAS         shift and go to state 41
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    block_item_list                shift and go to state 147
    block_item                     shift and go to state 148
    declaration                    shift and go to state 149
    statement                      shift and go to state 150
    declaration_specifiers         shift and go to state 67
    static_assert_declaration      shift and go to state 7
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    expression_statement           shift and go to state 154
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    expression                     shift and go to state 161
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    assignment_expression          shift and go to state 171
    struct_or_union                shift and go to state 42
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 73

    (90) declaration -> declaration_specifiers init_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    STATIC_ASSERT   reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    EXTERN          reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    STATIC          reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    THREAD_LOCAL    reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    AUTO            reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    REGISTER        reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    VOID            reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CHAR            reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SHORT           reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    INT             reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    LONG            reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    BOOL            reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    COMPLEX         reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    IMAGINARY       reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CONST           reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    RESTRICT        reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    ATOMIC          reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    INLINE          reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    NORETURN        reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    ALIGNAS         reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    ENUM            reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    UNION           reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    $end            reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    LBRACE          reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    RBRACE          reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CASE            reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DEFAULT         reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    IF              reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SWITCH          reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    WHILE           reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DO              reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    FOR             reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    GOTO            reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CONTINUE        reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    BREAK           reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    RETURN          reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    INC_OP          reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DEC_OP          reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SIZEOF          reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    ALIGNOF         reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    LPAREN          reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    AND             reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    TIMES           reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    PLUS            reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    MINUS           reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    TILDE           reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    NOT             reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    INTEGER         reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    F_CONSTANT      reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    ENUMERATION_CONSTANT reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    STRING_LITERAL  reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    FUNC_NAME       reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    GENERIC         reduce using rule 90 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)


state 74

    (103) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (104) init_declarator -> . declarator EQUALS initializer
    (105) init_declarator -> . declarator
    (164) declarator -> . pointer direct_declarator
    (165) declarator -> . direct_declarator
    (180) pointer -> . TIMES type_qualifier_list pointer
    (181) pointer -> . TIMES type_qualifier_list
    (182) pointer -> . TIMES pointer
    (183) pointer -> . TIMES
    (166) direct_declarator -> . IDENTIFIER
    (167) direct_declarator -> . LPAREN declarator RPAREN
    (168) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (169) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (170) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (171) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (172) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (173) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (174) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (175) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (176) direct_declarator -> . direct_declarator LBRACKET assignment_expression RBRACKET
    (177) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (178) direct_declarator -> . direct_declarator LPAREN RPAREN
    (179) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN

    TIMES           shift and go to state 52
    IDENTIFIER      shift and go to state 53
    LPAREN          shift and go to state 54

    init_declarator                shift and go to state 172
    declarator                     shift and go to state 137
    pointer                        shift and go to state 49
    direct_declarator              shift and go to state 50

state 75

    (164) declarator -> pointer direct_declarator .
    (168) direct_declarator -> direct_declarator . LBRACKET RBRACKET
    (169) direct_declarator -> direct_declarator . LBRACKET TIMES RBRACKET
    (170) direct_declarator -> direct_declarator . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (171) direct_declarator -> direct_declarator . LBRACKET STATIC assignment_expression RBRACKET
    (172) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list TIMES RBRACKET
    (173) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (174) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (175) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list RBRACKET
    (176) direct_declarator -> direct_declarator . LBRACKET assignment_expression RBRACKET
    (177) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (178) direct_declarator -> direct_declarator . LPAREN RPAREN
    (179) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN

    EQUALS          reduce using rule 164 (declarator -> pointer direct_declarator .)
    LBRACE          reduce using rule 164 (declarator -> pointer direct_declarator .)
    STATIC_ASSERT   reduce using rule 164 (declarator -> pointer direct_declarator .)
    TYPEDEF         reduce using rule 164 (declarator -> pointer direct_declarator .)
    EXTERN          reduce using rule 164 (declarator -> pointer direct_declarator .)
    STATIC          reduce using rule 164 (declarator -> pointer direct_declarator .)
    THREAD_LOCAL    reduce using rule 164 (declarator -> pointer direct_declarator .)
    AUTO            reduce using rule 164 (declarator -> pointer direct_declarator .)
    REGISTER        reduce using rule 164 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 164 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 164 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 164 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 164 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 164 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 164 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 164 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 164 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 164 (declarator -> pointer direct_declarator .)
    BOOL            reduce using rule 164 (declarator -> pointer direct_declarator .)
    COMPLEX         reduce using rule 164 (declarator -> pointer direct_declarator .)
    IMAGINARY       reduce using rule 164 (declarator -> pointer direct_declarator .)
    CONST           reduce using rule 164 (declarator -> pointer direct_declarator .)
    RESTRICT        reduce using rule 164 (declarator -> pointer direct_declarator .)
    VOLATILE        reduce using rule 164 (declarator -> pointer direct_declarator .)
    ATOMIC          reduce using rule 164 (declarator -> pointer direct_declarator .)
    INLINE          reduce using rule 164 (declarator -> pointer direct_declarator .)
    NORETURN        reduce using rule 164 (declarator -> pointer direct_declarator .)
    ALIGNAS         reduce using rule 164 (declarator -> pointer direct_declarator .)
    ENUM            reduce using rule 164 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 164 (declarator -> pointer direct_declarator .)
    UNION           reduce using rule 164 (declarator -> pointer direct_declarator .)
    SEMICOLON       reduce using rule 164 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 164 (declarator -> pointer direct_declarator .)
    RPAREN          reduce using rule 164 (declarator -> pointer direct_declarator .)
    COLON           reduce using rule 164 (declarator -> pointer direct_declarator .)
    LBRACKET        shift and go to state 76
    LPAREN          shift and go to state 77


state 76

    (168) direct_declarator -> direct_declarator LBRACKET . RBRACKET
    (169) direct_declarator -> direct_declarator LBRACKET . TIMES RBRACKET
    (170) direct_declarator -> direct_declarator LBRACKET . STATIC type_qualifier_list assignment_expression RBRACKET
    (171) direct_declarator -> direct_declarator LBRACKET . STATIC assignment_expression RBRACKET
    (172) direct_declarator -> direct_declarator LBRACKET . type_qualifier_list TIMES RBRACKET
    (173) direct_declarator -> direct_declarator LBRACKET . type_qualifier_list STATIC assignment_expression RBRACKET
    (174) direct_declarator -> direct_declarator LBRACKET . type_qualifier_list assignment_expression RBRACKET
    (175) direct_declarator -> direct_declarator LBRACKET . type_qualifier_list RBRACKET
    (176) direct_declarator -> direct_declarator LBRACKET . assignment_expression RBRACKET
    (184) type_qualifier_list -> . type_qualifier
    (185) type_qualifier_list -> . type_qualifier_list type_qualifier
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACKET        shift and go to state 173
    TIMES           shift and go to state 174
    STATIC          shift and go to state 175
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 81
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    type_qualifier_list            shift and go to state 176
    assignment_expression          shift and go to state 177
    type_qualifier                 shift and go to state 80
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 77

    (177) direct_declarator -> direct_declarator LPAREN . parameter_type_list RPAREN
    (178) direct_declarator -> direct_declarator LPAREN . RPAREN
    (179) direct_declarator -> direct_declarator LPAREN . identifier_list RPAREN
    (186) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (187) parameter_type_list -> . parameter_list
    (193) identifier_list -> . IDENTIFIER
    (194) identifier_list -> . identifier_list COMMA IDENTIFIER
    (188) parameter_list -> . parameter_declaration
    (189) parameter_list -> . parameter_list COMMA parameter_declaration
    (190) parameter_declaration -> . declaration_specifiers declarator
    (191) parameter_declaration -> . declaration_specifiers abstract_declarator
    (192) parameter_declaration -> . declaration_specifiers
    (92) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (93) declaration_specifiers -> . storage_class_specifier
    (94) declaration_specifiers -> . type_specifier declaration_specifiers
    (95) declaration_specifiers -> . type_specifier
    (96) declaration_specifiers -> . type_qualifier declaration_specifiers
    (97) declaration_specifiers -> . type_qualifier
    (98) declaration_specifiers -> . function_specifier declaration_specifiers
    (99) declaration_specifiers -> . function_specifier
    (100) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (101) declaration_specifiers -> . alignment_specifier
    (106) storage_class_specifier -> . TYPEDEF
    (107) storage_class_specifier -> . EXTERN
    (108) storage_class_specifier -> . STATIC
    (109) storage_class_specifier -> . THREAD_LOCAL
    (110) storage_class_specifier -> . AUTO
    (111) storage_class_specifier -> . REGISTER
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (160) function_specifier -> . INLINE
    (161) function_specifier -> . NORETURN
    (162) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (163) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    RPAREN          shift and go to state 179
    IDENTIFIER      shift and go to state 182
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    INLINE          shift and go to state 39
    NORETURN        shift and go to state 40
    ALIGNAS         shift and go to state 41
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    parameter_type_list            shift and go to state 178
    identifier_list                shift and go to state 180
    parameter_list                 shift and go to state 181
    parameter_declaration          shift and go to state 183
    declaration_specifiers         shift and go to state 184
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 42

state 78

    (180) pointer -> TIMES type_qualifier_list . pointer
    (181) pointer -> TIMES type_qualifier_list .
    (185) type_qualifier_list -> type_qualifier_list . type_qualifier
    (180) pointer -> . TIMES type_qualifier_list pointer
    (181) pointer -> . TIMES type_qualifier_list
    (182) pointer -> . TIMES pointer
    (183) pointer -> . TIMES
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC

    IDENTIFIER      reduce using rule 181 (pointer -> TIMES type_qualifier_list .)
    LPAREN          reduce using rule 181 (pointer -> TIMES type_qualifier_list .)
    LBRACKET        reduce using rule 181 (pointer -> TIMES type_qualifier_list .)
    RPAREN          reduce using rule 181 (pointer -> TIMES type_qualifier_list .)
    COLON           reduce using rule 181 (pointer -> TIMES type_qualifier_list .)
    COMMA           reduce using rule 181 (pointer -> TIMES type_qualifier_list .)
    TIMES           shift and go to state 52
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 81

    pointer                        shift and go to state 185
    type_qualifier                 shift and go to state 186

state 79

    (182) pointer -> TIMES pointer .

    IDENTIFIER      reduce using rule 182 (pointer -> TIMES pointer .)
    LPAREN          reduce using rule 182 (pointer -> TIMES pointer .)
    LBRACKET        reduce using rule 182 (pointer -> TIMES pointer .)
    RPAREN          reduce using rule 182 (pointer -> TIMES pointer .)
    COLON           reduce using rule 182 (pointer -> TIMES pointer .)
    COMMA           reduce using rule 182 (pointer -> TIMES pointer .)


state 80

    (184) type_qualifier_list -> type_qualifier .

    TIMES           reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    RESTRICT        reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    ATOMIC          reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    LBRACKET        reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    COLON           reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    COMMA           reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    STATIC          reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    RBRACKET        reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    INC_OP          reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    DEC_OP          reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    SIZEOF          reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    ALIGNOF         reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    AND             reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    PLUS            reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    MINUS           reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    TILDE           reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    NOT             reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    INTEGER         reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    F_CONSTANT      reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    ENUMERATION_CONSTANT reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    STRING_LITERAL  reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    FUNC_NAME       reduce using rule 184 (type_qualifier_list -> type_qualifier .)
    GENERIC         reduce using rule 184 (type_qualifier_list -> type_qualifier .)


state 81

    (159) type_qualifier -> ATOMIC .

    TIMES           reduce using rule 159 (type_qualifier -> ATOMIC .)
    CONST           reduce using rule 159 (type_qualifier -> ATOMIC .)
    RESTRICT        reduce using rule 159 (type_qualifier -> ATOMIC .)
    VOLATILE        reduce using rule 159 (type_qualifier -> ATOMIC .)
    ATOMIC          reduce using rule 159 (type_qualifier -> ATOMIC .)
    IDENTIFIER      reduce using rule 159 (type_qualifier -> ATOMIC .)
    LPAREN          reduce using rule 159 (type_qualifier -> ATOMIC .)
    LBRACKET        reduce using rule 159 (type_qualifier -> ATOMIC .)
    RPAREN          reduce using rule 159 (type_qualifier -> ATOMIC .)
    COLON           reduce using rule 159 (type_qualifier -> ATOMIC .)
    COMMA           reduce using rule 159 (type_qualifier -> ATOMIC .)
    STATIC          reduce using rule 159 (type_qualifier -> ATOMIC .)
    RBRACKET        reduce using rule 159 (type_qualifier -> ATOMIC .)
    INC_OP          reduce using rule 159 (type_qualifier -> ATOMIC .)
    DEC_OP          reduce using rule 159 (type_qualifier -> ATOMIC .)
    SIZEOF          reduce using rule 159 (type_qualifier -> ATOMIC .)
    ALIGNOF         reduce using rule 159 (type_qualifier -> ATOMIC .)
    AND             reduce using rule 159 (type_qualifier -> ATOMIC .)
    PLUS            reduce using rule 159 (type_qualifier -> ATOMIC .)
    MINUS           reduce using rule 159 (type_qualifier -> ATOMIC .)
    TILDE           reduce using rule 159 (type_qualifier -> ATOMIC .)
    NOT             reduce using rule 159 (type_qualifier -> ATOMIC .)
    INTEGER         reduce using rule 159 (type_qualifier -> ATOMIC .)
    F_CONSTANT      reduce using rule 159 (type_qualifier -> ATOMIC .)
    ENUMERATION_CONSTANT reduce using rule 159 (type_qualifier -> ATOMIC .)
    STRING_LITERAL  reduce using rule 159 (type_qualifier -> ATOMIC .)
    FUNC_NAME       reduce using rule 159 (type_qualifier -> ATOMIC .)
    GENERIC         reduce using rule 159 (type_qualifier -> ATOMIC .)


state 82

    (167) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 187


state 83

    (43) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (25) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (4) primary_expression -> LPAREN . expression RPAREN
    (195) type_name -> . specifier_qualifier_list abstract_declarator
    (196) type_name -> . specifier_qualifier_list
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (137) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (138) specifier_qualifier_list -> . type_specifier
    (139) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (140) specifier_qualifier_list -> . type_qualifier
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    ENUM            shift and go to state 43
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    type_name                      shift and go to state 188
    cast_expression                shift and go to state 100
    expression                     shift and go to state 189
    specifier_qualifier_list       shift and go to state 122
    assignment_expression          shift and go to state 171
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    struct_or_union                shift and go to state 42
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 84

    (233) static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression . COMMA STRING_LITERAL RPAREN SEMICOLON

    COMMA           shift and go to state 190


state 85

    (10) string -> STRING_LITERAL .

    LBRACKET        reduce using rule 10 (string -> STRING_LITERAL .)
    LPAREN          reduce using rule 10 (string -> STRING_LITERAL .)
    DOT             reduce using rule 10 (string -> STRING_LITERAL .)
    PTR_OP          reduce using rule 10 (string -> STRING_LITERAL .)
    INC_OP          reduce using rule 10 (string -> STRING_LITERAL .)
    DEC_OP          reduce using rule 10 (string -> STRING_LITERAL .)
    TIMES           reduce using rule 10 (string -> STRING_LITERAL .)
    DIVIDE          reduce using rule 10 (string -> STRING_LITERAL .)
    MOD             reduce using rule 10 (string -> STRING_LITERAL .)
    PLUS            reduce using rule 10 (string -> STRING_LITERAL .)
    MINUS           reduce using rule 10 (string -> STRING_LITERAL .)
    LEFT_OP         reduce using rule 10 (string -> STRING_LITERAL .)
    RIGHT_OP        reduce using rule 10 (string -> STRING_LITERAL .)
    LT              reduce using rule 10 (string -> STRING_LITERAL .)
    GT              reduce using rule 10 (string -> STRING_LITERAL .)
    LE_OP           reduce using rule 10 (string -> STRING_LITERAL .)
    GE_OP           reduce using rule 10 (string -> STRING_LITERAL .)
    EQ_OP           reduce using rule 10 (string -> STRING_LITERAL .)
    NE_OP           reduce using rule 10 (string -> STRING_LITERAL .)
    AND             reduce using rule 10 (string -> STRING_LITERAL .)
    XOR             reduce using rule 10 (string -> STRING_LITERAL .)
    OR              reduce using rule 10 (string -> STRING_LITERAL .)
    AND_OP          reduce using rule 10 (string -> STRING_LITERAL .)
    QUESTION        reduce using rule 10 (string -> STRING_LITERAL .)
    OR_OP           reduce using rule 10 (string -> STRING_LITERAL .)
    COMMA           reduce using rule 10 (string -> STRING_LITERAL .)
    RPAREN          reduce using rule 10 (string -> STRING_LITERAL .)
    EQUALS          reduce using rule 10 (string -> STRING_LITERAL .)
    MUL_ASSIGN      reduce using rule 10 (string -> STRING_LITERAL .)
    DIV_ASSIGN      reduce using rule 10 (string -> STRING_LITERAL .)
    MOD_ASSIGN      reduce using rule 10 (string -> STRING_LITERAL .)
    ADD_ASSIGN      reduce using rule 10 (string -> STRING_LITERAL .)
    SUB_ASSIGN      reduce using rule 10 (string -> STRING_LITERAL .)
    LEFT_ASSIGN     reduce using rule 10 (string -> STRING_LITERAL .)
    RIGHT_ASSIGN    reduce using rule 10 (string -> STRING_LITERAL .)
    AND_ASSIGN      reduce using rule 10 (string -> STRING_LITERAL .)
    XOR_ASSIGN      reduce using rule 10 (string -> STRING_LITERAL .)
    OR_ASSIGN       reduce using rule 10 (string -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 10 (string -> STRING_LITERAL .)
    RBRACKET        reduce using rule 10 (string -> STRING_LITERAL .)
    RBRACE          reduce using rule 10 (string -> STRING_LITERAL .)
    COLON           reduce using rule 10 (string -> STRING_LITERAL .)


state 86

    (89) constant_expression -> conditional_expression .

    COMMA           reduce using rule 89 (constant_expression -> conditional_expression .)
    RPAREN          reduce using rule 89 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 89 (constant_expression -> conditional_expression .)
    SEMICOLON       reduce using rule 89 (constant_expression -> conditional_expression .)
    RBRACE          reduce using rule 89 (constant_expression -> conditional_expression .)
    RBRACKET        reduce using rule 89 (constant_expression -> conditional_expression .)


state 87

    (72) conditional_expression -> logical_or_expression .
    (73) conditional_expression -> logical_or_expression . QUESTION expression COLON conditional_expression
    (71) logical_or_expression -> logical_or_expression . OR_OP logical_and_expression

    COMMA           reduce using rule 72 (conditional_expression -> logical_or_expression .)
    RPAREN          reduce using rule 72 (conditional_expression -> logical_or_expression .)
    SEMICOLON       reduce using rule 72 (conditional_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 72 (conditional_expression -> logical_or_expression .)
    RBRACE          reduce using rule 72 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 72 (conditional_expression -> logical_or_expression .)
    QUESTION        shift and go to state 191
    OR_OP           shift and go to state 192


state 88

    (70) logical_or_expression -> logical_and_expression .
    (69) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    QUESTION        reduce using rule 70 (logical_or_expression -> logical_and_expression .)
    OR_OP           reduce using rule 70 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 70 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 70 (logical_or_expression -> logical_and_expression .)
    SEMICOLON       reduce using rule 70 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 70 (logical_or_expression -> logical_and_expression .)
    RBRACE          reduce using rule 70 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 70 (logical_or_expression -> logical_and_expression .)
    AND_OP          shift and go to state 193


state 89

    (68) logical_and_expression -> inclusive_or_expression .
    (67) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    AND_OP          reduce using rule 68 (logical_and_expression -> inclusive_or_expression .)
    QUESTION        reduce using rule 68 (logical_and_expression -> inclusive_or_expression .)
    OR_OP           reduce using rule 68 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 68 (logical_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 68 (logical_and_expression -> inclusive_or_expression .)
    SEMICOLON       reduce using rule 68 (logical_and_expression -> inclusive_or_expression .)
    RBRACKET        reduce using rule 68 (logical_and_expression -> inclusive_or_expression .)
    RBRACE          reduce using rule 68 (logical_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 68 (logical_and_expression -> inclusive_or_expression .)
    OR              shift and go to state 194


state 90

    (66) inclusive_or_expression -> exclusive_or_expression .
    (65) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 66 (inclusive_or_expression -> exclusive_or_expression .)
    AND_OP          reduce using rule 66 (inclusive_or_expression -> exclusive_or_expression .)
    QUESTION        reduce using rule 66 (inclusive_or_expression -> exclusive_or_expression .)
    OR_OP           reduce using rule 66 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 66 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 66 (inclusive_or_expression -> exclusive_or_expression .)
    SEMICOLON       reduce using rule 66 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACKET        reduce using rule 66 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACE          reduce using rule 66 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 66 (inclusive_or_expression -> exclusive_or_expression .)
    XOR             shift and go to state 195


state 91

    (64) exclusive_or_expression -> and_expression .
    (63) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 64 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 64 (exclusive_or_expression -> and_expression .)
    AND_OP          reduce using rule 64 (exclusive_or_expression -> and_expression .)
    QUESTION        reduce using rule 64 (exclusive_or_expression -> and_expression .)
    OR_OP           reduce using rule 64 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 64 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 64 (exclusive_or_expression -> and_expression .)
    SEMICOLON       reduce using rule 64 (exclusive_or_expression -> and_expression .)
    RBRACKET        reduce using rule 64 (exclusive_or_expression -> and_expression .)
    RBRACE          reduce using rule 64 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 64 (exclusive_or_expression -> and_expression .)
    AND             shift and go to state 196


state 92

    (62) and_expression -> equality_expression .
    (60) equality_expression -> equality_expression . EQ_OP relational_expression
    (61) equality_expression -> equality_expression . NE_OP relational_expression

    AND             reduce using rule 62 (and_expression -> equality_expression .)
    XOR             reduce using rule 62 (and_expression -> equality_expression .)
    OR              reduce using rule 62 (and_expression -> equality_expression .)
    AND_OP          reduce using rule 62 (and_expression -> equality_expression .)
    QUESTION        reduce using rule 62 (and_expression -> equality_expression .)
    OR_OP           reduce using rule 62 (and_expression -> equality_expression .)
    COMMA           reduce using rule 62 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 62 (and_expression -> equality_expression .)
    SEMICOLON       reduce using rule 62 (and_expression -> equality_expression .)
    RBRACKET        reduce using rule 62 (and_expression -> equality_expression .)
    RBRACE          reduce using rule 62 (and_expression -> equality_expression .)
    COLON           reduce using rule 62 (and_expression -> equality_expression .)
    EQ_OP           shift and go to state 197
    NE_OP           shift and go to state 198


state 93

    (36) unary_operator -> AND .

    LPAREN          reduce using rule 36 (unary_operator -> AND .)
    INC_OP          reduce using rule 36 (unary_operator -> AND .)
    DEC_OP          reduce using rule 36 (unary_operator -> AND .)
    SIZEOF          reduce using rule 36 (unary_operator -> AND .)
    ALIGNOF         reduce using rule 36 (unary_operator -> AND .)
    AND             reduce using rule 36 (unary_operator -> AND .)
    TIMES           reduce using rule 36 (unary_operator -> AND .)
    PLUS            reduce using rule 36 (unary_operator -> AND .)
    MINUS           reduce using rule 36 (unary_operator -> AND .)
    TILDE           reduce using rule 36 (unary_operator -> AND .)
    NOT             reduce using rule 36 (unary_operator -> AND .)
    IDENTIFIER      reduce using rule 36 (unary_operator -> AND .)
    INTEGER         reduce using rule 36 (unary_operator -> AND .)
    F_CONSTANT      reduce using rule 36 (unary_operator -> AND .)
    ENUMERATION_CONSTANT reduce using rule 36 (unary_operator -> AND .)
    STRING_LITERAL  reduce using rule 36 (unary_operator -> AND .)
    FUNC_NAME       reduce using rule 36 (unary_operator -> AND .)
    GENERIC         reduce using rule 36 (unary_operator -> AND .)


state 94

    (59) equality_expression -> relational_expression .
    (55) relational_expression -> relational_expression . LT shift_expression
    (56) relational_expression -> relational_expression . GT shift_expression
    (57) relational_expression -> relational_expression . LE_OP shift_expression
    (58) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 59 (equality_expression -> relational_expression .)
    NE_OP           reduce using rule 59 (equality_expression -> relational_expression .)
    AND             reduce using rule 59 (equality_expression -> relational_expression .)
    XOR             reduce using rule 59 (equality_expression -> relational_expression .)
    OR              reduce using rule 59 (equality_expression -> relational_expression .)
    AND_OP          reduce using rule 59 (equality_expression -> relational_expression .)
    QUESTION        reduce using rule 59 (equality_expression -> relational_expression .)
    OR_OP           reduce using rule 59 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 59 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 59 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 59 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 59 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 59 (equality_expression -> relational_expression .)
    COLON           reduce using rule 59 (equality_expression -> relational_expression .)
    LT              shift and go to state 199
    GT              shift and go to state 200
    LE_OP           shift and go to state 201
    GE_OP           shift and go to state 202


state 95

    (54) relational_expression -> shift_expression .
    (52) shift_expression -> shift_expression . LEFT_OP additive_expression
    (53) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LT              reduce using rule 54 (relational_expression -> shift_expression .)
    GT              reduce using rule 54 (relational_expression -> shift_expression .)
    LE_OP           reduce using rule 54 (relational_expression -> shift_expression .)
    GE_OP           reduce using rule 54 (relational_expression -> shift_expression .)
    EQ_OP           reduce using rule 54 (relational_expression -> shift_expression .)
    NE_OP           reduce using rule 54 (relational_expression -> shift_expression .)
    AND             reduce using rule 54 (relational_expression -> shift_expression .)
    XOR             reduce using rule 54 (relational_expression -> shift_expression .)
    OR              reduce using rule 54 (relational_expression -> shift_expression .)
    AND_OP          reduce using rule 54 (relational_expression -> shift_expression .)
    QUESTION        reduce using rule 54 (relational_expression -> shift_expression .)
    OR_OP           reduce using rule 54 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 54 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 54 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 54 (relational_expression -> shift_expression .)
    RBRACKET        reduce using rule 54 (relational_expression -> shift_expression .)
    RBRACE          reduce using rule 54 (relational_expression -> shift_expression .)
    COLON           reduce using rule 54 (relational_expression -> shift_expression .)
    LEFT_OP         shift and go to state 203
    RIGHT_OP        shift and go to state 204


state 96

    (51) shift_expression -> additive_expression .
    (49) additive_expression -> additive_expression . PLUS multiplicative_expression
    (50) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 51 (shift_expression -> additive_expression .)
    RIGHT_OP        reduce using rule 51 (shift_expression -> additive_expression .)
    LT              reduce using rule 51 (shift_expression -> additive_expression .)
    GT              reduce using rule 51 (shift_expression -> additive_expression .)
    LE_OP           reduce using rule 51 (shift_expression -> additive_expression .)
    GE_OP           reduce using rule 51 (shift_expression -> additive_expression .)
    EQ_OP           reduce using rule 51 (shift_expression -> additive_expression .)
    NE_OP           reduce using rule 51 (shift_expression -> additive_expression .)
    AND             reduce using rule 51 (shift_expression -> additive_expression .)
    XOR             reduce using rule 51 (shift_expression -> additive_expression .)
    OR              reduce using rule 51 (shift_expression -> additive_expression .)
    AND_OP          reduce using rule 51 (shift_expression -> additive_expression .)
    QUESTION        reduce using rule 51 (shift_expression -> additive_expression .)
    OR_OP           reduce using rule 51 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 51 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 51 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 51 (shift_expression -> additive_expression .)
    RBRACKET        reduce using rule 51 (shift_expression -> additive_expression .)
    RBRACE          reduce using rule 51 (shift_expression -> additive_expression .)
    COLON           reduce using rule 51 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 205
    MINUS           shift and go to state 206


state 97

    (48) additive_expression -> multiplicative_expression .
    (45) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (46) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (47) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 48 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 48 (additive_expression -> multiplicative_expression .)
    LEFT_OP         reduce using rule 48 (additive_expression -> multiplicative_expression .)
    RIGHT_OP        reduce using rule 48 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 48 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 48 (additive_expression -> multiplicative_expression .)
    LE_OP           reduce using rule 48 (additive_expression -> multiplicative_expression .)
    GE_OP           reduce using rule 48 (additive_expression -> multiplicative_expression .)
    EQ_OP           reduce using rule 48 (additive_expression -> multiplicative_expression .)
    NE_OP           reduce using rule 48 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 48 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 48 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 48 (additive_expression -> multiplicative_expression .)
    AND_OP          reduce using rule 48 (additive_expression -> multiplicative_expression .)
    QUESTION        reduce using rule 48 (additive_expression -> multiplicative_expression .)
    OR_OP           reduce using rule 48 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 48 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 48 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 48 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 48 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 48 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 48 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 207
    DIVIDE          shift and go to state 208
    MOD             shift and go to state 209


state 98

    (38) unary_operator -> PLUS .

    LPAREN          reduce using rule 38 (unary_operator -> PLUS .)
    INC_OP          reduce using rule 38 (unary_operator -> PLUS .)
    DEC_OP          reduce using rule 38 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 38 (unary_operator -> PLUS .)
    ALIGNOF         reduce using rule 38 (unary_operator -> PLUS .)
    AND             reduce using rule 38 (unary_operator -> PLUS .)
    TIMES           reduce using rule 38 (unary_operator -> PLUS .)
    PLUS            reduce using rule 38 (unary_operator -> PLUS .)
    MINUS           reduce using rule 38 (unary_operator -> PLUS .)
    TILDE           reduce using rule 38 (unary_operator -> PLUS .)
    NOT             reduce using rule 38 (unary_operator -> PLUS .)
    IDENTIFIER      reduce using rule 38 (unary_operator -> PLUS .)
    INTEGER         reduce using rule 38 (unary_operator -> PLUS .)
    F_CONSTANT      reduce using rule 38 (unary_operator -> PLUS .)
    ENUMERATION_CONSTANT reduce using rule 38 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 38 (unary_operator -> PLUS .)
    FUNC_NAME       reduce using rule 38 (unary_operator -> PLUS .)
    GENERIC         reduce using rule 38 (unary_operator -> PLUS .)


state 99

    (39) unary_operator -> MINUS .

    LPAREN          reduce using rule 39 (unary_operator -> MINUS .)
    INC_OP          reduce using rule 39 (unary_operator -> MINUS .)
    DEC_OP          reduce using rule 39 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 39 (unary_operator -> MINUS .)
    ALIGNOF         reduce using rule 39 (unary_operator -> MINUS .)
    AND             reduce using rule 39 (unary_operator -> MINUS .)
    TIMES           reduce using rule 39 (unary_operator -> MINUS .)
    PLUS            reduce using rule 39 (unary_operator -> MINUS .)
    MINUS           reduce using rule 39 (unary_operator -> MINUS .)
    TILDE           reduce using rule 39 (unary_operator -> MINUS .)
    NOT             reduce using rule 39 (unary_operator -> MINUS .)
    IDENTIFIER      reduce using rule 39 (unary_operator -> MINUS .)
    INTEGER         reduce using rule 39 (unary_operator -> MINUS .)
    F_CONSTANT      reduce using rule 39 (unary_operator -> MINUS .)
    ENUMERATION_CONSTANT reduce using rule 39 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 39 (unary_operator -> MINUS .)
    FUNC_NAME       reduce using rule 39 (unary_operator -> MINUS .)
    GENERIC         reduce using rule 39 (unary_operator -> MINUS .)


state 100

    (44) multiplicative_expression -> cast_expression .

    TIMES           reduce using rule 44 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 44 (multiplicative_expression -> cast_expression .)
    MOD             reduce using rule 44 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 44 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 44 (multiplicative_expression -> cast_expression .)
    LEFT_OP         reduce using rule 44 (multiplicative_expression -> cast_expression .)
    RIGHT_OP        reduce using rule 44 (multiplicative_expression -> cast_expression .)
    LT              reduce using rule 44 (multiplicative_expression -> cast_expression .)
    GT              reduce using rule 44 (multiplicative_expression -> cast_expression .)
    LE_OP           reduce using rule 44 (multiplicative_expression -> cast_expression .)
    GE_OP           reduce using rule 44 (multiplicative_expression -> cast_expression .)
    EQ_OP           reduce using rule 44 (multiplicative_expression -> cast_expression .)
    NE_OP           reduce using rule 44 (multiplicative_expression -> cast_expression .)
    AND             reduce using rule 44 (multiplicative_expression -> cast_expression .)
    XOR             reduce using rule 44 (multiplicative_expression -> cast_expression .)
    OR              reduce using rule 44 (multiplicative_expression -> cast_expression .)
    AND_OP          reduce using rule 44 (multiplicative_expression -> cast_expression .)
    QUESTION        reduce using rule 44 (multiplicative_expression -> cast_expression .)
    OR_OP           reduce using rule 44 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 44 (multiplicative_expression -> cast_expression .)
    RPAREN          reduce using rule 44 (multiplicative_expression -> cast_expression .)
    SEMICOLON       reduce using rule 44 (multiplicative_expression -> cast_expression .)
    RBRACKET        reduce using rule 44 (multiplicative_expression -> cast_expression .)
    RBRACE          reduce using rule 44 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 44 (multiplicative_expression -> cast_expression .)


state 101

    (37) unary_operator -> TIMES .

    LPAREN          reduce using rule 37 (unary_operator -> TIMES .)
    INC_OP          reduce using rule 37 (unary_operator -> TIMES .)
    DEC_OP          reduce using rule 37 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 37 (unary_operator -> TIMES .)
    ALIGNOF         reduce using rule 37 (unary_operator -> TIMES .)
    AND             reduce using rule 37 (unary_operator -> TIMES .)
    TIMES           reduce using rule 37 (unary_operator -> TIMES .)
    PLUS            reduce using rule 37 (unary_operator -> TIMES .)
    MINUS           reduce using rule 37 (unary_operator -> TIMES .)
    TILDE           reduce using rule 37 (unary_operator -> TIMES .)
    NOT             reduce using rule 37 (unary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 37 (unary_operator -> TIMES .)
    INTEGER         reduce using rule 37 (unary_operator -> TIMES .)
    F_CONSTANT      reduce using rule 37 (unary_operator -> TIMES .)
    ENUMERATION_CONSTANT reduce using rule 37 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 37 (unary_operator -> TIMES .)
    FUNC_NAME       reduce using rule 37 (unary_operator -> TIMES .)
    GENERIC         reduce using rule 37 (unary_operator -> TIMES .)


state 102

    (42) cast_expression -> unary_expression .

    TIMES           reduce using rule 42 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 42 (cast_expression -> unary_expression .)
    MOD             reduce using rule 42 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 42 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 42 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 42 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 42 (cast_expression -> unary_expression .)
    LT              reduce using rule 42 (cast_expression -> unary_expression .)
    GT              reduce using rule 42 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 42 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 42 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 42 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 42 (cast_expression -> unary_expression .)
    AND             reduce using rule 42 (cast_expression -> unary_expression .)
    XOR             reduce using rule 42 (cast_expression -> unary_expression .)
    OR              reduce using rule 42 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 42 (cast_expression -> unary_expression .)
    QUESTION        reduce using rule 42 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 42 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 42 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 42 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 42 (cast_expression -> unary_expression .)
    MUL_ASSIGN      reduce using rule 42 (cast_expression -> unary_expression .)
    DIV_ASSIGN      reduce using rule 42 (cast_expression -> unary_expression .)
    MOD_ASSIGN      reduce using rule 42 (cast_expression -> unary_expression .)
    ADD_ASSIGN      reduce using rule 42 (cast_expression -> unary_expression .)
    SUB_ASSIGN      reduce using rule 42 (cast_expression -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 42 (cast_expression -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 42 (cast_expression -> unary_expression .)
    AND_ASSIGN      reduce using rule 42 (cast_expression -> unary_expression .)
    XOR_ASSIGN      reduce using rule 42 (cast_expression -> unary_expression .)
    OR_ASSIGN       reduce using rule 42 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 42 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 42 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 42 (cast_expression -> unary_expression .)
    COLON           reduce using rule 42 (cast_expression -> unary_expression .)


state 103

    (29) unary_expression -> postfix_expression .
    (18) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (19) postfix_expression -> postfix_expression . LPAREN RPAREN
    (20) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> postfix_expression . DOT IDENTIFIER
    (22) postfix_expression -> postfix_expression . PTR_OP IDENTIFIER
    (23) postfix_expression -> postfix_expression . INC_OP
    (24) postfix_expression -> postfix_expression . DEC_OP

    TIMES           reduce using rule 29 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 29 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 29 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 29 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 29 (unary_expression -> postfix_expression .)
    LEFT_OP         reduce using rule 29 (unary_expression -> postfix_expression .)
    RIGHT_OP        reduce using rule 29 (unary_expression -> postfix_expression .)
    LT              reduce using rule 29 (unary_expression -> postfix_expression .)
    GT              reduce using rule 29 (unary_expression -> postfix_expression .)
    LE_OP           reduce using rule 29 (unary_expression -> postfix_expression .)
    GE_OP           reduce using rule 29 (unary_expression -> postfix_expression .)
    EQ_OP           reduce using rule 29 (unary_expression -> postfix_expression .)
    NE_OP           reduce using rule 29 (unary_expression -> postfix_expression .)
    AND             reduce using rule 29 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 29 (unary_expression -> postfix_expression .)
    OR              reduce using rule 29 (unary_expression -> postfix_expression .)
    AND_OP          reduce using rule 29 (unary_expression -> postfix_expression .)
    QUESTION        reduce using rule 29 (unary_expression -> postfix_expression .)
    OR_OP           reduce using rule 29 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 29 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 29 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 29 (unary_expression -> postfix_expression .)
    MUL_ASSIGN      reduce using rule 29 (unary_expression -> postfix_expression .)
    DIV_ASSIGN      reduce using rule 29 (unary_expression -> postfix_expression .)
    MOD_ASSIGN      reduce using rule 29 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 29 (unary_expression -> postfix_expression .)
    SUB_ASSIGN      reduce using rule 29 (unary_expression -> postfix_expression .)
    LEFT_ASSIGN     reduce using rule 29 (unary_expression -> postfix_expression .)
    RIGHT_ASSIGN    reduce using rule 29 (unary_expression -> postfix_expression .)
    AND_ASSIGN      reduce using rule 29 (unary_expression -> postfix_expression .)
    XOR_ASSIGN      reduce using rule 29 (unary_expression -> postfix_expression .)
    OR_ASSIGN       reduce using rule 29 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 29 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 29 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 29 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 29 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 210
    LPAREN          shift and go to state 211
    DOT             shift and go to state 212
    PTR_OP          shift and go to state 213
    INC_OP          shift and go to state 214
    DEC_OP          shift and go to state 215


state 104

    (30) unary_expression -> INC_OP . unary_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 217
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    unary_expression               shift and go to state 216
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 105

    (31) unary_expression -> DEC_OP . unary_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 217
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    unary_expression               shift and go to state 218
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 106

    (32) unary_expression -> unary_operator . cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 219
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 107

    (33) unary_expression -> SIZEOF . unary_expression
    (34) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 221
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    unary_expression               shift and go to state 220
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 108

    (35) unary_expression -> ALIGNOF . LPAREN type_name RPAREN

    LPAREN          shift and go to state 222


state 109

    (17) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 17 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 17 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 17 (postfix_expression -> primary_expression .)
    PTR_OP          reduce using rule 17 (postfix_expression -> primary_expression .)
    INC_OP          reduce using rule 17 (postfix_expression -> primary_expression .)
    DEC_OP          reduce using rule 17 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 17 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 17 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 17 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 17 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 17 (postfix_expression -> primary_expression .)
    LEFT_OP         reduce using rule 17 (postfix_expression -> primary_expression .)
    RIGHT_OP        reduce using rule 17 (postfix_expression -> primary_expression .)
    LT              reduce using rule 17 (postfix_expression -> primary_expression .)
    GT              reduce using rule 17 (postfix_expression -> primary_expression .)
    LE_OP           reduce using rule 17 (postfix_expression -> primary_expression .)
    GE_OP           reduce using rule 17 (postfix_expression -> primary_expression .)
    EQ_OP           reduce using rule 17 (postfix_expression -> primary_expression .)
    NE_OP           reduce using rule 17 (postfix_expression -> primary_expression .)
    AND             reduce using rule 17 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 17 (postfix_expression -> primary_expression .)
    OR              reduce using rule 17 (postfix_expression -> primary_expression .)
    AND_OP          reduce using rule 17 (postfix_expression -> primary_expression .)
    QUESTION        reduce using rule 17 (postfix_expression -> primary_expression .)
    OR_OP           reduce using rule 17 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 17 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 17 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 17 (postfix_expression -> primary_expression .)
    MUL_ASSIGN      reduce using rule 17 (postfix_expression -> primary_expression .)
    DIV_ASSIGN      reduce using rule 17 (postfix_expression -> primary_expression .)
    MOD_ASSIGN      reduce using rule 17 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 17 (postfix_expression -> primary_expression .)
    SUB_ASSIGN      reduce using rule 17 (postfix_expression -> primary_expression .)
    LEFT_ASSIGN     reduce using rule 17 (postfix_expression -> primary_expression .)
    RIGHT_ASSIGN    reduce using rule 17 (postfix_expression -> primary_expression .)
    AND_ASSIGN      reduce using rule 17 (postfix_expression -> primary_expression .)
    XOR_ASSIGN      reduce using rule 17 (postfix_expression -> primary_expression .)
    OR_ASSIGN       reduce using rule 17 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 17 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 17 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 17 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 17 (postfix_expression -> primary_expression .)


state 110

    (1) primary_expression -> IDENTIFIER .

    LBRACKET        reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LPAREN          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    DOT             reduce using rule 1 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    INC_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    DEC_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    TIMES           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    MOD             reduce using rule 1 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 1 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LEFT_OP         reduce using rule 1 (primary_expression -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LT              reduce using rule 1 (primary_expression -> IDENTIFIER .)
    GT              reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    AND             reduce using rule 1 (primary_expression -> IDENTIFIER .)
    XOR             reduce using rule 1 (primary_expression -> IDENTIFIER .)
    OR              reduce using rule 1 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    QUESTION        reduce using rule 1 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    RPAREN          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    EQUALS          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 1 (primary_expression -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 1 (primary_expression -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 1 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 1 (primary_expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 1 (primary_expression -> IDENTIFIER .)
    RBRACE          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    COLON           reduce using rule 1 (primary_expression -> IDENTIFIER .)


state 111

    (40) unary_operator -> TILDE .

    LPAREN          reduce using rule 40 (unary_operator -> TILDE .)
    INC_OP          reduce using rule 40 (unary_operator -> TILDE .)
    DEC_OP          reduce using rule 40 (unary_operator -> TILDE .)
    SIZEOF          reduce using rule 40 (unary_operator -> TILDE .)
    ALIGNOF         reduce using rule 40 (unary_operator -> TILDE .)
    AND             reduce using rule 40 (unary_operator -> TILDE .)
    TIMES           reduce using rule 40 (unary_operator -> TILDE .)
    PLUS            reduce using rule 40 (unary_operator -> TILDE .)
    MINUS           reduce using rule 40 (unary_operator -> TILDE .)
    TILDE           reduce using rule 40 (unary_operator -> TILDE .)
    NOT             reduce using rule 40 (unary_operator -> TILDE .)
    IDENTIFIER      reduce using rule 40 (unary_operator -> TILDE .)
    INTEGER         reduce using rule 40 (unary_operator -> TILDE .)
    F_CONSTANT      reduce using rule 40 (unary_operator -> TILDE .)
    ENUMERATION_CONSTANT reduce using rule 40 (unary_operator -> TILDE .)
    STRING_LITERAL  reduce using rule 40 (unary_operator -> TILDE .)
    FUNC_NAME       reduce using rule 40 (unary_operator -> TILDE .)
    GENERIC         reduce using rule 40 (unary_operator -> TILDE .)


state 112

    (41) unary_operator -> NOT .

    LPAREN          reduce using rule 41 (unary_operator -> NOT .)
    INC_OP          reduce using rule 41 (unary_operator -> NOT .)
    DEC_OP          reduce using rule 41 (unary_operator -> NOT .)
    SIZEOF          reduce using rule 41 (unary_operator -> NOT .)
    ALIGNOF         reduce using rule 41 (unary_operator -> NOT .)
    AND             reduce using rule 41 (unary_operator -> NOT .)
    TIMES           reduce using rule 41 (unary_operator -> NOT .)
    PLUS            reduce using rule 41 (unary_operator -> NOT .)
    MINUS           reduce using rule 41 (unary_operator -> NOT .)
    TILDE           reduce using rule 41 (unary_operator -> NOT .)
    NOT             reduce using rule 41 (unary_operator -> NOT .)
    IDENTIFIER      reduce using rule 41 (unary_operator -> NOT .)
    INTEGER         reduce using rule 41 (unary_operator -> NOT .)
    F_CONSTANT      reduce using rule 41 (unary_operator -> NOT .)
    ENUMERATION_CONSTANT reduce using rule 41 (unary_operator -> NOT .)
    STRING_LITERAL  reduce using rule 41 (unary_operator -> NOT .)
    FUNC_NAME       reduce using rule 41 (unary_operator -> NOT .)
    GENERIC         reduce using rule 41 (unary_operator -> NOT .)


state 113

    (2) primary_expression -> constant .

    LBRACKET        reduce using rule 2 (primary_expression -> constant .)
    LPAREN          reduce using rule 2 (primary_expression -> constant .)
    DOT             reduce using rule 2 (primary_expression -> constant .)
    PTR_OP          reduce using rule 2 (primary_expression -> constant .)
    INC_OP          reduce using rule 2 (primary_expression -> constant .)
    DEC_OP          reduce using rule 2 (primary_expression -> constant .)
    TIMES           reduce using rule 2 (primary_expression -> constant .)
    DIVIDE          reduce using rule 2 (primary_expression -> constant .)
    MOD             reduce using rule 2 (primary_expression -> constant .)
    PLUS            reduce using rule 2 (primary_expression -> constant .)
    MINUS           reduce using rule 2 (primary_expression -> constant .)
    LEFT_OP         reduce using rule 2 (primary_expression -> constant .)
    RIGHT_OP        reduce using rule 2 (primary_expression -> constant .)
    LT              reduce using rule 2 (primary_expression -> constant .)
    GT              reduce using rule 2 (primary_expression -> constant .)
    LE_OP           reduce using rule 2 (primary_expression -> constant .)
    GE_OP           reduce using rule 2 (primary_expression -> constant .)
    EQ_OP           reduce using rule 2 (primary_expression -> constant .)
    NE_OP           reduce using rule 2 (primary_expression -> constant .)
    AND             reduce using rule 2 (primary_expression -> constant .)
    XOR             reduce using rule 2 (primary_expression -> constant .)
    OR              reduce using rule 2 (primary_expression -> constant .)
    AND_OP          reduce using rule 2 (primary_expression -> constant .)
    QUESTION        reduce using rule 2 (primary_expression -> constant .)
    OR_OP           reduce using rule 2 (primary_expression -> constant .)
    COMMA           reduce using rule 2 (primary_expression -> constant .)
    RPAREN          reduce using rule 2 (primary_expression -> constant .)
    EQUALS          reduce using rule 2 (primary_expression -> constant .)
    MUL_ASSIGN      reduce using rule 2 (primary_expression -> constant .)
    DIV_ASSIGN      reduce using rule 2 (primary_expression -> constant .)
    MOD_ASSIGN      reduce using rule 2 (primary_expression -> constant .)
    ADD_ASSIGN      reduce using rule 2 (primary_expression -> constant .)
    SUB_ASSIGN      reduce using rule 2 (primary_expression -> constant .)
    LEFT_ASSIGN     reduce using rule 2 (primary_expression -> constant .)
    RIGHT_ASSIGN    reduce using rule 2 (primary_expression -> constant .)
    AND_ASSIGN      reduce using rule 2 (primary_expression -> constant .)
    XOR_ASSIGN      reduce using rule 2 (primary_expression -> constant .)
    OR_ASSIGN       reduce using rule 2 (primary_expression -> constant .)
    SEMICOLON       reduce using rule 2 (primary_expression -> constant .)
    RBRACKET        reduce using rule 2 (primary_expression -> constant .)
    RBRACE          reduce using rule 2 (primary_expression -> constant .)
    COLON           reduce using rule 2 (primary_expression -> constant .)


state 114

    (3) primary_expression -> string .

    LBRACKET        reduce using rule 3 (primary_expression -> string .)
    LPAREN          reduce using rule 3 (primary_expression -> string .)
    DOT             reduce using rule 3 (primary_expression -> string .)
    PTR_OP          reduce using rule 3 (primary_expression -> string .)
    INC_OP          reduce using rule 3 (primary_expression -> string .)
    DEC_OP          reduce using rule 3 (primary_expression -> string .)
    TIMES           reduce using rule 3 (primary_expression -> string .)
    DIVIDE          reduce using rule 3 (primary_expression -> string .)
    MOD             reduce using rule 3 (primary_expression -> string .)
    PLUS            reduce using rule 3 (primary_expression -> string .)
    MINUS           reduce using rule 3 (primary_expression -> string .)
    LEFT_OP         reduce using rule 3 (primary_expression -> string .)
    RIGHT_OP        reduce using rule 3 (primary_expression -> string .)
    LT              reduce using rule 3 (primary_expression -> string .)
    GT              reduce using rule 3 (primary_expression -> string .)
    LE_OP           reduce using rule 3 (primary_expression -> string .)
    GE_OP           reduce using rule 3 (primary_expression -> string .)
    EQ_OP           reduce using rule 3 (primary_expression -> string .)
    NE_OP           reduce using rule 3 (primary_expression -> string .)
    AND             reduce using rule 3 (primary_expression -> string .)
    XOR             reduce using rule 3 (primary_expression -> string .)
    OR              reduce using rule 3 (primary_expression -> string .)
    AND_OP          reduce using rule 3 (primary_expression -> string .)
    QUESTION        reduce using rule 3 (primary_expression -> string .)
    OR_OP           reduce using rule 3 (primary_expression -> string .)
    COMMA           reduce using rule 3 (primary_expression -> string .)
    RPAREN          reduce using rule 3 (primary_expression -> string .)
    EQUALS          reduce using rule 3 (primary_expression -> string .)
    MUL_ASSIGN      reduce using rule 3 (primary_expression -> string .)
    DIV_ASSIGN      reduce using rule 3 (primary_expression -> string .)
    MOD_ASSIGN      reduce using rule 3 (primary_expression -> string .)
    ADD_ASSIGN      reduce using rule 3 (primary_expression -> string .)
    SUB_ASSIGN      reduce using rule 3 (primary_expression -> string .)
    LEFT_ASSIGN     reduce using rule 3 (primary_expression -> string .)
    RIGHT_ASSIGN    reduce using rule 3 (primary_expression -> string .)
    AND_ASSIGN      reduce using rule 3 (primary_expression -> string .)
    XOR_ASSIGN      reduce using rule 3 (primary_expression -> string .)
    OR_ASSIGN       reduce using rule 3 (primary_expression -> string .)
    SEMICOLON       reduce using rule 3 (primary_expression -> string .)
    RBRACKET        reduce using rule 3 (primary_expression -> string .)
    RBRACE          reduce using rule 3 (primary_expression -> string .)
    COLON           reduce using rule 3 (primary_expression -> string .)


state 115

    (5) primary_expression -> generic_selection .

    LBRACKET        reduce using rule 5 (primary_expression -> generic_selection .)
    LPAREN          reduce using rule 5 (primary_expression -> generic_selection .)
    DOT             reduce using rule 5 (primary_expression -> generic_selection .)
    PTR_OP          reduce using rule 5 (primary_expression -> generic_selection .)
    INC_OP          reduce using rule 5 (primary_expression -> generic_selection .)
    DEC_OP          reduce using rule 5 (primary_expression -> generic_selection .)
    TIMES           reduce using rule 5 (primary_expression -> generic_selection .)
    DIVIDE          reduce using rule 5 (primary_expression -> generic_selection .)
    MOD             reduce using rule 5 (primary_expression -> generic_selection .)
    PLUS            reduce using rule 5 (primary_expression -> generic_selection .)
    MINUS           reduce using rule 5 (primary_expression -> generic_selection .)
    LEFT_OP         reduce using rule 5 (primary_expression -> generic_selection .)
    RIGHT_OP        reduce using rule 5 (primary_expression -> generic_selection .)
    LT              reduce using rule 5 (primary_expression -> generic_selection .)
    GT              reduce using rule 5 (primary_expression -> generic_selection .)
    LE_OP           reduce using rule 5 (primary_expression -> generic_selection .)
    GE_OP           reduce using rule 5 (primary_expression -> generic_selection .)
    EQ_OP           reduce using rule 5 (primary_expression -> generic_selection .)
    NE_OP           reduce using rule 5 (primary_expression -> generic_selection .)
    AND             reduce using rule 5 (primary_expression -> generic_selection .)
    XOR             reduce using rule 5 (primary_expression -> generic_selection .)
    OR              reduce using rule 5 (primary_expression -> generic_selection .)
    AND_OP          reduce using rule 5 (primary_expression -> generic_selection .)
    QUESTION        reduce using rule 5 (primary_expression -> generic_selection .)
    OR_OP           reduce using rule 5 (primary_expression -> generic_selection .)
    COMMA           reduce using rule 5 (primary_expression -> generic_selection .)
    RPAREN          reduce using rule 5 (primary_expression -> generic_selection .)
    EQUALS          reduce using rule 5 (primary_expression -> generic_selection .)
    MUL_ASSIGN      reduce using rule 5 (primary_expression -> generic_selection .)
    DIV_ASSIGN      reduce using rule 5 (primary_expression -> generic_selection .)
    MOD_ASSIGN      reduce using rule 5 (primary_expression -> generic_selection .)
    ADD_ASSIGN      reduce using rule 5 (primary_expression -> generic_selection .)
    SUB_ASSIGN      reduce using rule 5 (primary_expression -> generic_selection .)
    LEFT_ASSIGN     reduce using rule 5 (primary_expression -> generic_selection .)
    RIGHT_ASSIGN    reduce using rule 5 (primary_expression -> generic_selection .)
    AND_ASSIGN      reduce using rule 5 (primary_expression -> generic_selection .)
    XOR_ASSIGN      reduce using rule 5 (primary_expression -> generic_selection .)
    OR_ASSIGN       reduce using rule 5 (primary_expression -> generic_selection .)
    SEMICOLON       reduce using rule 5 (primary_expression -> generic_selection .)
    RBRACKET        reduce using rule 5 (primary_expression -> generic_selection .)
    RBRACE          reduce using rule 5 (primary_expression -> generic_selection .)
    COLON           reduce using rule 5 (primary_expression -> generic_selection .)


state 116

    (6) constant -> INTEGER .

    LBRACKET        reduce using rule 6 (constant -> INTEGER .)
    LPAREN          reduce using rule 6 (constant -> INTEGER .)
    DOT             reduce using rule 6 (constant -> INTEGER .)
    PTR_OP          reduce using rule 6 (constant -> INTEGER .)
    INC_OP          reduce using rule 6 (constant -> INTEGER .)
    DEC_OP          reduce using rule 6 (constant -> INTEGER .)
    TIMES           reduce using rule 6 (constant -> INTEGER .)
    DIVIDE          reduce using rule 6 (constant -> INTEGER .)
    MOD             reduce using rule 6 (constant -> INTEGER .)
    PLUS            reduce using rule 6 (constant -> INTEGER .)
    MINUS           reduce using rule 6 (constant -> INTEGER .)
    LEFT_OP         reduce using rule 6 (constant -> INTEGER .)
    RIGHT_OP        reduce using rule 6 (constant -> INTEGER .)
    LT              reduce using rule 6 (constant -> INTEGER .)
    GT              reduce using rule 6 (constant -> INTEGER .)
    LE_OP           reduce using rule 6 (constant -> INTEGER .)
    GE_OP           reduce using rule 6 (constant -> INTEGER .)
    EQ_OP           reduce using rule 6 (constant -> INTEGER .)
    NE_OP           reduce using rule 6 (constant -> INTEGER .)
    AND             reduce using rule 6 (constant -> INTEGER .)
    XOR             reduce using rule 6 (constant -> INTEGER .)
    OR              reduce using rule 6 (constant -> INTEGER .)
    AND_OP          reduce using rule 6 (constant -> INTEGER .)
    QUESTION        reduce using rule 6 (constant -> INTEGER .)
    OR_OP           reduce using rule 6 (constant -> INTEGER .)
    COMMA           reduce using rule 6 (constant -> INTEGER .)
    RPAREN          reduce using rule 6 (constant -> INTEGER .)
    EQUALS          reduce using rule 6 (constant -> INTEGER .)
    MUL_ASSIGN      reduce using rule 6 (constant -> INTEGER .)
    DIV_ASSIGN      reduce using rule 6 (constant -> INTEGER .)
    MOD_ASSIGN      reduce using rule 6 (constant -> INTEGER .)
    ADD_ASSIGN      reduce using rule 6 (constant -> INTEGER .)
    SUB_ASSIGN      reduce using rule 6 (constant -> INTEGER .)
    LEFT_ASSIGN     reduce using rule 6 (constant -> INTEGER .)
    RIGHT_ASSIGN    reduce using rule 6 (constant -> INTEGER .)
    AND_ASSIGN      reduce using rule 6 (constant -> INTEGER .)
    XOR_ASSIGN      reduce using rule 6 (constant -> INTEGER .)
    OR_ASSIGN       reduce using rule 6 (constant -> INTEGER .)
    SEMICOLON       reduce using rule 6 (constant -> INTEGER .)
    RBRACKET        reduce using rule 6 (constant -> INTEGER .)
    RBRACE          reduce using rule 6 (constant -> INTEGER .)
    COLON           reduce using rule 6 (constant -> INTEGER .)


state 117

    (7) constant -> F_CONSTANT .

    LBRACKET        reduce using rule 7 (constant -> F_CONSTANT .)
    LPAREN          reduce using rule 7 (constant -> F_CONSTANT .)
    DOT             reduce using rule 7 (constant -> F_CONSTANT .)
    PTR_OP          reduce using rule 7 (constant -> F_CONSTANT .)
    INC_OP          reduce using rule 7 (constant -> F_CONSTANT .)
    DEC_OP          reduce using rule 7 (constant -> F_CONSTANT .)
    TIMES           reduce using rule 7 (constant -> F_CONSTANT .)
    DIVIDE          reduce using rule 7 (constant -> F_CONSTANT .)
    MOD             reduce using rule 7 (constant -> F_CONSTANT .)
    PLUS            reduce using rule 7 (constant -> F_CONSTANT .)
    MINUS           reduce using rule 7 (constant -> F_CONSTANT .)
    LEFT_OP         reduce using rule 7 (constant -> F_CONSTANT .)
    RIGHT_OP        reduce using rule 7 (constant -> F_CONSTANT .)
    LT              reduce using rule 7 (constant -> F_CONSTANT .)
    GT              reduce using rule 7 (constant -> F_CONSTANT .)
    LE_OP           reduce using rule 7 (constant -> F_CONSTANT .)
    GE_OP           reduce using rule 7 (constant -> F_CONSTANT .)
    EQ_OP           reduce using rule 7 (constant -> F_CONSTANT .)
    NE_OP           reduce using rule 7 (constant -> F_CONSTANT .)
    AND             reduce using rule 7 (constant -> F_CONSTANT .)
    XOR             reduce using rule 7 (constant -> F_CONSTANT .)
    OR              reduce using rule 7 (constant -> F_CONSTANT .)
    AND_OP          reduce using rule 7 (constant -> F_CONSTANT .)
    QUESTION        reduce using rule 7 (constant -> F_CONSTANT .)
    OR_OP           reduce using rule 7 (constant -> F_CONSTANT .)
    COMMA           reduce using rule 7 (constant -> F_CONSTANT .)
    RPAREN          reduce using rule 7 (constant -> F_CONSTANT .)
    EQUALS          reduce using rule 7 (constant -> F_CONSTANT .)
    MUL_ASSIGN      reduce using rule 7 (constant -> F_CONSTANT .)
    DIV_ASSIGN      reduce using rule 7 (constant -> F_CONSTANT .)
    MOD_ASSIGN      reduce using rule 7 (constant -> F_CONSTANT .)
    ADD_ASSIGN      reduce using rule 7 (constant -> F_CONSTANT .)
    SUB_ASSIGN      reduce using rule 7 (constant -> F_CONSTANT .)
    LEFT_ASSIGN     reduce using rule 7 (constant -> F_CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 7 (constant -> F_CONSTANT .)
    AND_ASSIGN      reduce using rule 7 (constant -> F_CONSTANT .)
    XOR_ASSIGN      reduce using rule 7 (constant -> F_CONSTANT .)
    OR_ASSIGN       reduce using rule 7 (constant -> F_CONSTANT .)
    SEMICOLON       reduce using rule 7 (constant -> F_CONSTANT .)
    RBRACKET        reduce using rule 7 (constant -> F_CONSTANT .)
    RBRACE          reduce using rule 7 (constant -> F_CONSTANT .)
    COLON           reduce using rule 7 (constant -> F_CONSTANT .)


state 118

    (8) constant -> ENUMERATION_CONSTANT .

    LBRACKET        reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    LPAREN          reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    DOT             reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    PTR_OP          reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    INC_OP          reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    DEC_OP          reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    TIMES           reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    DIVIDE          reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    MOD             reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    PLUS            reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    MINUS           reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    LEFT_OP         reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    RIGHT_OP        reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    LT              reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    GT              reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    LE_OP           reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    GE_OP           reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    EQ_OP           reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    NE_OP           reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    AND             reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    XOR             reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    OR              reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    AND_OP          reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    QUESTION        reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    OR_OP           reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    COMMA           reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    RPAREN          reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    EQUALS          reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    MUL_ASSIGN      reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    DIV_ASSIGN      reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    MOD_ASSIGN      reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    ADD_ASSIGN      reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    SUB_ASSIGN      reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    LEFT_ASSIGN     reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    AND_ASSIGN      reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    XOR_ASSIGN      reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    OR_ASSIGN       reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    SEMICOLON       reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    RBRACKET        reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    RBRACE          reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)
    COLON           reduce using rule 8 (constant -> ENUMERATION_CONSTANT .)


state 119

    (11) string -> FUNC_NAME .

    LBRACKET        reduce using rule 11 (string -> FUNC_NAME .)
    LPAREN          reduce using rule 11 (string -> FUNC_NAME .)
    DOT             reduce using rule 11 (string -> FUNC_NAME .)
    PTR_OP          reduce using rule 11 (string -> FUNC_NAME .)
    INC_OP          reduce using rule 11 (string -> FUNC_NAME .)
    DEC_OP          reduce using rule 11 (string -> FUNC_NAME .)
    TIMES           reduce using rule 11 (string -> FUNC_NAME .)
    DIVIDE          reduce using rule 11 (string -> FUNC_NAME .)
    MOD             reduce using rule 11 (string -> FUNC_NAME .)
    PLUS            reduce using rule 11 (string -> FUNC_NAME .)
    MINUS           reduce using rule 11 (string -> FUNC_NAME .)
    LEFT_OP         reduce using rule 11 (string -> FUNC_NAME .)
    RIGHT_OP        reduce using rule 11 (string -> FUNC_NAME .)
    LT              reduce using rule 11 (string -> FUNC_NAME .)
    GT              reduce using rule 11 (string -> FUNC_NAME .)
    LE_OP           reduce using rule 11 (string -> FUNC_NAME .)
    GE_OP           reduce using rule 11 (string -> FUNC_NAME .)
    EQ_OP           reduce using rule 11 (string -> FUNC_NAME .)
    NE_OP           reduce using rule 11 (string -> FUNC_NAME .)
    AND             reduce using rule 11 (string -> FUNC_NAME .)
    XOR             reduce using rule 11 (string -> FUNC_NAME .)
    OR              reduce using rule 11 (string -> FUNC_NAME .)
    AND_OP          reduce using rule 11 (string -> FUNC_NAME .)
    QUESTION        reduce using rule 11 (string -> FUNC_NAME .)
    OR_OP           reduce using rule 11 (string -> FUNC_NAME .)
    COMMA           reduce using rule 11 (string -> FUNC_NAME .)
    RPAREN          reduce using rule 11 (string -> FUNC_NAME .)
    EQUALS          reduce using rule 11 (string -> FUNC_NAME .)
    MUL_ASSIGN      reduce using rule 11 (string -> FUNC_NAME .)
    DIV_ASSIGN      reduce using rule 11 (string -> FUNC_NAME .)
    MOD_ASSIGN      reduce using rule 11 (string -> FUNC_NAME .)
    ADD_ASSIGN      reduce using rule 11 (string -> FUNC_NAME .)
    SUB_ASSIGN      reduce using rule 11 (string -> FUNC_NAME .)
    LEFT_ASSIGN     reduce using rule 11 (string -> FUNC_NAME .)
    RIGHT_ASSIGN    reduce using rule 11 (string -> FUNC_NAME .)
    AND_ASSIGN      reduce using rule 11 (string -> FUNC_NAME .)
    XOR_ASSIGN      reduce using rule 11 (string -> FUNC_NAME .)
    OR_ASSIGN       reduce using rule 11 (string -> FUNC_NAME .)
    SEMICOLON       reduce using rule 11 (string -> FUNC_NAME .)
    RBRACKET        reduce using rule 11 (string -> FUNC_NAME .)
    RBRACE          reduce using rule 11 (string -> FUNC_NAME .)
    COLON           reduce using rule 11 (string -> FUNC_NAME .)


state 120

    (12) generic_selection -> GENERIC . LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 223


state 121

    (155) atomic_type_specifier -> ATOMIC LPAREN type_name . RPAREN

    RPAREN          shift and go to state 224


state 122

    (195) type_name -> specifier_qualifier_list . abstract_declarator
    (196) type_name -> specifier_qualifier_list .
    (197) abstract_declarator -> . pointer direct_abstract_declarator
    (198) abstract_declarator -> . pointer
    (199) abstract_declarator -> . direct_abstract_declarator
    (180) pointer -> . TIMES type_qualifier_list pointer
    (181) pointer -> . TIMES type_qualifier_list
    (182) pointer -> . TIMES pointer
    (183) pointer -> . TIMES
    (200) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (201) direct_abstract_declarator -> . LBRACKET RBRACKET
    (202) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (203) direct_abstract_declarator -> . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (204) direct_abstract_declarator -> . LBRACKET STATIC assignment_expression RBRACKET
    (205) direct_abstract_declarator -> . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (206) direct_abstract_declarator -> . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (207) direct_abstract_declarator -> . LBRACKET type_qualifier_list RBRACKET
    (208) direct_abstract_declarator -> . LBRACKET assignment_expression RBRACKET
    (209) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (210) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (211) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (212) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (214) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET
    (216) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression RBRACKET
    (217) direct_abstract_declarator -> . LPAREN RPAREN
    (218) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (219) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (220) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 196 (type_name -> specifier_qualifier_list .)
    COLON           reduce using rule 196 (type_name -> specifier_qualifier_list .)
    TIMES           shift and go to state 52
    LPAREN          shift and go to state 228
    LBRACKET        shift and go to state 229

    abstract_declarator            shift and go to state 225
    pointer                        shift and go to state 226
    direct_abstract_declarator     shift and go to state 227

state 123

    (137) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (138) specifier_qualifier_list -> type_specifier .
    (137) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (138) specifier_qualifier_list -> . type_specifier
    (139) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (140) specifier_qualifier_list -> . type_qualifier
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    TIMES           reduce using rule 138 (specifier_qualifier_list -> type_specifier .)
    LPAREN          reduce using rule 138 (specifier_qualifier_list -> type_specifier .)
    LBRACKET        reduce using rule 138 (specifier_qualifier_list -> type_specifier .)
    RPAREN          reduce using rule 138 (specifier_qualifier_list -> type_specifier .)
    SEMICOLON       reduce using rule 138 (specifier_qualifier_list -> type_specifier .)
    COLON           reduce using rule 138 (specifier_qualifier_list -> type_specifier .)
    IDENTIFIER      reduce using rule 138 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    type_specifier                 shift and go to state 123
    specifier_qualifier_list       shift and go to state 230
    type_qualifier                 shift and go to state 124
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 42

state 124

    (139) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (140) specifier_qualifier_list -> type_qualifier .
    (137) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (138) specifier_qualifier_list -> . type_specifier
    (139) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (140) specifier_qualifier_list -> . type_qualifier
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    TIMES           reduce using rule 140 (specifier_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 140 (specifier_qualifier_list -> type_qualifier .)
    LBRACKET        reduce using rule 140 (specifier_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 140 (specifier_qualifier_list -> type_qualifier .)
    SEMICOLON       reduce using rule 140 (specifier_qualifier_list -> type_qualifier .)
    COLON           reduce using rule 140 (specifier_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 140 (specifier_qualifier_list -> type_qualifier .)
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    type_qualifier                 shift and go to state 124
    specifier_qualifier_list       shift and go to state 231
    type_specifier                 shift and go to state 123
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 42

state 125

    (162) alignment_specifier -> ALIGNAS LPAREN type_name . RPAREN

    RPAREN          shift and go to state 232


state 126

    (163) alignment_specifier -> ALIGNAS LPAREN constant_expression . RPAREN

    RPAREN          shift and go to state 233


state 127

    (127) struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list . RBRACE
    (133) struct_declaration_list -> struct_declaration_list . struct_declaration
    (134) struct_declaration -> . specifier_qualifier_list SEMICOLON
    (135) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (136) struct_declaration -> . static_assert_declaration
    (137) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (138) specifier_qualifier_list -> . type_specifier
    (139) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (140) specifier_qualifier_list -> . type_qualifier
    (233) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    RBRACE          shift and go to state 234
    STATIC_ASSERT   shift and go to state 13
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    struct_or_union                shift and go to state 42
    struct_declaration             shift and go to state 235
    specifier_qualifier_list       shift and go to state 129
    static_assert_declaration      shift and go to state 130
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34

state 128

    (132) struct_declaration_list -> struct_declaration .

    RBRACE          reduce using rule 132 (struct_declaration_list -> struct_declaration .)
    STATIC_ASSERT   reduce using rule 132 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 132 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 132 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 132 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 132 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 132 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 132 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 132 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 132 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 132 (struct_declaration_list -> struct_declaration .)
    BOOL            reduce using rule 132 (struct_declaration_list -> struct_declaration .)
    COMPLEX         reduce using rule 132 (struct_declaration_list -> struct_declaration .)
    IMAGINARY       reduce using rule 132 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 132 (struct_declaration_list -> struct_declaration .)
    RESTRICT        reduce using rule 132 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 132 (struct_declaration_list -> struct_declaration .)
    ATOMIC          reduce using rule 132 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 132 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 132 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 132 (struct_declaration_list -> struct_declaration .)


state 129

    (134) struct_declaration -> specifier_qualifier_list . SEMICOLON
    (135) struct_declaration -> specifier_qualifier_list . struct_declarator_list SEMICOLON
    (141) struct_declarator_list -> . struct_declarator
    (142) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (143) struct_declarator -> . COLON constant_expression
    (144) struct_declarator -> . declarator COLON constant_expression
    (145) struct_declarator -> . declarator
    (164) declarator -> . pointer direct_declarator
    (165) declarator -> . direct_declarator
    (180) pointer -> . TIMES type_qualifier_list pointer
    (181) pointer -> . TIMES type_qualifier_list
    (182) pointer -> . TIMES pointer
    (183) pointer -> . TIMES
    (166) direct_declarator -> . IDENTIFIER
    (167) direct_declarator -> . LPAREN declarator RPAREN
    (168) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (169) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (170) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (171) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (172) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (173) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (174) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (175) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (176) direct_declarator -> . direct_declarator LBRACKET assignment_expression RBRACKET
    (177) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (178) direct_declarator -> . direct_declarator LPAREN RPAREN
    (179) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN

    SEMICOLON       shift and go to state 236
    COLON           shift and go to state 239
    TIMES           shift and go to state 52
    IDENTIFIER      shift and go to state 53
    LPAREN          shift and go to state 54

    struct_declarator_list         shift and go to state 237
    struct_declarator              shift and go to state 238
    declarator                     shift and go to state 240
    pointer                        shift and go to state 49
    direct_declarator              shift and go to state 50

state 130

    (136) struct_declaration -> static_assert_declaration .

    RBRACE          reduce using rule 136 (struct_declaration -> static_assert_declaration .)
    STATIC_ASSERT   reduce using rule 136 (struct_declaration -> static_assert_declaration .)
    VOID            reduce using rule 136 (struct_declaration -> static_assert_declaration .)
    CHAR            reduce using rule 136 (struct_declaration -> static_assert_declaration .)
    SHORT           reduce using rule 136 (struct_declaration -> static_assert_declaration .)
    INT             reduce using rule 136 (struct_declaration -> static_assert_declaration .)
    LONG            reduce using rule 136 (struct_declaration -> static_assert_declaration .)
    FLOAT           reduce using rule 136 (struct_declaration -> static_assert_declaration .)
    DOUBLE          reduce using rule 136 (struct_declaration -> static_assert_declaration .)
    SIGNED          reduce using rule 136 (struct_declaration -> static_assert_declaration .)
    UNSIGNED        reduce using rule 136 (struct_declaration -> static_assert_declaration .)
    BOOL            reduce using rule 136 (struct_declaration -> static_assert_declaration .)
    COMPLEX         reduce using rule 136 (struct_declaration -> static_assert_declaration .)
    IMAGINARY       reduce using rule 136 (struct_declaration -> static_assert_declaration .)
    CONST           reduce using rule 136 (struct_declaration -> static_assert_declaration .)
    RESTRICT        reduce using rule 136 (struct_declaration -> static_assert_declaration .)
    VOLATILE        reduce using rule 136 (struct_declaration -> static_assert_declaration .)
    ATOMIC          reduce using rule 136 (struct_declaration -> static_assert_declaration .)
    ENUM            reduce using rule 136 (struct_declaration -> static_assert_declaration .)
    STRUCT          reduce using rule 136 (struct_declaration -> static_assert_declaration .)
    UNION           reduce using rule 136 (struct_declaration -> static_assert_declaration .)


state 131

    (128) struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE . struct_declaration_list RBRACE
    (132) struct_declaration_list -> . struct_declaration
    (133) struct_declaration_list -> . struct_declaration_list struct_declaration
    (134) struct_declaration -> . specifier_qualifier_list SEMICOLON
    (135) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (136) struct_declaration -> . static_assert_declaration
    (137) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (138) specifier_qualifier_list -> . type_specifier
    (139) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (140) specifier_qualifier_list -> . type_qualifier
    (233) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    STATIC_ASSERT   shift and go to state 13
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    struct_or_union                shift and go to state 42
    struct_declaration_list        shift and go to state 241
    struct_declaration             shift and go to state 128
    specifier_qualifier_list       shift and go to state 129
    static_assert_declaration      shift and go to state 130
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34

state 132

    (146) enum_specifier -> ENUM LBRACE enumerator_list . RBRACE
    (147) enum_specifier -> ENUM LBRACE enumerator_list . COMMA RBRACE
    (152) enumerator_list -> enumerator_list . COMMA enumerator

    RBRACE          shift and go to state 242
    COMMA           shift and go to state 243


state 133

    (151) enumerator_list -> enumerator .

    RBRACE          reduce using rule 151 (enumerator_list -> enumerator .)
    COMMA           reduce using rule 151 (enumerator_list -> enumerator .)


state 134

    (153) enumerator -> enumeration_constant . EQUALS constant_expression
    (154) enumerator -> enumeration_constant .

    EQUALS          shift and go to state 244
    RBRACE          reduce using rule 154 (enumerator -> enumeration_constant .)
    COMMA           reduce using rule 154 (enumerator -> enumeration_constant .)


state 135

    (9) enumeration_constant -> IDENTIFIER .

    EQUALS          reduce using rule 9 (enumeration_constant -> IDENTIFIER .)
    RBRACE          reduce using rule 9 (enumeration_constant -> IDENTIFIER .)
    COMMA           reduce using rule 9 (enumeration_constant -> IDENTIFIER .)


state 136

    (148) enum_specifier -> ENUM IDENTIFIER LBRACE . enumerator_list RBRACE
    (149) enum_specifier -> ENUM IDENTIFIER LBRACE . enumerator_list COMMA RBRACE
    (151) enumerator_list -> . enumerator
    (152) enumerator_list -> . enumerator_list COMMA enumerator
    (153) enumerator -> . enumeration_constant EQUALS constant_expression
    (154) enumerator -> . enumeration_constant
    (9) enumeration_constant -> . IDENTIFIER

    IDENTIFIER      shift and go to state 135

    enumerator_list                shift and go to state 245
    enumerator                     shift and go to state 133
    enumeration_constant           shift and go to state 134

state 137

    (104) init_declarator -> declarator . EQUALS initializer
    (105) init_declarator -> declarator .

    EQUALS          shift and go to state 70
    SEMICOLON       reduce using rule 105 (init_declarator -> declarator .)
    COMMA           reduce using rule 105 (init_declarator -> declarator .)


state 138

    (270) function_definition -> declaration_specifiers declarator declaration_list compound_statement .

    SEMICOLON       reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STATIC_ASSERT   reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    TYPEDEF         reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STATIC          reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    THREAD_LOCAL    reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    AUTO            reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOID            reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CHAR            reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SHORT           reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INT             reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LONG            reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    BOOL            reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    COMPLEX         reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    IMAGINARY       reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CONST           reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    RESTRICT        reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ATOMIC          reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INLINE          reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    NORETURN        reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ALIGNAS         reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ENUM            reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNION           reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    $end            reduce using rule 270 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)


state 139

    (273) declaration_list -> declaration_list declaration .

    LBRACE          reduce using rule 273 (declaration_list -> declaration_list declaration .)
    STATIC_ASSERT   reduce using rule 273 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 273 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 273 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 273 (declaration_list -> declaration_list declaration .)
    THREAD_LOCAL    reduce using rule 273 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 273 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 273 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 273 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 273 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 273 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 273 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 273 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 273 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 273 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 273 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 273 (declaration_list -> declaration_list declaration .)
    BOOL            reduce using rule 273 (declaration_list -> declaration_list declaration .)
    COMPLEX         reduce using rule 273 (declaration_list -> declaration_list declaration .)
    IMAGINARY       reduce using rule 273 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 273 (declaration_list -> declaration_list declaration .)
    RESTRICT        reduce using rule 273 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 273 (declaration_list -> declaration_list declaration .)
    ATOMIC          reduce using rule 273 (declaration_list -> declaration_list declaration .)
    INLINE          reduce using rule 273 (declaration_list -> declaration_list declaration .)
    NORETURN        reduce using rule 273 (declaration_list -> declaration_list declaration .)
    ALIGNAS         reduce using rule 273 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 273 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 273 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 273 (declaration_list -> declaration_list declaration .)


state 140

    (104) init_declarator -> declarator EQUALS initializer .

    SEMICOLON       reduce using rule 104 (init_declarator -> declarator EQUALS initializer .)
    COMMA           reduce using rule 104 (init_declarator -> declarator EQUALS initializer .)


state 141

    (221) initializer -> LBRACE . initializer_list RBRACE
    (222) initializer -> LBRACE . initializer_list COMMA RBRACE
    (224) initializer_list -> . designation initializer
    (225) initializer_list -> . initializer
    (226) initializer_list -> . initializer_list COMMA designation initializer
    (227) initializer_list -> . initializer_list COMMA initializer
    (228) designation -> . designator_list EQUALS
    (221) initializer -> . LBRACE initializer_list RBRACE
    (222) initializer -> . LBRACE initializer_list COMMA RBRACE
    (223) initializer -> . assignment_expression
    (229) designator_list -> . designator
    (230) designator_list -> . designator_list designator
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (231) designator -> . LBRACKET constant_expression RBRACKET
    (232) designator -> . DOT IDENTIFIER
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 141
    LBRACKET        shift and go to state 251
    DOT             shift and go to state 252
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    initializer_list               shift and go to state 246
    designation                    shift and go to state 247
    initializer                    shift and go to state 248
    designator_list                shift and go to state 249
    assignment_expression          shift and go to state 142
    designator                     shift and go to state 250
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 142

    (223) initializer -> assignment_expression .

    SEMICOLON       reduce using rule 223 (initializer -> assignment_expression .)
    COMMA           reduce using rule 223 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 223 (initializer -> assignment_expression .)


state 143

    (74) assignment_expression -> conditional_expression .

    SEMICOLON       reduce using rule 74 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 74 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 74 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 74 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 74 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 74 (assignment_expression -> conditional_expression .)


state 144

    (75) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (42) cast_expression -> unary_expression .
    (76) assignment_operator -> . EQUALS
    (77) assignment_operator -> . MUL_ASSIGN
    (78) assignment_operator -> . DIV_ASSIGN
    (79) assignment_operator -> . MOD_ASSIGN
    (80) assignment_operator -> . ADD_ASSIGN
    (81) assignment_operator -> . SUB_ASSIGN
    (82) assignment_operator -> . LEFT_ASSIGN
    (83) assignment_operator -> . RIGHT_ASSIGN
    (84) assignment_operator -> . AND_ASSIGN
    (85) assignment_operator -> . XOR_ASSIGN
    (86) assignment_operator -> . OR_ASSIGN

    TIMES           reduce using rule 42 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 42 (cast_expression -> unary_expression .)
    MOD             reduce using rule 42 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 42 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 42 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 42 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 42 (cast_expression -> unary_expression .)
    LT              reduce using rule 42 (cast_expression -> unary_expression .)
    GT              reduce using rule 42 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 42 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 42 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 42 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 42 (cast_expression -> unary_expression .)
    AND             reduce using rule 42 (cast_expression -> unary_expression .)
    XOR             reduce using rule 42 (cast_expression -> unary_expression .)
    OR              reduce using rule 42 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 42 (cast_expression -> unary_expression .)
    QUESTION        reduce using rule 42 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 42 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 42 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 42 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 42 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 42 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 42 (cast_expression -> unary_expression .)
    COLON           reduce using rule 42 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 254
    MUL_ASSIGN      shift and go to state 255
    DIV_ASSIGN      shift and go to state 256
    MOD_ASSIGN      shift and go to state 257
    ADD_ASSIGN      shift and go to state 258
    SUB_ASSIGN      shift and go to state 259
    LEFT_ASSIGN     shift and go to state 260
    RIGHT_ASSIGN    shift and go to state 261
    AND_ASSIGN      shift and go to state 262
    XOR_ASSIGN      shift and go to state 263
    OR_ASSIGN       shift and go to state 264

    assignment_operator            shift and go to state 253

state 145

    (25) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (4) primary_expression -> LPAREN . expression RPAREN
    (43) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (195) type_name -> . specifier_qualifier_list abstract_declarator
    (196) type_name -> . specifier_qualifier_list
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (137) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (138) specifier_qualifier_list -> . type_specifier
    (139) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (140) specifier_qualifier_list -> . type_qualifier
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    ENUM            shift and go to state 43
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    type_name                      shift and go to state 265
    expression                     shift and go to state 189
    cast_expression                shift and go to state 100
    specifier_qualifier_list       shift and go to state 122
    assignment_expression          shift and go to state 171
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    struct_or_union                shift and go to state 42
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 146

    (243) compound_statement -> LBRACE RBRACE .

    SEMICOLON       reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    STATIC_ASSERT   reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    TYPEDEF         reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    EXTERN          reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    STATIC          reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    THREAD_LOCAL    reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    AUTO            reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    REGISTER        reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    VOID            reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    CHAR            reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    SHORT           reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    INT             reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    LONG            reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    FLOAT           reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    SIGNED          reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    UNSIGNED        reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    BOOL            reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    COMPLEX         reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    IMAGINARY       reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    CONST           reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    RESTRICT        reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    VOLATILE        reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    ATOMIC          reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    INLINE          reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    NORETURN        reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    ALIGNAS         reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    ENUM            reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    STRUCT          reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    UNION           reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    CASE            reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    SWITCH          reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    DO              reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    GOTO            reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    INC_OP          reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    DEC_OP          reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    SIZEOF          reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    ALIGNOF         reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    AND             reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    TIMES           reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    PLUS            reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    MINUS           reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    TILDE           reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    NOT             reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    INTEGER         reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    F_CONSTANT      reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    ENUMERATION_CONSTANT reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    STRING_LITERAL  reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    FUNC_NAME       reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    GENERIC         reduce using rule 243 (compound_statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 243 (compound_statement -> LBRACE RBRACE .)


state 147

    (244) compound_statement -> LBRACE block_item_list . RBRACE
    (246) block_item_list -> block_item_list . block_item
    (247) block_item -> . declaration
    (248) block_item -> . statement
    (90) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (91) declaration -> . static_assert_declaration
    (234) statement -> . labeled_statement
    (235) statement -> . compound_statement
    (236) statement -> . expression_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (92) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (93) declaration_specifiers -> . storage_class_specifier
    (94) declaration_specifiers -> . type_specifier declaration_specifiers
    (95) declaration_specifiers -> . type_specifier
    (96) declaration_specifiers -> . type_qualifier declaration_specifiers
    (97) declaration_specifiers -> . type_qualifier
    (98) declaration_specifiers -> . function_specifier declaration_specifiers
    (99) declaration_specifiers -> . function_specifier
    (100) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (101) declaration_specifiers -> . alignment_specifier
    (233) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON
    (240) labeled_statement -> . IDENTIFIER COLON statement
    (241) labeled_statement -> . CASE constant_expression COLON statement
    (242) labeled_statement -> . DEFAULT COLON statement
    (243) compound_statement -> . LBRACE RBRACE
    (244) compound_statement -> . LBRACE block_item_list RBRACE
    (249) expression_statement -> . expression SEMICOLON
    (250) expression_statement -> . SEMICOLON
    (251) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (252) selection_statement -> . IF LPAREN expression RPAREN statement
    (253) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (260) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (261) jump_statement -> . CONTINUE SEMICOLON
    (262) jump_statement -> . BREAK SEMICOLON
    (263) jump_statement -> . RETURN SEMICOLON
    (264) jump_statement -> . RETURN expression SEMICOLON
    (106) storage_class_specifier -> . TYPEDEF
    (107) storage_class_specifier -> . EXTERN
    (108) storage_class_specifier -> . STATIC
    (109) storage_class_specifier -> . THREAD_LOCAL
    (110) storage_class_specifier -> . AUTO
    (111) storage_class_specifier -> . REGISTER
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (160) function_specifier -> . INLINE
    (161) function_specifier -> . NORETURN
    (162) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (163) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 266
    STATIC_ASSERT   shift and go to state 13
    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LBRACE          shift and go to state 72
    SEMICOLON       shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    INLINE          shift and go to state 39
    NORETURN        shift and go to state 40
    ALIGNAS         shift and go to state 41
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    block_item                     shift and go to state 267
    declaration                    shift and go to state 149
    statement                      shift and go to state 150
    declaration_specifiers         shift and go to state 67
    static_assert_declaration      shift and go to state 7
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    expression_statement           shift and go to state 154
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    expression                     shift and go to state 161
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    assignment_expression          shift and go to state 171
    struct_or_union                shift and go to state 42
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 148

    (245) block_item_list -> block_item .

    RBRACE          reduce using rule 245 (block_item_list -> block_item .)
    STATIC_ASSERT   reduce using rule 245 (block_item_list -> block_item .)
    IDENTIFIER      reduce using rule 245 (block_item_list -> block_item .)
    CASE            reduce using rule 245 (block_item_list -> block_item .)
    DEFAULT         reduce using rule 245 (block_item_list -> block_item .)
    LBRACE          reduce using rule 245 (block_item_list -> block_item .)
    SEMICOLON       reduce using rule 245 (block_item_list -> block_item .)
    IF              reduce using rule 245 (block_item_list -> block_item .)
    SWITCH          reduce using rule 245 (block_item_list -> block_item .)
    WHILE           reduce using rule 245 (block_item_list -> block_item .)
    DO              reduce using rule 245 (block_item_list -> block_item .)
    FOR             reduce using rule 245 (block_item_list -> block_item .)
    GOTO            reduce using rule 245 (block_item_list -> block_item .)
    CONTINUE        reduce using rule 245 (block_item_list -> block_item .)
    BREAK           reduce using rule 245 (block_item_list -> block_item .)
    RETURN          reduce using rule 245 (block_item_list -> block_item .)
    TYPEDEF         reduce using rule 245 (block_item_list -> block_item .)
    EXTERN          reduce using rule 245 (block_item_list -> block_item .)
    STATIC          reduce using rule 245 (block_item_list -> block_item .)
    THREAD_LOCAL    reduce using rule 245 (block_item_list -> block_item .)
    AUTO            reduce using rule 245 (block_item_list -> block_item .)
    REGISTER        reduce using rule 245 (block_item_list -> block_item .)
    VOID            reduce using rule 245 (block_item_list -> block_item .)
    CHAR            reduce using rule 245 (block_item_list -> block_item .)
    SHORT           reduce using rule 245 (block_item_list -> block_item .)
    INT             reduce using rule 245 (block_item_list -> block_item .)
    LONG            reduce using rule 245 (block_item_list -> block_item .)
    FLOAT           reduce using rule 245 (block_item_list -> block_item .)
    DOUBLE          reduce using rule 245 (block_item_list -> block_item .)
    SIGNED          reduce using rule 245 (block_item_list -> block_item .)
    UNSIGNED        reduce using rule 245 (block_item_list -> block_item .)
    BOOL            reduce using rule 245 (block_item_list -> block_item .)
    COMPLEX         reduce using rule 245 (block_item_list -> block_item .)
    IMAGINARY       reduce using rule 245 (block_item_list -> block_item .)
    CONST           reduce using rule 245 (block_item_list -> block_item .)
    RESTRICT        reduce using rule 245 (block_item_list -> block_item .)
    VOLATILE        reduce using rule 245 (block_item_list -> block_item .)
    ATOMIC          reduce using rule 245 (block_item_list -> block_item .)
    INLINE          reduce using rule 245 (block_item_list -> block_item .)
    NORETURN        reduce using rule 245 (block_item_list -> block_item .)
    ALIGNAS         reduce using rule 245 (block_item_list -> block_item .)
    ENUM            reduce using rule 245 (block_item_list -> block_item .)
    STRUCT          reduce using rule 245 (block_item_list -> block_item .)
    UNION           reduce using rule 245 (block_item_list -> block_item .)
    INC_OP          reduce using rule 245 (block_item_list -> block_item .)
    DEC_OP          reduce using rule 245 (block_item_list -> block_item .)
    SIZEOF          reduce using rule 245 (block_item_list -> block_item .)
    ALIGNOF         reduce using rule 245 (block_item_list -> block_item .)
    LPAREN          reduce using rule 245 (block_item_list -> block_item .)
    AND             reduce using rule 245 (block_item_list -> block_item .)
    TIMES           reduce using rule 245 (block_item_list -> block_item .)
    PLUS            reduce using rule 245 (block_item_list -> block_item .)
    MINUS           reduce using rule 245 (block_item_list -> block_item .)
    TILDE           reduce using rule 245 (block_item_list -> block_item .)
    NOT             reduce using rule 245 (block_item_list -> block_item .)
    INTEGER         reduce using rule 245 (block_item_list -> block_item .)
    F_CONSTANT      reduce using rule 245 (block_item_list -> block_item .)
    ENUMERATION_CONSTANT reduce using rule 245 (block_item_list -> block_item .)
    STRING_LITERAL  reduce using rule 245 (block_item_list -> block_item .)
    FUNC_NAME       reduce using rule 245 (block_item_list -> block_item .)
    GENERIC         reduce using rule 245 (block_item_list -> block_item .)


state 149

    (247) block_item -> declaration .

    RBRACE          reduce using rule 247 (block_item -> declaration .)
    STATIC_ASSERT   reduce using rule 247 (block_item -> declaration .)
    IDENTIFIER      reduce using rule 247 (block_item -> declaration .)
    CASE            reduce using rule 247 (block_item -> declaration .)
    DEFAULT         reduce using rule 247 (block_item -> declaration .)
    LBRACE          reduce using rule 247 (block_item -> declaration .)
    SEMICOLON       reduce using rule 247 (block_item -> declaration .)
    IF              reduce using rule 247 (block_item -> declaration .)
    SWITCH          reduce using rule 247 (block_item -> declaration .)
    WHILE           reduce using rule 247 (block_item -> declaration .)
    DO              reduce using rule 247 (block_item -> declaration .)
    FOR             reduce using rule 247 (block_item -> declaration .)
    GOTO            reduce using rule 247 (block_item -> declaration .)
    CONTINUE        reduce using rule 247 (block_item -> declaration .)
    BREAK           reduce using rule 247 (block_item -> declaration .)
    RETURN          reduce using rule 247 (block_item -> declaration .)
    TYPEDEF         reduce using rule 247 (block_item -> declaration .)
    EXTERN          reduce using rule 247 (block_item -> declaration .)
    STATIC          reduce using rule 247 (block_item -> declaration .)
    THREAD_LOCAL    reduce using rule 247 (block_item -> declaration .)
    AUTO            reduce using rule 247 (block_item -> declaration .)
    REGISTER        reduce using rule 247 (block_item -> declaration .)
    VOID            reduce using rule 247 (block_item -> declaration .)
    CHAR            reduce using rule 247 (block_item -> declaration .)
    SHORT           reduce using rule 247 (block_item -> declaration .)
    INT             reduce using rule 247 (block_item -> declaration .)
    LONG            reduce using rule 247 (block_item -> declaration .)
    FLOAT           reduce using rule 247 (block_item -> declaration .)
    DOUBLE          reduce using rule 247 (block_item -> declaration .)
    SIGNED          reduce using rule 247 (block_item -> declaration .)
    UNSIGNED        reduce using rule 247 (block_item -> declaration .)
    BOOL            reduce using rule 247 (block_item -> declaration .)
    COMPLEX         reduce using rule 247 (block_item -> declaration .)
    IMAGINARY       reduce using rule 247 (block_item -> declaration .)
    CONST           reduce using rule 247 (block_item -> declaration .)
    RESTRICT        reduce using rule 247 (block_item -> declaration .)
    VOLATILE        reduce using rule 247 (block_item -> declaration .)
    ATOMIC          reduce using rule 247 (block_item -> declaration .)
    INLINE          reduce using rule 247 (block_item -> declaration .)
    NORETURN        reduce using rule 247 (block_item -> declaration .)
    ALIGNAS         reduce using rule 247 (block_item -> declaration .)
    ENUM            reduce using rule 247 (block_item -> declaration .)
    STRUCT          reduce using rule 247 (block_item -> declaration .)
    UNION           reduce using rule 247 (block_item -> declaration .)
    INC_OP          reduce using rule 247 (block_item -> declaration .)
    DEC_OP          reduce using rule 247 (block_item -> declaration .)
    SIZEOF          reduce using rule 247 (block_item -> declaration .)
    ALIGNOF         reduce using rule 247 (block_item -> declaration .)
    LPAREN          reduce using rule 247 (block_item -> declaration .)
    AND             reduce using rule 247 (block_item -> declaration .)
    TIMES           reduce using rule 247 (block_item -> declaration .)
    PLUS            reduce using rule 247 (block_item -> declaration .)
    MINUS           reduce using rule 247 (block_item -> declaration .)
    TILDE           reduce using rule 247 (block_item -> declaration .)
    NOT             reduce using rule 247 (block_item -> declaration .)
    INTEGER         reduce using rule 247 (block_item -> declaration .)
    F_CONSTANT      reduce using rule 247 (block_item -> declaration .)
    ENUMERATION_CONSTANT reduce using rule 247 (block_item -> declaration .)
    STRING_LITERAL  reduce using rule 247 (block_item -> declaration .)
    FUNC_NAME       reduce using rule 247 (block_item -> declaration .)
    GENERIC         reduce using rule 247 (block_item -> declaration .)


state 150

    (248) block_item -> statement .

    RBRACE          reduce using rule 248 (block_item -> statement .)
    STATIC_ASSERT   reduce using rule 248 (block_item -> statement .)
    IDENTIFIER      reduce using rule 248 (block_item -> statement .)
    CASE            reduce using rule 248 (block_item -> statement .)
    DEFAULT         reduce using rule 248 (block_item -> statement .)
    LBRACE          reduce using rule 248 (block_item -> statement .)
    SEMICOLON       reduce using rule 248 (block_item -> statement .)
    IF              reduce using rule 248 (block_item -> statement .)
    SWITCH          reduce using rule 248 (block_item -> statement .)
    WHILE           reduce using rule 248 (block_item -> statement .)
    DO              reduce using rule 248 (block_item -> statement .)
    FOR             reduce using rule 248 (block_item -> statement .)
    GOTO            reduce using rule 248 (block_item -> statement .)
    CONTINUE        reduce using rule 248 (block_item -> statement .)
    BREAK           reduce using rule 248 (block_item -> statement .)
    RETURN          reduce using rule 248 (block_item -> statement .)
    TYPEDEF         reduce using rule 248 (block_item -> statement .)
    EXTERN          reduce using rule 248 (block_item -> statement .)
    STATIC          reduce using rule 248 (block_item -> statement .)
    THREAD_LOCAL    reduce using rule 248 (block_item -> statement .)
    AUTO            reduce using rule 248 (block_item -> statement .)
    REGISTER        reduce using rule 248 (block_item -> statement .)
    VOID            reduce using rule 248 (block_item -> statement .)
    CHAR            reduce using rule 248 (block_item -> statement .)
    SHORT           reduce using rule 248 (block_item -> statement .)
    INT             reduce using rule 248 (block_item -> statement .)
    LONG            reduce using rule 248 (block_item -> statement .)
    FLOAT           reduce using rule 248 (block_item -> statement .)
    DOUBLE          reduce using rule 248 (block_item -> statement .)
    SIGNED          reduce using rule 248 (block_item -> statement .)
    UNSIGNED        reduce using rule 248 (block_item -> statement .)
    BOOL            reduce using rule 248 (block_item -> statement .)
    COMPLEX         reduce using rule 248 (block_item -> statement .)
    IMAGINARY       reduce using rule 248 (block_item -> statement .)
    CONST           reduce using rule 248 (block_item -> statement .)
    RESTRICT        reduce using rule 248 (block_item -> statement .)
    VOLATILE        reduce using rule 248 (block_item -> statement .)
    ATOMIC          reduce using rule 248 (block_item -> statement .)
    INLINE          reduce using rule 248 (block_item -> statement .)
    NORETURN        reduce using rule 248 (block_item -> statement .)
    ALIGNAS         reduce using rule 248 (block_item -> statement .)
    ENUM            reduce using rule 248 (block_item -> statement .)
    STRUCT          reduce using rule 248 (block_item -> statement .)
    UNION           reduce using rule 248 (block_item -> statement .)
    INC_OP          reduce using rule 248 (block_item -> statement .)
    DEC_OP          reduce using rule 248 (block_item -> statement .)
    SIZEOF          reduce using rule 248 (block_item -> statement .)
    ALIGNOF         reduce using rule 248 (block_item -> statement .)
    LPAREN          reduce using rule 248 (block_item -> statement .)
    AND             reduce using rule 248 (block_item -> statement .)
    TIMES           reduce using rule 248 (block_item -> statement .)
    PLUS            reduce using rule 248 (block_item -> statement .)
    MINUS           reduce using rule 248 (block_item -> statement .)
    TILDE           reduce using rule 248 (block_item -> statement .)
    NOT             reduce using rule 248 (block_item -> statement .)
    INTEGER         reduce using rule 248 (block_item -> statement .)
    F_CONSTANT      reduce using rule 248 (block_item -> statement .)
    ENUMERATION_CONSTANT reduce using rule 248 (block_item -> statement .)
    STRING_LITERAL  reduce using rule 248 (block_item -> statement .)
    FUNC_NAME       reduce using rule 248 (block_item -> statement .)
    GENERIC         reduce using rule 248 (block_item -> statement .)


state 151

    (250) expression_statement -> SEMICOLON .

    RBRACE          reduce using rule 250 (expression_statement -> SEMICOLON .)
    STATIC_ASSERT   reduce using rule 250 (expression_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 250 (expression_statement -> SEMICOLON .)
    CASE            reduce using rule 250 (expression_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 250 (expression_statement -> SEMICOLON .)
    LBRACE          reduce using rule 250 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 250 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 250 (expression_statement -> SEMICOLON .)
    SWITCH          reduce using rule 250 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 250 (expression_statement -> SEMICOLON .)
    DO              reduce using rule 250 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 250 (expression_statement -> SEMICOLON .)
    GOTO            reduce using rule 250 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 250 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 250 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 250 (expression_statement -> SEMICOLON .)
    TYPEDEF         reduce using rule 250 (expression_statement -> SEMICOLON .)
    EXTERN          reduce using rule 250 (expression_statement -> SEMICOLON .)
    STATIC          reduce using rule 250 (expression_statement -> SEMICOLON .)
    THREAD_LOCAL    reduce using rule 250 (expression_statement -> SEMICOLON .)
    AUTO            reduce using rule 250 (expression_statement -> SEMICOLON .)
    REGISTER        reduce using rule 250 (expression_statement -> SEMICOLON .)
    VOID            reduce using rule 250 (expression_statement -> SEMICOLON .)
    CHAR            reduce using rule 250 (expression_statement -> SEMICOLON .)
    SHORT           reduce using rule 250 (expression_statement -> SEMICOLON .)
    INT             reduce using rule 250 (expression_statement -> SEMICOLON .)
    LONG            reduce using rule 250 (expression_statement -> SEMICOLON .)
    FLOAT           reduce using rule 250 (expression_statement -> SEMICOLON .)
    DOUBLE          reduce using rule 250 (expression_statement -> SEMICOLON .)
    SIGNED          reduce using rule 250 (expression_statement -> SEMICOLON .)
    UNSIGNED        reduce using rule 250 (expression_statement -> SEMICOLON .)
    BOOL            reduce using rule 250 (expression_statement -> SEMICOLON .)
    COMPLEX         reduce using rule 250 (expression_statement -> SEMICOLON .)
    IMAGINARY       reduce using rule 250 (expression_statement -> SEMICOLON .)
    CONST           reduce using rule 250 (expression_statement -> SEMICOLON .)
    RESTRICT        reduce using rule 250 (expression_statement -> SEMICOLON .)
    VOLATILE        reduce using rule 250 (expression_statement -> SEMICOLON .)
    ATOMIC          reduce using rule 250 (expression_statement -> SEMICOLON .)
    INLINE          reduce using rule 250 (expression_statement -> SEMICOLON .)
    NORETURN        reduce using rule 250 (expression_statement -> SEMICOLON .)
    ALIGNAS         reduce using rule 250 (expression_statement -> SEMICOLON .)
    ENUM            reduce using rule 250 (expression_statement -> SEMICOLON .)
    STRUCT          reduce using rule 250 (expression_statement -> SEMICOLON .)
    UNION           reduce using rule 250 (expression_statement -> SEMICOLON .)
    INC_OP          reduce using rule 250 (expression_statement -> SEMICOLON .)
    DEC_OP          reduce using rule 250 (expression_statement -> SEMICOLON .)
    SIZEOF          reduce using rule 250 (expression_statement -> SEMICOLON .)
    ALIGNOF         reduce using rule 250 (expression_statement -> SEMICOLON .)
    LPAREN          reduce using rule 250 (expression_statement -> SEMICOLON .)
    AND             reduce using rule 250 (expression_statement -> SEMICOLON .)
    TIMES           reduce using rule 250 (expression_statement -> SEMICOLON .)
    PLUS            reduce using rule 250 (expression_statement -> SEMICOLON .)
    MINUS           reduce using rule 250 (expression_statement -> SEMICOLON .)
    TILDE           reduce using rule 250 (expression_statement -> SEMICOLON .)
    NOT             reduce using rule 250 (expression_statement -> SEMICOLON .)
    INTEGER         reduce using rule 250 (expression_statement -> SEMICOLON .)
    F_CONSTANT      reduce using rule 250 (expression_statement -> SEMICOLON .)
    ENUMERATION_CONSTANT reduce using rule 250 (expression_statement -> SEMICOLON .)
    STRING_LITERAL  reduce using rule 250 (expression_statement -> SEMICOLON .)
    FUNC_NAME       reduce using rule 250 (expression_statement -> SEMICOLON .)
    GENERIC         reduce using rule 250 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 250 (expression_statement -> SEMICOLON .)
    RPAREN          reduce using rule 250 (expression_statement -> SEMICOLON .)


state 152

    (234) statement -> labeled_statement .

    RBRACE          reduce using rule 234 (statement -> labeled_statement .)
    STATIC_ASSERT   reduce using rule 234 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 234 (statement -> labeled_statement .)
    CASE            reduce using rule 234 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 234 (statement -> labeled_statement .)
    LBRACE          reduce using rule 234 (statement -> labeled_statement .)
    SEMICOLON       reduce using rule 234 (statement -> labeled_statement .)
    IF              reduce using rule 234 (statement -> labeled_statement .)
    SWITCH          reduce using rule 234 (statement -> labeled_statement .)
    WHILE           reduce using rule 234 (statement -> labeled_statement .)
    DO              reduce using rule 234 (statement -> labeled_statement .)
    FOR             reduce using rule 234 (statement -> labeled_statement .)
    GOTO            reduce using rule 234 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 234 (statement -> labeled_statement .)
    BREAK           reduce using rule 234 (statement -> labeled_statement .)
    RETURN          reduce using rule 234 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 234 (statement -> labeled_statement .)
    EXTERN          reduce using rule 234 (statement -> labeled_statement .)
    STATIC          reduce using rule 234 (statement -> labeled_statement .)
    THREAD_LOCAL    reduce using rule 234 (statement -> labeled_statement .)
    AUTO            reduce using rule 234 (statement -> labeled_statement .)
    REGISTER        reduce using rule 234 (statement -> labeled_statement .)
    VOID            reduce using rule 234 (statement -> labeled_statement .)
    CHAR            reduce using rule 234 (statement -> labeled_statement .)
    SHORT           reduce using rule 234 (statement -> labeled_statement .)
    INT             reduce using rule 234 (statement -> labeled_statement .)
    LONG            reduce using rule 234 (statement -> labeled_statement .)
    FLOAT           reduce using rule 234 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 234 (statement -> labeled_statement .)
    SIGNED          reduce using rule 234 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 234 (statement -> labeled_statement .)
    BOOL            reduce using rule 234 (statement -> labeled_statement .)
    COMPLEX         reduce using rule 234 (statement -> labeled_statement .)
    IMAGINARY       reduce using rule 234 (statement -> labeled_statement .)
    CONST           reduce using rule 234 (statement -> labeled_statement .)
    RESTRICT        reduce using rule 234 (statement -> labeled_statement .)
    VOLATILE        reduce using rule 234 (statement -> labeled_statement .)
    ATOMIC          reduce using rule 234 (statement -> labeled_statement .)
    INLINE          reduce using rule 234 (statement -> labeled_statement .)
    NORETURN        reduce using rule 234 (statement -> labeled_statement .)
    ALIGNAS         reduce using rule 234 (statement -> labeled_statement .)
    ENUM            reduce using rule 234 (statement -> labeled_statement .)
    STRUCT          reduce using rule 234 (statement -> labeled_statement .)
    UNION           reduce using rule 234 (statement -> labeled_statement .)
    INC_OP          reduce using rule 234 (statement -> labeled_statement .)
    DEC_OP          reduce using rule 234 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 234 (statement -> labeled_statement .)
    ALIGNOF         reduce using rule 234 (statement -> labeled_statement .)
    LPAREN          reduce using rule 234 (statement -> labeled_statement .)
    AND             reduce using rule 234 (statement -> labeled_statement .)
    TIMES           reduce using rule 234 (statement -> labeled_statement .)
    PLUS            reduce using rule 234 (statement -> labeled_statement .)
    MINUS           reduce using rule 234 (statement -> labeled_statement .)
    TILDE           reduce using rule 234 (statement -> labeled_statement .)
    NOT             reduce using rule 234 (statement -> labeled_statement .)
    INTEGER         reduce using rule 234 (statement -> labeled_statement .)
    F_CONSTANT      reduce using rule 234 (statement -> labeled_statement .)
    ENUMERATION_CONSTANT reduce using rule 234 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 234 (statement -> labeled_statement .)
    FUNC_NAME       reduce using rule 234 (statement -> labeled_statement .)
    GENERIC         reduce using rule 234 (statement -> labeled_statement .)
    ELSE            reduce using rule 234 (statement -> labeled_statement .)


state 153

    (235) statement -> compound_statement .

    RBRACE          reduce using rule 235 (statement -> compound_statement .)
    STATIC_ASSERT   reduce using rule 235 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 235 (statement -> compound_statement .)
    CASE            reduce using rule 235 (statement -> compound_statement .)
    DEFAULT         reduce using rule 235 (statement -> compound_statement .)
    LBRACE          reduce using rule 235 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 235 (statement -> compound_statement .)
    IF              reduce using rule 235 (statement -> compound_statement .)
    SWITCH          reduce using rule 235 (statement -> compound_statement .)
    WHILE           reduce using rule 235 (statement -> compound_statement .)
    DO              reduce using rule 235 (statement -> compound_statement .)
    FOR             reduce using rule 235 (statement -> compound_statement .)
    GOTO            reduce using rule 235 (statement -> compound_statement .)
    CONTINUE        reduce using rule 235 (statement -> compound_statement .)
    BREAK           reduce using rule 235 (statement -> compound_statement .)
    RETURN          reduce using rule 235 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 235 (statement -> compound_statement .)
    EXTERN          reduce using rule 235 (statement -> compound_statement .)
    STATIC          reduce using rule 235 (statement -> compound_statement .)
    THREAD_LOCAL    reduce using rule 235 (statement -> compound_statement .)
    AUTO            reduce using rule 235 (statement -> compound_statement .)
    REGISTER        reduce using rule 235 (statement -> compound_statement .)
    VOID            reduce using rule 235 (statement -> compound_statement .)
    CHAR            reduce using rule 235 (statement -> compound_statement .)
    SHORT           reduce using rule 235 (statement -> compound_statement .)
    INT             reduce using rule 235 (statement -> compound_statement .)
    LONG            reduce using rule 235 (statement -> compound_statement .)
    FLOAT           reduce using rule 235 (statement -> compound_statement .)
    DOUBLE          reduce using rule 235 (statement -> compound_statement .)
    SIGNED          reduce using rule 235 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 235 (statement -> compound_statement .)
    BOOL            reduce using rule 235 (statement -> compound_statement .)
    COMPLEX         reduce using rule 235 (statement -> compound_statement .)
    IMAGINARY       reduce using rule 235 (statement -> compound_statement .)
    CONST           reduce using rule 235 (statement -> compound_statement .)
    RESTRICT        reduce using rule 235 (statement -> compound_statement .)
    VOLATILE        reduce using rule 235 (statement -> compound_statement .)
    ATOMIC          reduce using rule 235 (statement -> compound_statement .)
    INLINE          reduce using rule 235 (statement -> compound_statement .)
    NORETURN        reduce using rule 235 (statement -> compound_statement .)
    ALIGNAS         reduce using rule 235 (statement -> compound_statement .)
    ENUM            reduce using rule 235 (statement -> compound_statement .)
    STRUCT          reduce using rule 235 (statement -> compound_statement .)
    UNION           reduce using rule 235 (statement -> compound_statement .)
    INC_OP          reduce using rule 235 (statement -> compound_statement .)
    DEC_OP          reduce using rule 235 (statement -> compound_statement .)
    SIZEOF          reduce using rule 235 (statement -> compound_statement .)
    ALIGNOF         reduce using rule 235 (statement -> compound_statement .)
    LPAREN          reduce using rule 235 (statement -> compound_statement .)
    AND             reduce using rule 235 (statement -> compound_statement .)
    TIMES           reduce using rule 235 (statement -> compound_statement .)
    PLUS            reduce using rule 235 (statement -> compound_statement .)
    MINUS           reduce using rule 235 (statement -> compound_statement .)
    TILDE           reduce using rule 235 (statement -> compound_statement .)
    NOT             reduce using rule 235 (statement -> compound_statement .)
    INTEGER         reduce using rule 235 (statement -> compound_statement .)
    F_CONSTANT      reduce using rule 235 (statement -> compound_statement .)
    ENUMERATION_CONSTANT reduce using rule 235 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 235 (statement -> compound_statement .)
    FUNC_NAME       reduce using rule 235 (statement -> compound_statement .)
    GENERIC         reduce using rule 235 (statement -> compound_statement .)
    ELSE            reduce using rule 235 (statement -> compound_statement .)


state 154

    (236) statement -> expression_statement .

    RBRACE          reduce using rule 236 (statement -> expression_statement .)
    STATIC_ASSERT   reduce using rule 236 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 236 (statement -> expression_statement .)
    CASE            reduce using rule 236 (statement -> expression_statement .)
    DEFAULT         reduce using rule 236 (statement -> expression_statement .)
    LBRACE          reduce using rule 236 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 236 (statement -> expression_statement .)
    IF              reduce using rule 236 (statement -> expression_statement .)
    SWITCH          reduce using rule 236 (statement -> expression_statement .)
    WHILE           reduce using rule 236 (statement -> expression_statement .)
    DO              reduce using rule 236 (statement -> expression_statement .)
    FOR             reduce using rule 236 (statement -> expression_statement .)
    GOTO            reduce using rule 236 (statement -> expression_statement .)
    CONTINUE        reduce using rule 236 (statement -> expression_statement .)
    BREAK           reduce using rule 236 (statement -> expression_statement .)
    RETURN          reduce using rule 236 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 236 (statement -> expression_statement .)
    EXTERN          reduce using rule 236 (statement -> expression_statement .)
    STATIC          reduce using rule 236 (statement -> expression_statement .)
    THREAD_LOCAL    reduce using rule 236 (statement -> expression_statement .)
    AUTO            reduce using rule 236 (statement -> expression_statement .)
    REGISTER        reduce using rule 236 (statement -> expression_statement .)
    VOID            reduce using rule 236 (statement -> expression_statement .)
    CHAR            reduce using rule 236 (statement -> expression_statement .)
    SHORT           reduce using rule 236 (statement -> expression_statement .)
    INT             reduce using rule 236 (statement -> expression_statement .)
    LONG            reduce using rule 236 (statement -> expression_statement .)
    FLOAT           reduce using rule 236 (statement -> expression_statement .)
    DOUBLE          reduce using rule 236 (statement -> expression_statement .)
    SIGNED          reduce using rule 236 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 236 (statement -> expression_statement .)
    BOOL            reduce using rule 236 (statement -> expression_statement .)
    COMPLEX         reduce using rule 236 (statement -> expression_statement .)
    IMAGINARY       reduce using rule 236 (statement -> expression_statement .)
    CONST           reduce using rule 236 (statement -> expression_statement .)
    RESTRICT        reduce using rule 236 (statement -> expression_statement .)
    VOLATILE        reduce using rule 236 (statement -> expression_statement .)
    ATOMIC          reduce using rule 236 (statement -> expression_statement .)
    INLINE          reduce using rule 236 (statement -> expression_statement .)
    NORETURN        reduce using rule 236 (statement -> expression_statement .)
    ALIGNAS         reduce using rule 236 (statement -> expression_statement .)
    ENUM            reduce using rule 236 (statement -> expression_statement .)
    STRUCT          reduce using rule 236 (statement -> expression_statement .)
    UNION           reduce using rule 236 (statement -> expression_statement .)
    INC_OP          reduce using rule 236 (statement -> expression_statement .)
    DEC_OP          reduce using rule 236 (statement -> expression_statement .)
    SIZEOF          reduce using rule 236 (statement -> expression_statement .)
    ALIGNOF         reduce using rule 236 (statement -> expression_statement .)
    LPAREN          reduce using rule 236 (statement -> expression_statement .)
    AND             reduce using rule 236 (statement -> expression_statement .)
    TIMES           reduce using rule 236 (statement -> expression_statement .)
    PLUS            reduce using rule 236 (statement -> expression_statement .)
    MINUS           reduce using rule 236 (statement -> expression_statement .)
    TILDE           reduce using rule 236 (statement -> expression_statement .)
    NOT             reduce using rule 236 (statement -> expression_statement .)
    INTEGER         reduce using rule 236 (statement -> expression_statement .)
    F_CONSTANT      reduce using rule 236 (statement -> expression_statement .)
    ENUMERATION_CONSTANT reduce using rule 236 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 236 (statement -> expression_statement .)
    FUNC_NAME       reduce using rule 236 (statement -> expression_statement .)
    GENERIC         reduce using rule 236 (statement -> expression_statement .)
    ELSE            reduce using rule 236 (statement -> expression_statement .)


state 155

    (237) statement -> selection_statement .

    RBRACE          reduce using rule 237 (statement -> selection_statement .)
    STATIC_ASSERT   reduce using rule 237 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 237 (statement -> selection_statement .)
    CASE            reduce using rule 237 (statement -> selection_statement .)
    DEFAULT         reduce using rule 237 (statement -> selection_statement .)
    LBRACE          reduce using rule 237 (statement -> selection_statement .)
    SEMICOLON       reduce using rule 237 (statement -> selection_statement .)
    IF              reduce using rule 237 (statement -> selection_statement .)
    SWITCH          reduce using rule 237 (statement -> selection_statement .)
    WHILE           reduce using rule 237 (statement -> selection_statement .)
    DO              reduce using rule 237 (statement -> selection_statement .)
    FOR             reduce using rule 237 (statement -> selection_statement .)
    GOTO            reduce using rule 237 (statement -> selection_statement .)
    CONTINUE        reduce using rule 237 (statement -> selection_statement .)
    BREAK           reduce using rule 237 (statement -> selection_statement .)
    RETURN          reduce using rule 237 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 237 (statement -> selection_statement .)
    EXTERN          reduce using rule 237 (statement -> selection_statement .)
    STATIC          reduce using rule 237 (statement -> selection_statement .)
    THREAD_LOCAL    reduce using rule 237 (statement -> selection_statement .)
    AUTO            reduce using rule 237 (statement -> selection_statement .)
    REGISTER        reduce using rule 237 (statement -> selection_statement .)
    VOID            reduce using rule 237 (statement -> selection_statement .)
    CHAR            reduce using rule 237 (statement -> selection_statement .)
    SHORT           reduce using rule 237 (statement -> selection_statement .)
    INT             reduce using rule 237 (statement -> selection_statement .)
    LONG            reduce using rule 237 (statement -> selection_statement .)
    FLOAT           reduce using rule 237 (statement -> selection_statement .)
    DOUBLE          reduce using rule 237 (statement -> selection_statement .)
    SIGNED          reduce using rule 237 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 237 (statement -> selection_statement .)
    BOOL            reduce using rule 237 (statement -> selection_statement .)
    COMPLEX         reduce using rule 237 (statement -> selection_statement .)
    IMAGINARY       reduce using rule 237 (statement -> selection_statement .)
    CONST           reduce using rule 237 (statement -> selection_statement .)
    RESTRICT        reduce using rule 237 (statement -> selection_statement .)
    VOLATILE        reduce using rule 237 (statement -> selection_statement .)
    ATOMIC          reduce using rule 237 (statement -> selection_statement .)
    INLINE          reduce using rule 237 (statement -> selection_statement .)
    NORETURN        reduce using rule 237 (statement -> selection_statement .)
    ALIGNAS         reduce using rule 237 (statement -> selection_statement .)
    ENUM            reduce using rule 237 (statement -> selection_statement .)
    STRUCT          reduce using rule 237 (statement -> selection_statement .)
    UNION           reduce using rule 237 (statement -> selection_statement .)
    INC_OP          reduce using rule 237 (statement -> selection_statement .)
    DEC_OP          reduce using rule 237 (statement -> selection_statement .)
    SIZEOF          reduce using rule 237 (statement -> selection_statement .)
    ALIGNOF         reduce using rule 237 (statement -> selection_statement .)
    LPAREN          reduce using rule 237 (statement -> selection_statement .)
    AND             reduce using rule 237 (statement -> selection_statement .)
    TIMES           reduce using rule 237 (statement -> selection_statement .)
    PLUS            reduce using rule 237 (statement -> selection_statement .)
    MINUS           reduce using rule 237 (statement -> selection_statement .)
    TILDE           reduce using rule 237 (statement -> selection_statement .)
    NOT             reduce using rule 237 (statement -> selection_statement .)
    INTEGER         reduce using rule 237 (statement -> selection_statement .)
    F_CONSTANT      reduce using rule 237 (statement -> selection_statement .)
    ENUMERATION_CONSTANT reduce using rule 237 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 237 (statement -> selection_statement .)
    FUNC_NAME       reduce using rule 237 (statement -> selection_statement .)
    GENERIC         reduce using rule 237 (statement -> selection_statement .)
    ELSE            reduce using rule 237 (statement -> selection_statement .)


state 156

    (238) statement -> iteration_statement .

    RBRACE          reduce using rule 238 (statement -> iteration_statement .)
    STATIC_ASSERT   reduce using rule 238 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 238 (statement -> iteration_statement .)
    CASE            reduce using rule 238 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 238 (statement -> iteration_statement .)
    LBRACE          reduce using rule 238 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 238 (statement -> iteration_statement .)
    IF              reduce using rule 238 (statement -> iteration_statement .)
    SWITCH          reduce using rule 238 (statement -> iteration_statement .)
    WHILE           reduce using rule 238 (statement -> iteration_statement .)
    DO              reduce using rule 238 (statement -> iteration_statement .)
    FOR             reduce using rule 238 (statement -> iteration_statement .)
    GOTO            reduce using rule 238 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 238 (statement -> iteration_statement .)
    BREAK           reduce using rule 238 (statement -> iteration_statement .)
    RETURN          reduce using rule 238 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 238 (statement -> iteration_statement .)
    EXTERN          reduce using rule 238 (statement -> iteration_statement .)
    STATIC          reduce using rule 238 (statement -> iteration_statement .)
    THREAD_LOCAL    reduce using rule 238 (statement -> iteration_statement .)
    AUTO            reduce using rule 238 (statement -> iteration_statement .)
    REGISTER        reduce using rule 238 (statement -> iteration_statement .)
    VOID            reduce using rule 238 (statement -> iteration_statement .)
    CHAR            reduce using rule 238 (statement -> iteration_statement .)
    SHORT           reduce using rule 238 (statement -> iteration_statement .)
    INT             reduce using rule 238 (statement -> iteration_statement .)
    LONG            reduce using rule 238 (statement -> iteration_statement .)
    FLOAT           reduce using rule 238 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 238 (statement -> iteration_statement .)
    SIGNED          reduce using rule 238 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 238 (statement -> iteration_statement .)
    BOOL            reduce using rule 238 (statement -> iteration_statement .)
    COMPLEX         reduce using rule 238 (statement -> iteration_statement .)
    IMAGINARY       reduce using rule 238 (statement -> iteration_statement .)
    CONST           reduce using rule 238 (statement -> iteration_statement .)
    RESTRICT        reduce using rule 238 (statement -> iteration_statement .)
    VOLATILE        reduce using rule 238 (statement -> iteration_statement .)
    ATOMIC          reduce using rule 238 (statement -> iteration_statement .)
    INLINE          reduce using rule 238 (statement -> iteration_statement .)
    NORETURN        reduce using rule 238 (statement -> iteration_statement .)
    ALIGNAS         reduce using rule 238 (statement -> iteration_statement .)
    ENUM            reduce using rule 238 (statement -> iteration_statement .)
    STRUCT          reduce using rule 238 (statement -> iteration_statement .)
    UNION           reduce using rule 238 (statement -> iteration_statement .)
    INC_OP          reduce using rule 238 (statement -> iteration_statement .)
    DEC_OP          reduce using rule 238 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 238 (statement -> iteration_statement .)
    ALIGNOF         reduce using rule 238 (statement -> iteration_statement .)
    LPAREN          reduce using rule 238 (statement -> iteration_statement .)
    AND             reduce using rule 238 (statement -> iteration_statement .)
    TIMES           reduce using rule 238 (statement -> iteration_statement .)
    PLUS            reduce using rule 238 (statement -> iteration_statement .)
    MINUS           reduce using rule 238 (statement -> iteration_statement .)
    TILDE           reduce using rule 238 (statement -> iteration_statement .)
    NOT             reduce using rule 238 (statement -> iteration_statement .)
    INTEGER         reduce using rule 238 (statement -> iteration_statement .)
    F_CONSTANT      reduce using rule 238 (statement -> iteration_statement .)
    ENUMERATION_CONSTANT reduce using rule 238 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 238 (statement -> iteration_statement .)
    FUNC_NAME       reduce using rule 238 (statement -> iteration_statement .)
    GENERIC         reduce using rule 238 (statement -> iteration_statement .)
    ELSE            reduce using rule 238 (statement -> iteration_statement .)


state 157

    (239) statement -> jump_statement .

    RBRACE          reduce using rule 239 (statement -> jump_statement .)
    STATIC_ASSERT   reduce using rule 239 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 239 (statement -> jump_statement .)
    CASE            reduce using rule 239 (statement -> jump_statement .)
    DEFAULT         reduce using rule 239 (statement -> jump_statement .)
    LBRACE          reduce using rule 239 (statement -> jump_statement .)
    SEMICOLON       reduce using rule 239 (statement -> jump_statement .)
    IF              reduce using rule 239 (statement -> jump_statement .)
    SWITCH          reduce using rule 239 (statement -> jump_statement .)
    WHILE           reduce using rule 239 (statement -> jump_statement .)
    DO              reduce using rule 239 (statement -> jump_statement .)
    FOR             reduce using rule 239 (statement -> jump_statement .)
    GOTO            reduce using rule 239 (statement -> jump_statement .)
    CONTINUE        reduce using rule 239 (statement -> jump_statement .)
    BREAK           reduce using rule 239 (statement -> jump_statement .)
    RETURN          reduce using rule 239 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 239 (statement -> jump_statement .)
    EXTERN          reduce using rule 239 (statement -> jump_statement .)
    STATIC          reduce using rule 239 (statement -> jump_statement .)
    THREAD_LOCAL    reduce using rule 239 (statement -> jump_statement .)
    AUTO            reduce using rule 239 (statement -> jump_statement .)
    REGISTER        reduce using rule 239 (statement -> jump_statement .)
    VOID            reduce using rule 239 (statement -> jump_statement .)
    CHAR            reduce using rule 239 (statement -> jump_statement .)
    SHORT           reduce using rule 239 (statement -> jump_statement .)
    INT             reduce using rule 239 (statement -> jump_statement .)
    LONG            reduce using rule 239 (statement -> jump_statement .)
    FLOAT           reduce using rule 239 (statement -> jump_statement .)
    DOUBLE          reduce using rule 239 (statement -> jump_statement .)
    SIGNED          reduce using rule 239 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 239 (statement -> jump_statement .)
    BOOL            reduce using rule 239 (statement -> jump_statement .)
    COMPLEX         reduce using rule 239 (statement -> jump_statement .)
    IMAGINARY       reduce using rule 239 (statement -> jump_statement .)
    CONST           reduce using rule 239 (statement -> jump_statement .)
    RESTRICT        reduce using rule 239 (statement -> jump_statement .)
    VOLATILE        reduce using rule 239 (statement -> jump_statement .)
    ATOMIC          reduce using rule 239 (statement -> jump_statement .)
    INLINE          reduce using rule 239 (statement -> jump_statement .)
    NORETURN        reduce using rule 239 (statement -> jump_statement .)
    ALIGNAS         reduce using rule 239 (statement -> jump_statement .)
    ENUM            reduce using rule 239 (statement -> jump_statement .)
    STRUCT          reduce using rule 239 (statement -> jump_statement .)
    UNION           reduce using rule 239 (statement -> jump_statement .)
    INC_OP          reduce using rule 239 (statement -> jump_statement .)
    DEC_OP          reduce using rule 239 (statement -> jump_statement .)
    SIZEOF          reduce using rule 239 (statement -> jump_statement .)
    ALIGNOF         reduce using rule 239 (statement -> jump_statement .)
    LPAREN          reduce using rule 239 (statement -> jump_statement .)
    AND             reduce using rule 239 (statement -> jump_statement .)
    TIMES           reduce using rule 239 (statement -> jump_statement .)
    PLUS            reduce using rule 239 (statement -> jump_statement .)
    MINUS           reduce using rule 239 (statement -> jump_statement .)
    TILDE           reduce using rule 239 (statement -> jump_statement .)
    NOT             reduce using rule 239 (statement -> jump_statement .)
    INTEGER         reduce using rule 239 (statement -> jump_statement .)
    F_CONSTANT      reduce using rule 239 (statement -> jump_statement .)
    ENUMERATION_CONSTANT reduce using rule 239 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 239 (statement -> jump_statement .)
    FUNC_NAME       reduce using rule 239 (statement -> jump_statement .)
    GENERIC         reduce using rule 239 (statement -> jump_statement .)
    ELSE            reduce using rule 239 (statement -> jump_statement .)


state 158

    (240) labeled_statement -> IDENTIFIER . COLON statement
    (1) primary_expression -> IDENTIFIER .

    COLON           shift and go to state 268
    LBRACKET        reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LPAREN          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    DOT             reduce using rule 1 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    INC_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    DEC_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    EQUALS          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 1 (primary_expression -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 1 (primary_expression -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 1 (primary_expression -> IDENTIFIER .)
    TIMES           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    MOD             reduce using rule 1 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 1 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LEFT_OP         reduce using rule 1 (primary_expression -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LT              reduce using rule 1 (primary_expression -> IDENTIFIER .)
    GT              reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    AND             reduce using rule 1 (primary_expression -> IDENTIFIER .)
    XOR             reduce using rule 1 (primary_expression -> IDENTIFIER .)
    OR              reduce using rule 1 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    QUESTION        reduce using rule 1 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 1 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 1 (primary_expression -> IDENTIFIER .)


state 159

    (241) labeled_statement -> CASE . constant_expression COLON statement
    (89) constant_expression -> . conditional_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    constant_expression            shift and go to state 269
    conditional_expression         shift and go to state 86
    logical_or_expression          shift and go to state 87
    logical_and_expression         shift and go to state 88
    inclusive_or_expression        shift and go to state 89
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 160

    (242) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 270


state 161

    (249) expression_statement -> expression . SEMICOLON
    (88) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 271
    COMMA           shift and go to state 272


state 162

    (251) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement
    (252) selection_statement -> IF . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 273


state 163

    (253) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 274


state 164

    (254) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 275


state 165

    (255) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMICOLON
    (234) statement -> . labeled_statement
    (235) statement -> . compound_statement
    (236) statement -> . expression_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) labeled_statement -> . IDENTIFIER COLON statement
    (241) labeled_statement -> . CASE constant_expression COLON statement
    (242) labeled_statement -> . DEFAULT COLON statement
    (243) compound_statement -> . LBRACE RBRACE
    (244) compound_statement -> . LBRACE block_item_list RBRACE
    (249) expression_statement -> . expression SEMICOLON
    (250) expression_statement -> . SEMICOLON
    (251) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (252) selection_statement -> . IF LPAREN expression RPAREN statement
    (253) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (260) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (261) jump_statement -> . CONTINUE SEMICOLON
    (262) jump_statement -> . BREAK SEMICOLON
    (263) jump_statement -> . RETURN SEMICOLON
    (264) jump_statement -> . RETURN expression SEMICOLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LBRACE          shift and go to state 72
    SEMICOLON       shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    statement                      shift and go to state 276
    expression                     shift and go to state 161
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    expression_statement           shift and go to state 154
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 166

    (256) iteration_statement -> FOR . LPAREN expression_statement expression_statement RPAREN statement
    (257) iteration_statement -> FOR . LPAREN expression_statement expression_statement expression RPAREN statement
    (258) iteration_statement -> FOR . LPAREN declaration expression_statement RPAREN statement
    (259) iteration_statement -> FOR . LPAREN declaration expression_statement expression RPAREN statement

    LPAREN          shift and go to state 277


state 167

    (260) jump_statement -> GOTO . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 278


state 168

    (261) jump_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 279


state 169

    (262) jump_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 280


state 170

    (263) jump_statement -> RETURN . SEMICOLON
    (264) jump_statement -> RETURN . expression SEMICOLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 281
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression                     shift and go to state 282
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 171

    (87) expression -> assignment_expression .

    SEMICOLON       reduce using rule 87 (expression -> assignment_expression .)
    COMMA           reduce using rule 87 (expression -> assignment_expression .)
    RPAREN          reduce using rule 87 (expression -> assignment_expression .)
    COLON           reduce using rule 87 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 87 (expression -> assignment_expression .)


state 172

    (103) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMICOLON       reduce using rule 103 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 103 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 173

    (168) direct_declarator -> direct_declarator LBRACKET RBRACKET .

    LBRACKET        reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    LPAREN          reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    EQUALS          reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    LBRACE          reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    STATIC_ASSERT   reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    TYPEDEF         reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    EXTERN          reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    STATIC          reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    THREAD_LOCAL    reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    AUTO            reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    REGISTER        reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    VOID            reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    CHAR            reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    SHORT           reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    INT             reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    LONG            reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    FLOAT           reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    DOUBLE          reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    SIGNED          reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    UNSIGNED        reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    BOOL            reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    COMPLEX         reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    IMAGINARY       reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    CONST           reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    RESTRICT        reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    VOLATILE        reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    ATOMIC          reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    INLINE          reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    NORETURN        reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    ALIGNAS         reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    ENUM            reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    STRUCT          reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    UNION           reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    COMMA           reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    RPAREN          reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    COLON           reduce using rule 168 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)


state 174

    (169) direct_declarator -> direct_declarator LBRACKET TIMES . RBRACKET
    (37) unary_operator -> TIMES .

    RBRACKET        shift and go to state 283
    LPAREN          reduce using rule 37 (unary_operator -> TIMES .)
    INC_OP          reduce using rule 37 (unary_operator -> TIMES .)
    DEC_OP          reduce using rule 37 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 37 (unary_operator -> TIMES .)
    ALIGNOF         reduce using rule 37 (unary_operator -> TIMES .)
    AND             reduce using rule 37 (unary_operator -> TIMES .)
    TIMES           reduce using rule 37 (unary_operator -> TIMES .)
    PLUS            reduce using rule 37 (unary_operator -> TIMES .)
    MINUS           reduce using rule 37 (unary_operator -> TIMES .)
    TILDE           reduce using rule 37 (unary_operator -> TIMES .)
    NOT             reduce using rule 37 (unary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 37 (unary_operator -> TIMES .)
    INTEGER         reduce using rule 37 (unary_operator -> TIMES .)
    F_CONSTANT      reduce using rule 37 (unary_operator -> TIMES .)
    ENUMERATION_CONSTANT reduce using rule 37 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 37 (unary_operator -> TIMES .)
    FUNC_NAME       reduce using rule 37 (unary_operator -> TIMES .)
    GENERIC         reduce using rule 37 (unary_operator -> TIMES .)


state 175

    (170) direct_declarator -> direct_declarator LBRACKET STATIC . type_qualifier_list assignment_expression RBRACKET
    (171) direct_declarator -> direct_declarator LBRACKET STATIC . assignment_expression RBRACKET
    (184) type_qualifier_list -> . type_qualifier
    (185) type_qualifier_list -> . type_qualifier_list type_qualifier
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 81
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    type_qualifier_list            shift and go to state 284
    assignment_expression          shift and go to state 285
    type_qualifier                 shift and go to state 80
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 176

    (172) direct_declarator -> direct_declarator LBRACKET type_qualifier_list . TIMES RBRACKET
    (173) direct_declarator -> direct_declarator LBRACKET type_qualifier_list . STATIC assignment_expression RBRACKET
    (174) direct_declarator -> direct_declarator LBRACKET type_qualifier_list . assignment_expression RBRACKET
    (175) direct_declarator -> direct_declarator LBRACKET type_qualifier_list . RBRACKET
    (185) type_qualifier_list -> type_qualifier_list . type_qualifier
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    TIMES           shift and go to state 286
    STATIC          shift and go to state 288
    RBRACKET        shift and go to state 287
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 81
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 289
    type_qualifier                 shift and go to state 186
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 177

    (176) direct_declarator -> direct_declarator LBRACKET assignment_expression . RBRACKET

    RBRACKET        shift and go to state 290


state 178

    (177) direct_declarator -> direct_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 291


state 179

    (178) direct_declarator -> direct_declarator LPAREN RPAREN .

    LBRACKET        reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EQUALS          reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LBRACE          reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    STATIC_ASSERT   reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    TYPEDEF         reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EXTERN          reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    STATIC          reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    THREAD_LOCAL    reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    AUTO            reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    REGISTER        reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOID            reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    CHAR            reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SHORT           reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    INT             reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LONG            reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    FLOAT           reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    DOUBLE          reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SIGNED          reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    UNSIGNED        reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    BOOL            reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMPLEX         reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    IMAGINARY       reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    CONST           reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    RESTRICT        reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOLATILE        reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    ATOMIC          reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    INLINE          reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    NORETURN        reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    ALIGNAS         reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    ENUM            reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    STRUCT          reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    UNION           reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SEMICOLON       reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COLON           reduce using rule 178 (direct_declarator -> direct_declarator LPAREN RPAREN .)


state 180

    (179) direct_declarator -> direct_declarator LPAREN identifier_list . RPAREN
    (194) identifier_list -> identifier_list . COMMA IDENTIFIER

    RPAREN          shift and go to state 292
    COMMA           shift and go to state 293


state 181

    (186) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (187) parameter_type_list -> parameter_list .
    (189) parameter_list -> parameter_list . COMMA parameter_declaration

    COMMA           shift and go to state 294
    RPAREN          reduce using rule 187 (parameter_type_list -> parameter_list .)


state 182

    (193) identifier_list -> IDENTIFIER .

    RPAREN          reduce using rule 193 (identifier_list -> IDENTIFIER .)
    COMMA           reduce using rule 193 (identifier_list -> IDENTIFIER .)


state 183

    (188) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 188 (parameter_list -> parameter_declaration .)
    RPAREN          reduce using rule 188 (parameter_list -> parameter_declaration .)


state 184

    (190) parameter_declaration -> declaration_specifiers . declarator
    (191) parameter_declaration -> declaration_specifiers . abstract_declarator
    (192) parameter_declaration -> declaration_specifiers .
    (164) declarator -> . pointer direct_declarator
    (165) declarator -> . direct_declarator
    (197) abstract_declarator -> . pointer direct_abstract_declarator
    (198) abstract_declarator -> . pointer
    (199) abstract_declarator -> . direct_abstract_declarator
    (180) pointer -> . TIMES type_qualifier_list pointer
    (181) pointer -> . TIMES type_qualifier_list
    (182) pointer -> . TIMES pointer
    (183) pointer -> . TIMES
    (166) direct_declarator -> . IDENTIFIER
    (167) direct_declarator -> . LPAREN declarator RPAREN
    (168) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (169) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (170) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (171) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (172) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (173) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (174) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (175) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (176) direct_declarator -> . direct_declarator LBRACKET assignment_expression RBRACKET
    (177) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (178) direct_declarator -> . direct_declarator LPAREN RPAREN
    (179) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (200) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (201) direct_abstract_declarator -> . LBRACKET RBRACKET
    (202) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (203) direct_abstract_declarator -> . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (204) direct_abstract_declarator -> . LBRACKET STATIC assignment_expression RBRACKET
    (205) direct_abstract_declarator -> . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (206) direct_abstract_declarator -> . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (207) direct_abstract_declarator -> . LBRACKET type_qualifier_list RBRACKET
    (208) direct_abstract_declarator -> . LBRACKET assignment_expression RBRACKET
    (209) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (210) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (211) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (212) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (214) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET
    (216) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression RBRACKET
    (217) direct_abstract_declarator -> . LPAREN RPAREN
    (218) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (219) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (220) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 192 (parameter_declaration -> declaration_specifiers .)
    RPAREN          reduce using rule 192 (parameter_declaration -> declaration_specifiers .)
    TIMES           shift and go to state 52
    IDENTIFIER      shift and go to state 53
    LPAREN          shift and go to state 298
    LBRACKET        shift and go to state 229

    declarator                     shift and go to state 295
    abstract_declarator            shift and go to state 296
    pointer                        shift and go to state 297
    direct_declarator              shift and go to state 50
    direct_abstract_declarator     shift and go to state 227

state 185

    (180) pointer -> TIMES type_qualifier_list pointer .

    IDENTIFIER      reduce using rule 180 (pointer -> TIMES type_qualifier_list pointer .)
    LPAREN          reduce using rule 180 (pointer -> TIMES type_qualifier_list pointer .)
    LBRACKET        reduce using rule 180 (pointer -> TIMES type_qualifier_list pointer .)
    RPAREN          reduce using rule 180 (pointer -> TIMES type_qualifier_list pointer .)
    COLON           reduce using rule 180 (pointer -> TIMES type_qualifier_list pointer .)
    COMMA           reduce using rule 180 (pointer -> TIMES type_qualifier_list pointer .)


state 186

    (185) type_qualifier_list -> type_qualifier_list type_qualifier .

    TIMES           reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RESTRICT        reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ATOMIC          reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    IDENTIFIER      reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LPAREN          reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LBRACKET        reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RPAREN          reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COLON           reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COMMA           reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STATIC          reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RBRACKET        reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INC_OP          reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    DEC_OP          reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    SIZEOF          reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ALIGNOF         reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    AND             reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    PLUS            reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    MINUS           reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    TILDE           reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    NOT             reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INTEGER         reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    F_CONSTANT      reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ENUMERATION_CONSTANT reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STRING_LITERAL  reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    FUNC_NAME       reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    GENERIC         reduce using rule 185 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 187

    (167) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    STATIC_ASSERT   reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEDEF         reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    EXTERN          reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    STATIC          reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    THREAD_LOCAL    reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    AUTO            reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    REGISTER        reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    SHORT           reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    LONG            reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    DOUBLE          reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    SIGNED          reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    UNSIGNED        reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    BOOL            reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    COMPLEX         reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    IMAGINARY       reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    CONST           reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    RESTRICT        reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    VOLATILE        reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    ATOMIC          reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    INLINE          reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    NORETURN        reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    ALIGNAS         reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    ENUM            reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    STRUCT          reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    UNION           reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMICOLON       reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)
    COLON           reduce using rule 167 (direct_declarator -> LPAREN declarator RPAREN .)


state 188

    (43) cast_expression -> LPAREN type_name . RPAREN cast_expression
    (25) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list COMMA RBRACE

    RPAREN          shift and go to state 299


state 189

    (4) primary_expression -> LPAREN expression . RPAREN
    (88) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 300
    COMMA           shift and go to state 272


state 190

    (233) static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA . STRING_LITERAL RPAREN SEMICOLON

    STRING_LITERAL  shift and go to state 301


state 191

    (73) conditional_expression -> logical_or_expression QUESTION . expression COLON conditional_expression
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    logical_or_expression          shift and go to state 87
    expression                     shift and go to state 302
    conditional_expression         shift and go to state 143
    assignment_expression          shift and go to state 171
    unary_expression               shift and go to state 144
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 192

    (71) logical_or_expression -> logical_or_expression OR_OP . logical_and_expression
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    logical_and_expression         shift and go to state 303
    inclusive_or_expression        shift and go to state 89
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 193

    (69) logical_and_expression -> logical_and_expression AND_OP . inclusive_or_expression
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    inclusive_or_expression        shift and go to state 304
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 194

    (67) inclusive_or_expression -> inclusive_or_expression OR . exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    exclusive_or_expression        shift and go to state 305
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 195

    (65) exclusive_or_expression -> exclusive_or_expression XOR . and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    and_expression                 shift and go to state 306
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 196

    (63) and_expression -> and_expression AND . equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    equality_expression            shift and go to state 307
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 197

    (60) equality_expression -> equality_expression EQ_OP . relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    relational_expression          shift and go to state 308
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 198

    (61) equality_expression -> equality_expression NE_OP . relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    relational_expression          shift and go to state 309
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 199

    (55) relational_expression -> relational_expression LT . shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    shift_expression               shift and go to state 310
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 200

    (56) relational_expression -> relational_expression GT . shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    shift_expression               shift and go to state 311
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 201

    (57) relational_expression -> relational_expression LE_OP . shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    shift_expression               shift and go to state 312
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 202

    (58) relational_expression -> relational_expression GE_OP . shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    shift_expression               shift and go to state 313
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 203

    (52) shift_expression -> shift_expression LEFT_OP . additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    additive_expression            shift and go to state 314
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 204

    (53) shift_expression -> shift_expression RIGHT_OP . additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    additive_expression            shift and go to state 315
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 205

    (49) additive_expression -> additive_expression PLUS . multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    multiplicative_expression      shift and go to state 316
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 206

    (50) additive_expression -> additive_expression MINUS . multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    multiplicative_expression      shift and go to state 317
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 207

    (45) multiplicative_expression -> multiplicative_expression TIMES . cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    cast_expression                shift and go to state 318
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 208

    (46) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    cast_expression                shift and go to state 319
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 209

    (47) multiplicative_expression -> multiplicative_expression MOD . cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    cast_expression                shift and go to state 320
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 210

    (18) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    postfix_expression             shift and go to state 103
    expression                     shift and go to state 321
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 211

    (19) postfix_expression -> postfix_expression LPAREN . RPAREN
    (20) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (27) argument_expression_list -> . assignment_expression
    (28) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 322
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    postfix_expression             shift and go to state 103
    argument_expression_list       shift and go to state 323
    assignment_expression          shift and go to state 324
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 212

    (21) postfix_expression -> postfix_expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 325


state 213

    (22) postfix_expression -> postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER      shift and go to state 326


state 214

    (23) postfix_expression -> postfix_expression INC_OP .

    LBRACKET        reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    LPAREN          reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    DOT             reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    PTR_OP          reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    INC_OP          reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    DEC_OP          reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    TIMES           reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    DIVIDE          reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    MOD             reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    PLUS            reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    MINUS           reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_OP         reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_OP        reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    LT              reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    GT              reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    LE_OP           reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    GE_OP           reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    EQ_OP           reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    NE_OP           reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    AND             reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    XOR             reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    OR              reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    AND_OP          reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    QUESTION        reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    OR_OP           reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    COMMA           reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    RPAREN          reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    EQUALS          reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    MUL_ASSIGN      reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    DIV_ASSIGN      reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    MOD_ASSIGN      reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    ADD_ASSIGN      reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    SUB_ASSIGN      reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_ASSIGN     reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_ASSIGN    reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    AND_ASSIGN      reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    XOR_ASSIGN      reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    OR_ASSIGN       reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    SEMICOLON       reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    RBRACKET        reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    RBRACE          reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)
    COLON           reduce using rule 23 (postfix_expression -> postfix_expression INC_OP .)


state 215

    (24) postfix_expression -> postfix_expression DEC_OP .

    LBRACKET        reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    LPAREN          reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    DOT             reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    PTR_OP          reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    INC_OP          reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    DEC_OP          reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    TIMES           reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    DIVIDE          reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    MOD             reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    PLUS            reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    MINUS           reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_OP         reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_OP        reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    LT              reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    GT              reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    LE_OP           reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    GE_OP           reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    EQ_OP           reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    NE_OP           reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    AND             reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    XOR             reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    OR              reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    AND_OP          reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    QUESTION        reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    OR_OP           reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    COMMA           reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    RPAREN          reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    EQUALS          reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    MUL_ASSIGN      reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    DIV_ASSIGN      reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    MOD_ASSIGN      reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    ADD_ASSIGN      reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    SUB_ASSIGN      reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_ASSIGN     reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_ASSIGN    reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    AND_ASSIGN      reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    XOR_ASSIGN      reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    OR_ASSIGN       reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    SEMICOLON       reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    RBRACKET        reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    RBRACE          reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)
    COLON           reduce using rule 24 (postfix_expression -> postfix_expression DEC_OP .)


state 216

    (30) unary_expression -> INC_OP unary_expression .

    TIMES           reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    DIVIDE          reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    MOD             reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    PLUS            reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    MINUS           reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    LEFT_OP         reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    RIGHT_OP        reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    LT              reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    GT              reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    LE_OP           reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    GE_OP           reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    EQ_OP           reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    NE_OP           reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    AND             reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    XOR             reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    OR              reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    AND_OP          reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    QUESTION        reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    OR_OP           reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    COMMA           reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    RPAREN          reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    EQUALS          reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    SEMICOLON       reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    RBRACKET        reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    RBRACE          reduce using rule 30 (unary_expression -> INC_OP unary_expression .)
    COLON           reduce using rule 30 (unary_expression -> INC_OP unary_expression .)


state 217

    (25) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (4) primary_expression -> LPAREN . expression RPAREN
    (195) type_name -> . specifier_qualifier_list abstract_declarator
    (196) type_name -> . specifier_qualifier_list
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (137) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (138) specifier_qualifier_list -> . type_specifier
    (139) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (140) specifier_qualifier_list -> . type_qualifier
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    ENUM            shift and go to state 43
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    type_name                      shift and go to state 327
    expression                     shift and go to state 189
    specifier_qualifier_list       shift and go to state 122
    assignment_expression          shift and go to state 171
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    struct_or_union                shift and go to state 42
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 218

    (31) unary_expression -> DEC_OP unary_expression .

    TIMES           reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    DIVIDE          reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    MOD             reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    PLUS            reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    MINUS           reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    LEFT_OP         reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_OP        reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    LT              reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    GT              reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    LE_OP           reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    GE_OP           reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    EQ_OP           reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    NE_OP           reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    AND             reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    XOR             reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    OR              reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    AND_OP          reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    QUESTION        reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    OR_OP           reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    COMMA           reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    RPAREN          reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    EQUALS          reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    SEMICOLON       reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    RBRACKET        reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    RBRACE          reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)
    COLON           reduce using rule 31 (unary_expression -> DEC_OP unary_expression .)


state 219

    (32) unary_expression -> unary_operator cast_expression .

    TIMES           reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    LEFT_OP         reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    RIGHT_OP        reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    LE_OP           reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    GE_OP           reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    EQ_OP           reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    NE_OP           reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    XOR             reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    AND_OP          reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    QUESTION        reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    OR_OP           reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    EQUALS          reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    MUL_ASSIGN      reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    DIV_ASSIGN      reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    MOD_ASSIGN      reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    ADD_ASSIGN      reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    SUB_ASSIGN      reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    LEFT_ASSIGN     reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    RIGHT_ASSIGN    reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    AND_ASSIGN      reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    XOR_ASSIGN      reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    OR_ASSIGN       reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    SEMICOLON       reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 32 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 32 (unary_expression -> unary_operator cast_expression .)


state 220

    (33) unary_expression -> SIZEOF unary_expression .

    TIMES           reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    MOD             reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    LEFT_OP         reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_OP        reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    LT              reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    GT              reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    LE_OP           reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    GE_OP           reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    EQ_OP           reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    NE_OP           reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    AND             reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    XOR             reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    OR              reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    AND_OP          reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    QUESTION        reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    OR_OP           reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    EQUALS          reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    MUL_ASSIGN      reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    DIV_ASSIGN      reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    MOD_ASSIGN      reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    ADD_ASSIGN      reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    SUB_ASSIGN      reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    LEFT_ASSIGN     reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_ASSIGN    reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    AND_ASSIGN      reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    XOR_ASSIGN      reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    OR_ASSIGN       reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    SEMICOLON       reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    RBRACKET        reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    RBRACE          reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 33 (unary_expression -> SIZEOF unary_expression .)


state 221

    (34) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (25) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (4) primary_expression -> LPAREN . expression RPAREN
    (195) type_name -> . specifier_qualifier_list abstract_declarator
    (196) type_name -> . specifier_qualifier_list
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (137) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (138) specifier_qualifier_list -> . type_specifier
    (139) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (140) specifier_qualifier_list -> . type_qualifier
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    ENUM            shift and go to state 43
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    type_name                      shift and go to state 328
    expression                     shift and go to state 189
    specifier_qualifier_list       shift and go to state 122
    assignment_expression          shift and go to state 171
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    struct_or_union                shift and go to state 42
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 222

    (35) unary_expression -> ALIGNOF LPAREN . type_name RPAREN
    (195) type_name -> . specifier_qualifier_list abstract_declarator
    (196) type_name -> . specifier_qualifier_list
    (137) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (138) specifier_qualifier_list -> . type_specifier
    (139) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (140) specifier_qualifier_list -> . type_qualifier
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    type_name                      shift and go to state 329
    specifier_qualifier_list       shift and go to state 122
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 42

state 223

    (12) generic_selection -> GENERIC LPAREN . assignment_expression COMMA generic_assoc_list RPAREN
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 330
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 224

    (155) atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .

    TYPEDEF         reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    EXTERN          reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    STATIC          reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    THREAD_LOCAL    reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    AUTO            reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    REGISTER        reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    VOID            reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    CHAR            reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    SHORT           reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    INT             reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    LONG            reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    FLOAT           reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    DOUBLE          reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    SIGNED          reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    UNSIGNED        reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    BOOL            reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    COMPLEX         reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    IMAGINARY       reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    CONST           reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    RESTRICT        reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    VOLATILE        reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    ATOMIC          reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    INLINE          reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    NORETURN        reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    ALIGNAS         reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    ENUM            reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    STRUCT          reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    UNION           reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    TIMES           reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    IDENTIFIER      reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    LPAREN          reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    LBRACKET        reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    COMMA           reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    COLON           reduce using rule 155 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)


state 225

    (195) type_name -> specifier_qualifier_list abstract_declarator .

    RPAREN          reduce using rule 195 (type_name -> specifier_qualifier_list abstract_declarator .)
    COLON           reduce using rule 195 (type_name -> specifier_qualifier_list abstract_declarator .)


state 226

    (197) abstract_declarator -> pointer . direct_abstract_declarator
    (198) abstract_declarator -> pointer .
    (200) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (201) direct_abstract_declarator -> . LBRACKET RBRACKET
    (202) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (203) direct_abstract_declarator -> . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (204) direct_abstract_declarator -> . LBRACKET STATIC assignment_expression RBRACKET
    (205) direct_abstract_declarator -> . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (206) direct_abstract_declarator -> . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (207) direct_abstract_declarator -> . LBRACKET type_qualifier_list RBRACKET
    (208) direct_abstract_declarator -> . LBRACKET assignment_expression RBRACKET
    (209) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (210) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (211) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (212) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (214) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET
    (216) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression RBRACKET
    (217) direct_abstract_declarator -> . LPAREN RPAREN
    (218) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (219) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (220) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 198 (abstract_declarator -> pointer .)
    COLON           reduce using rule 198 (abstract_declarator -> pointer .)
    LPAREN          shift and go to state 228
    LBRACKET        shift and go to state 229

    direct_abstract_declarator     shift and go to state 331

state 227

    (199) abstract_declarator -> direct_abstract_declarator .
    (209) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET RBRACKET
    (210) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET TIMES RBRACKET
    (211) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (212) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET STATIC assignment_expression RBRACKET
    (213) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (214) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (215) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET type_qualifier_list RBRACKET
    (216) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET assignment_expression RBRACKET
    (219) direct_abstract_declarator -> direct_abstract_declarator . LPAREN RPAREN
    (220) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 199 (abstract_declarator -> direct_abstract_declarator .)
    COLON           reduce using rule 199 (abstract_declarator -> direct_abstract_declarator .)
    COMMA           reduce using rule 199 (abstract_declarator -> direct_abstract_declarator .)
    LBRACKET        shift and go to state 332
    LPAREN          shift and go to state 333


state 228

    (200) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (217) direct_abstract_declarator -> LPAREN . RPAREN
    (218) direct_abstract_declarator -> LPAREN . parameter_type_list RPAREN
    (197) abstract_declarator -> . pointer direct_abstract_declarator
    (198) abstract_declarator -> . pointer
    (199) abstract_declarator -> . direct_abstract_declarator
    (186) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (187) parameter_type_list -> . parameter_list
    (180) pointer -> . TIMES type_qualifier_list pointer
    (181) pointer -> . TIMES type_qualifier_list
    (182) pointer -> . TIMES pointer
    (183) pointer -> . TIMES
    (200) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (201) direct_abstract_declarator -> . LBRACKET RBRACKET
    (202) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (203) direct_abstract_declarator -> . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (204) direct_abstract_declarator -> . LBRACKET STATIC assignment_expression RBRACKET
    (205) direct_abstract_declarator -> . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (206) direct_abstract_declarator -> . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (207) direct_abstract_declarator -> . LBRACKET type_qualifier_list RBRACKET
    (208) direct_abstract_declarator -> . LBRACKET assignment_expression RBRACKET
    (209) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (210) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (211) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (212) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (214) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET
    (216) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression RBRACKET
    (217) direct_abstract_declarator -> . LPAREN RPAREN
    (218) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (219) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (220) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN
    (188) parameter_list -> . parameter_declaration
    (189) parameter_list -> . parameter_list COMMA parameter_declaration
    (190) parameter_declaration -> . declaration_specifiers declarator
    (191) parameter_declaration -> . declaration_specifiers abstract_declarator
    (192) parameter_declaration -> . declaration_specifiers
    (92) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (93) declaration_specifiers -> . storage_class_specifier
    (94) declaration_specifiers -> . type_specifier declaration_specifiers
    (95) declaration_specifiers -> . type_specifier
    (96) declaration_specifiers -> . type_qualifier declaration_specifiers
    (97) declaration_specifiers -> . type_qualifier
    (98) declaration_specifiers -> . function_specifier declaration_specifiers
    (99) declaration_specifiers -> . function_specifier
    (100) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (101) declaration_specifiers -> . alignment_specifier
    (106) storage_class_specifier -> . TYPEDEF
    (107) storage_class_specifier -> . EXTERN
    (108) storage_class_specifier -> . STATIC
    (109) storage_class_specifier -> . THREAD_LOCAL
    (110) storage_class_specifier -> . AUTO
    (111) storage_class_specifier -> . REGISTER
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (160) function_specifier -> . INLINE
    (161) function_specifier -> . NORETURN
    (162) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (163) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    RPAREN          shift and go to state 335
    TIMES           shift and go to state 52
    LPAREN          shift and go to state 228
    LBRACKET        shift and go to state 229
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    INLINE          shift and go to state 39
    NORETURN        shift and go to state 40
    ALIGNAS         shift and go to state 41
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    abstract_declarator            shift and go to state 334
    parameter_type_list            shift and go to state 336
    pointer                        shift and go to state 226
    direct_abstract_declarator     shift and go to state 227
    parameter_list                 shift and go to state 181
    parameter_declaration          shift and go to state 183
    declaration_specifiers         shift and go to state 184
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 42

state 229

    (201) direct_abstract_declarator -> LBRACKET . RBRACKET
    (202) direct_abstract_declarator -> LBRACKET . TIMES RBRACKET
    (203) direct_abstract_declarator -> LBRACKET . STATIC type_qualifier_list assignment_expression RBRACKET
    (204) direct_abstract_declarator -> LBRACKET . STATIC assignment_expression RBRACKET
    (205) direct_abstract_declarator -> LBRACKET . type_qualifier_list STATIC assignment_expression RBRACKET
    (206) direct_abstract_declarator -> LBRACKET . type_qualifier_list assignment_expression RBRACKET
    (207) direct_abstract_declarator -> LBRACKET . type_qualifier_list RBRACKET
    (208) direct_abstract_declarator -> LBRACKET . assignment_expression RBRACKET
    (184) type_qualifier_list -> . type_qualifier
    (185) type_qualifier_list -> . type_qualifier_list type_qualifier
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACKET        shift and go to state 337
    TIMES           shift and go to state 338
    STATIC          shift and go to state 339
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 81
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    type_qualifier_list            shift and go to state 340
    assignment_expression          shift and go to state 341
    type_qualifier                 shift and go to state 80
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 230

    (137) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    TIMES           reduce using rule 137 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LPAREN          reduce using rule 137 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LBRACKET        reduce using rule 137 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    RPAREN          reduce using rule 137 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    SEMICOLON       reduce using rule 137 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    COLON           reduce using rule 137 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 137 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 231

    (139) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .

    TIMES           reduce using rule 139 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    LPAREN          reduce using rule 139 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    LBRACKET        reduce using rule 139 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    RPAREN          reduce using rule 139 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    SEMICOLON       reduce using rule 139 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    COLON           reduce using rule 139 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 139 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)


state 232

    (162) alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .

    TYPEDEF         reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    EXTERN          reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    STATIC          reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    THREAD_LOCAL    reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    AUTO            reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    REGISTER        reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    VOID            reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    CHAR            reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    SHORT           reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    INT             reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    LONG            reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    FLOAT           reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    DOUBLE          reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    SIGNED          reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    UNSIGNED        reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    BOOL            reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    COMPLEX         reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    IMAGINARY       reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    CONST           reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    RESTRICT        reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    VOLATILE        reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    ATOMIC          reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    INLINE          reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    NORETURN        reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    ALIGNAS         reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    ENUM            reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    STRUCT          reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    UNION           reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    TIMES           reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    IDENTIFIER      reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    LPAREN          reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    LBRACKET        reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    COMMA           reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 162 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)


state 233

    (163) alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .

    TYPEDEF         reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    EXTERN          reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    STATIC          reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    THREAD_LOCAL    reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    AUTO            reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    REGISTER        reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    VOID            reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    CHAR            reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    SHORT           reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    INT             reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    LONG            reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    FLOAT           reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    DOUBLE          reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    SIGNED          reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    UNSIGNED        reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    BOOL            reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    COMPLEX         reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    IMAGINARY       reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    CONST           reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    RESTRICT        reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    VOLATILE        reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    ATOMIC          reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    INLINE          reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    NORETURN        reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    ALIGNAS         reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    ENUM            reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    STRUCT          reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    UNION           reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    TIMES           reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    IDENTIFIER      reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    LPAREN          reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    LBRACKET        reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    COMMA           reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    RPAREN          reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)


state 234

    (127) struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .

    TYPEDEF         reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    EXTERN          reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    STATIC          reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    THREAD_LOCAL    reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    AUTO            reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    REGISTER        reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    VOID            reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    CHAR            reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SHORT           reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    INT             reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LONG            reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    FLOAT           reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    DOUBLE          reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SIGNED          reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    UNSIGNED        reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    BOOL            reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    COMPLEX         reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    IMAGINARY       reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    CONST           reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    RESTRICT        reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    VOLATILE        reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    ATOMIC          reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    INLINE          reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    NORETURN        reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    ALIGNAS         reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    ENUM            reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    STRUCT          reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    UNION           reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    TIMES           reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    IDENTIFIER      reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LPAREN          reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LBRACKET        reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    COMMA           reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    RPAREN          reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SEMICOLON       reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    COLON           reduce using rule 127 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)


state 235

    (133) struct_declaration_list -> struct_declaration_list struct_declaration .

    RBRACE          reduce using rule 133 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STATIC_ASSERT   reduce using rule 133 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 133 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 133 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 133 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 133 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 133 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 133 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 133 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 133 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 133 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    BOOL            reduce using rule 133 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    COMPLEX         reduce using rule 133 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    IMAGINARY       reduce using rule 133 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 133 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    RESTRICT        reduce using rule 133 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 133 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ATOMIC          reduce using rule 133 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 133 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 133 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 133 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 236

    (134) struct_declaration -> specifier_qualifier_list SEMICOLON .

    RBRACE          reduce using rule 134 (struct_declaration -> specifier_qualifier_list SEMICOLON .)
    STATIC_ASSERT   reduce using rule 134 (struct_declaration -> specifier_qualifier_list SEMICOLON .)
    VOID            reduce using rule 134 (struct_declaration -> specifier_qualifier_list SEMICOLON .)
    CHAR            reduce using rule 134 (struct_declaration -> specifier_qualifier_list SEMICOLON .)
    SHORT           reduce using rule 134 (struct_declaration -> specifier_qualifier_list SEMICOLON .)
    INT             reduce using rule 134 (struct_declaration -> specifier_qualifier_list SEMICOLON .)
    LONG            reduce using rule 134 (struct_declaration -> specifier_qualifier_list SEMICOLON .)
    FLOAT           reduce using rule 134 (struct_declaration -> specifier_qualifier_list SEMICOLON .)
    DOUBLE          reduce using rule 134 (struct_declaration -> specifier_qualifier_list SEMICOLON .)
    SIGNED          reduce using rule 134 (struct_declaration -> specifier_qualifier_list SEMICOLON .)
    UNSIGNED        reduce using rule 134 (struct_declaration -> specifier_qualifier_list SEMICOLON .)
    BOOL            reduce using rule 134 (struct_declaration -> specifier_qualifier_list SEMICOLON .)
    COMPLEX         reduce using rule 134 (struct_declaration -> specifier_qualifier_list SEMICOLON .)
    IMAGINARY       reduce using rule 134 (struct_declaration -> specifier_qualifier_list SEMICOLON .)
    CONST           reduce using rule 134 (struct_declaration -> specifier_qualifier_list SEMICOLON .)
    RESTRICT        reduce using rule 134 (struct_declaration -> specifier_qualifier_list SEMICOLON .)
    VOLATILE        reduce using rule 134 (struct_declaration -> specifier_qualifier_list SEMICOLON .)
    ATOMIC          reduce using rule 134 (struct_declaration -> specifier_qualifier_list SEMICOLON .)
    ENUM            reduce using rule 134 (struct_declaration -> specifier_qualifier_list SEMICOLON .)
    STRUCT          reduce using rule 134 (struct_declaration -> specifier_qualifier_list SEMICOLON .)
    UNION           reduce using rule 134 (struct_declaration -> specifier_qualifier_list SEMICOLON .)


state 237

    (135) struct_declaration -> specifier_qualifier_list struct_declarator_list . SEMICOLON
    (142) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SEMICOLON       shift and go to state 342
    COMMA           shift and go to state 343


state 238

    (141) struct_declarator_list -> struct_declarator .

    SEMICOLON       reduce using rule 141 (struct_declarator_list -> struct_declarator .)
    COMMA           reduce using rule 141 (struct_declarator_list -> struct_declarator .)


state 239

    (143) struct_declarator -> COLON . constant_expression
    (89) constant_expression -> . conditional_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    constant_expression            shift and go to state 344
    conditional_expression         shift and go to state 86
    logical_or_expression          shift and go to state 87
    logical_and_expression         shift and go to state 88
    inclusive_or_expression        shift and go to state 89
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 240

    (144) struct_declarator -> declarator . COLON constant_expression
    (145) struct_declarator -> declarator .

    COLON           shift and go to state 345
    SEMICOLON       reduce using rule 145 (struct_declarator -> declarator .)
    COMMA           reduce using rule 145 (struct_declarator -> declarator .)


state 241

    (128) struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list . RBRACE
    (133) struct_declaration_list -> struct_declaration_list . struct_declaration
    (134) struct_declaration -> . specifier_qualifier_list SEMICOLON
    (135) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (136) struct_declaration -> . static_assert_declaration
    (137) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (138) specifier_qualifier_list -> . type_specifier
    (139) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (140) specifier_qualifier_list -> . type_qualifier
    (233) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    RBRACE          shift and go to state 346
    STATIC_ASSERT   shift and go to state 13
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    struct_or_union                shift and go to state 42
    struct_declaration             shift and go to state 235
    specifier_qualifier_list       shift and go to state 129
    static_assert_declaration      shift and go to state 130
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34

state 242

    (146) enum_specifier -> ENUM LBRACE enumerator_list RBRACE .

    TYPEDEF         reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    EXTERN          reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    STATIC          reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    THREAD_LOCAL    reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    AUTO            reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    REGISTER        reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    VOID            reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    CHAR            reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SHORT           reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    INT             reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LONG            reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    FLOAT           reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    DOUBLE          reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SIGNED          reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    UNSIGNED        reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    BOOL            reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    COMPLEX         reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    IMAGINARY       reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    CONST           reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    RESTRICT        reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    VOLATILE        reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    ATOMIC          reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    INLINE          reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    NORETURN        reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    ALIGNAS         reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    ENUM            reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    STRUCT          reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    UNION           reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    TIMES           reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    IDENTIFIER      reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LPAREN          reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LBRACKET        reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    COMMA           reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    RPAREN          reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SEMICOLON       reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    COLON           reduce using rule 146 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)


state 243

    (147) enum_specifier -> ENUM LBRACE enumerator_list COMMA . RBRACE
    (152) enumerator_list -> enumerator_list COMMA . enumerator
    (153) enumerator -> . enumeration_constant EQUALS constant_expression
    (154) enumerator -> . enumeration_constant
    (9) enumeration_constant -> . IDENTIFIER

    RBRACE          shift and go to state 347
    IDENTIFIER      shift and go to state 135

    enumerator                     shift and go to state 348
    enumeration_constant           shift and go to state 134

state 244

    (153) enumerator -> enumeration_constant EQUALS . constant_expression
    (89) constant_expression -> . conditional_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    constant_expression            shift and go to state 349
    conditional_expression         shift and go to state 86
    logical_or_expression          shift and go to state 87
    logical_and_expression         shift and go to state 88
    inclusive_or_expression        shift and go to state 89
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 245

    (148) enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list . RBRACE
    (149) enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list . COMMA RBRACE
    (152) enumerator_list -> enumerator_list . COMMA enumerator

    RBRACE          shift and go to state 350
    COMMA           shift and go to state 351


state 246

    (221) initializer -> LBRACE initializer_list . RBRACE
    (222) initializer -> LBRACE initializer_list . COMMA RBRACE
    (226) initializer_list -> initializer_list . COMMA designation initializer
    (227) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 352
    COMMA           shift and go to state 353


state 247

    (224) initializer_list -> designation . initializer
    (221) initializer -> . LBRACE initializer_list RBRACE
    (222) initializer -> . LBRACE initializer_list COMMA RBRACE
    (223) initializer -> . assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 141
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    initializer                    shift and go to state 354
    assignment_expression          shift and go to state 142
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 248

    (225) initializer_list -> initializer .

    RBRACE          reduce using rule 225 (initializer_list -> initializer .)
    COMMA           reduce using rule 225 (initializer_list -> initializer .)


state 249

    (228) designation -> designator_list . EQUALS
    (230) designator_list -> designator_list . designator
    (231) designator -> . LBRACKET constant_expression RBRACKET
    (232) designator -> . DOT IDENTIFIER

    EQUALS          shift and go to state 355
    LBRACKET        shift and go to state 251
    DOT             shift and go to state 252

    designator                     shift and go to state 356

state 250

    (229) designator_list -> designator .

    EQUALS          reduce using rule 229 (designator_list -> designator .)
    LBRACKET        reduce using rule 229 (designator_list -> designator .)
    DOT             reduce using rule 229 (designator_list -> designator .)


state 251

    (231) designator -> LBRACKET . constant_expression RBRACKET
    (89) constant_expression -> . conditional_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    constant_expression            shift and go to state 357
    conditional_expression         shift and go to state 86
    logical_or_expression          shift and go to state 87
    logical_and_expression         shift and go to state 88
    inclusive_or_expression        shift and go to state 89
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 252

    (232) designator -> DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 358


state 253

    (75) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    unary_expression               shift and go to state 144
    assignment_expression          shift and go to state 359
    conditional_expression         shift and go to state 143
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 254

    (76) assignment_operator -> EQUALS .

    INC_OP          reduce using rule 76 (assignment_operator -> EQUALS .)
    DEC_OP          reduce using rule 76 (assignment_operator -> EQUALS .)
    SIZEOF          reduce using rule 76 (assignment_operator -> EQUALS .)
    ALIGNOF         reduce using rule 76 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 76 (assignment_operator -> EQUALS .)
    AND             reduce using rule 76 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 76 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 76 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 76 (assignment_operator -> EQUALS .)
    TILDE           reduce using rule 76 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 76 (assignment_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 76 (assignment_operator -> EQUALS .)
    INTEGER         reduce using rule 76 (assignment_operator -> EQUALS .)
    F_CONSTANT      reduce using rule 76 (assignment_operator -> EQUALS .)
    ENUMERATION_CONSTANT reduce using rule 76 (assignment_operator -> EQUALS .)
    STRING_LITERAL  reduce using rule 76 (assignment_operator -> EQUALS .)
    FUNC_NAME       reduce using rule 76 (assignment_operator -> EQUALS .)
    GENERIC         reduce using rule 76 (assignment_operator -> EQUALS .)


state 255

    (77) assignment_operator -> MUL_ASSIGN .

    INC_OP          reduce using rule 77 (assignment_operator -> MUL_ASSIGN .)
    DEC_OP          reduce using rule 77 (assignment_operator -> MUL_ASSIGN .)
    SIZEOF          reduce using rule 77 (assignment_operator -> MUL_ASSIGN .)
    ALIGNOF         reduce using rule 77 (assignment_operator -> MUL_ASSIGN .)
    LPAREN          reduce using rule 77 (assignment_operator -> MUL_ASSIGN .)
    AND             reduce using rule 77 (assignment_operator -> MUL_ASSIGN .)
    TIMES           reduce using rule 77 (assignment_operator -> MUL_ASSIGN .)
    PLUS            reduce using rule 77 (assignment_operator -> MUL_ASSIGN .)
    MINUS           reduce using rule 77 (assignment_operator -> MUL_ASSIGN .)
    TILDE           reduce using rule 77 (assignment_operator -> MUL_ASSIGN .)
    NOT             reduce using rule 77 (assignment_operator -> MUL_ASSIGN .)
    IDENTIFIER      reduce using rule 77 (assignment_operator -> MUL_ASSIGN .)
    INTEGER         reduce using rule 77 (assignment_operator -> MUL_ASSIGN .)
    F_CONSTANT      reduce using rule 77 (assignment_operator -> MUL_ASSIGN .)
    ENUMERATION_CONSTANT reduce using rule 77 (assignment_operator -> MUL_ASSIGN .)
    STRING_LITERAL  reduce using rule 77 (assignment_operator -> MUL_ASSIGN .)
    FUNC_NAME       reduce using rule 77 (assignment_operator -> MUL_ASSIGN .)
    GENERIC         reduce using rule 77 (assignment_operator -> MUL_ASSIGN .)


state 256

    (78) assignment_operator -> DIV_ASSIGN .

    INC_OP          reduce using rule 78 (assignment_operator -> DIV_ASSIGN .)
    DEC_OP          reduce using rule 78 (assignment_operator -> DIV_ASSIGN .)
    SIZEOF          reduce using rule 78 (assignment_operator -> DIV_ASSIGN .)
    ALIGNOF         reduce using rule 78 (assignment_operator -> DIV_ASSIGN .)
    LPAREN          reduce using rule 78 (assignment_operator -> DIV_ASSIGN .)
    AND             reduce using rule 78 (assignment_operator -> DIV_ASSIGN .)
    TIMES           reduce using rule 78 (assignment_operator -> DIV_ASSIGN .)
    PLUS            reduce using rule 78 (assignment_operator -> DIV_ASSIGN .)
    MINUS           reduce using rule 78 (assignment_operator -> DIV_ASSIGN .)
    TILDE           reduce using rule 78 (assignment_operator -> DIV_ASSIGN .)
    NOT             reduce using rule 78 (assignment_operator -> DIV_ASSIGN .)
    IDENTIFIER      reduce using rule 78 (assignment_operator -> DIV_ASSIGN .)
    INTEGER         reduce using rule 78 (assignment_operator -> DIV_ASSIGN .)
    F_CONSTANT      reduce using rule 78 (assignment_operator -> DIV_ASSIGN .)
    ENUMERATION_CONSTANT reduce using rule 78 (assignment_operator -> DIV_ASSIGN .)
    STRING_LITERAL  reduce using rule 78 (assignment_operator -> DIV_ASSIGN .)
    FUNC_NAME       reduce using rule 78 (assignment_operator -> DIV_ASSIGN .)
    GENERIC         reduce using rule 78 (assignment_operator -> DIV_ASSIGN .)


state 257

    (79) assignment_operator -> MOD_ASSIGN .

    INC_OP          reduce using rule 79 (assignment_operator -> MOD_ASSIGN .)
    DEC_OP          reduce using rule 79 (assignment_operator -> MOD_ASSIGN .)
    SIZEOF          reduce using rule 79 (assignment_operator -> MOD_ASSIGN .)
    ALIGNOF         reduce using rule 79 (assignment_operator -> MOD_ASSIGN .)
    LPAREN          reduce using rule 79 (assignment_operator -> MOD_ASSIGN .)
    AND             reduce using rule 79 (assignment_operator -> MOD_ASSIGN .)
    TIMES           reduce using rule 79 (assignment_operator -> MOD_ASSIGN .)
    PLUS            reduce using rule 79 (assignment_operator -> MOD_ASSIGN .)
    MINUS           reduce using rule 79 (assignment_operator -> MOD_ASSIGN .)
    TILDE           reduce using rule 79 (assignment_operator -> MOD_ASSIGN .)
    NOT             reduce using rule 79 (assignment_operator -> MOD_ASSIGN .)
    IDENTIFIER      reduce using rule 79 (assignment_operator -> MOD_ASSIGN .)
    INTEGER         reduce using rule 79 (assignment_operator -> MOD_ASSIGN .)
    F_CONSTANT      reduce using rule 79 (assignment_operator -> MOD_ASSIGN .)
    ENUMERATION_CONSTANT reduce using rule 79 (assignment_operator -> MOD_ASSIGN .)
    STRING_LITERAL  reduce using rule 79 (assignment_operator -> MOD_ASSIGN .)
    FUNC_NAME       reduce using rule 79 (assignment_operator -> MOD_ASSIGN .)
    GENERIC         reduce using rule 79 (assignment_operator -> MOD_ASSIGN .)


state 258

    (80) assignment_operator -> ADD_ASSIGN .

    INC_OP          reduce using rule 80 (assignment_operator -> ADD_ASSIGN .)
    DEC_OP          reduce using rule 80 (assignment_operator -> ADD_ASSIGN .)
    SIZEOF          reduce using rule 80 (assignment_operator -> ADD_ASSIGN .)
    ALIGNOF         reduce using rule 80 (assignment_operator -> ADD_ASSIGN .)
    LPAREN          reduce using rule 80 (assignment_operator -> ADD_ASSIGN .)
    AND             reduce using rule 80 (assignment_operator -> ADD_ASSIGN .)
    TIMES           reduce using rule 80 (assignment_operator -> ADD_ASSIGN .)
    PLUS            reduce using rule 80 (assignment_operator -> ADD_ASSIGN .)
    MINUS           reduce using rule 80 (assignment_operator -> ADD_ASSIGN .)
    TILDE           reduce using rule 80 (assignment_operator -> ADD_ASSIGN .)
    NOT             reduce using rule 80 (assignment_operator -> ADD_ASSIGN .)
    IDENTIFIER      reduce using rule 80 (assignment_operator -> ADD_ASSIGN .)
    INTEGER         reduce using rule 80 (assignment_operator -> ADD_ASSIGN .)
    F_CONSTANT      reduce using rule 80 (assignment_operator -> ADD_ASSIGN .)
    ENUMERATION_CONSTANT reduce using rule 80 (assignment_operator -> ADD_ASSIGN .)
    STRING_LITERAL  reduce using rule 80 (assignment_operator -> ADD_ASSIGN .)
    FUNC_NAME       reduce using rule 80 (assignment_operator -> ADD_ASSIGN .)
    GENERIC         reduce using rule 80 (assignment_operator -> ADD_ASSIGN .)


state 259

    (81) assignment_operator -> SUB_ASSIGN .

    INC_OP          reduce using rule 81 (assignment_operator -> SUB_ASSIGN .)
    DEC_OP          reduce using rule 81 (assignment_operator -> SUB_ASSIGN .)
    SIZEOF          reduce using rule 81 (assignment_operator -> SUB_ASSIGN .)
    ALIGNOF         reduce using rule 81 (assignment_operator -> SUB_ASSIGN .)
    LPAREN          reduce using rule 81 (assignment_operator -> SUB_ASSIGN .)
    AND             reduce using rule 81 (assignment_operator -> SUB_ASSIGN .)
    TIMES           reduce using rule 81 (assignment_operator -> SUB_ASSIGN .)
    PLUS            reduce using rule 81 (assignment_operator -> SUB_ASSIGN .)
    MINUS           reduce using rule 81 (assignment_operator -> SUB_ASSIGN .)
    TILDE           reduce using rule 81 (assignment_operator -> SUB_ASSIGN .)
    NOT             reduce using rule 81 (assignment_operator -> SUB_ASSIGN .)
    IDENTIFIER      reduce using rule 81 (assignment_operator -> SUB_ASSIGN .)
    INTEGER         reduce using rule 81 (assignment_operator -> SUB_ASSIGN .)
    F_CONSTANT      reduce using rule 81 (assignment_operator -> SUB_ASSIGN .)
    ENUMERATION_CONSTANT reduce using rule 81 (assignment_operator -> SUB_ASSIGN .)
    STRING_LITERAL  reduce using rule 81 (assignment_operator -> SUB_ASSIGN .)
    FUNC_NAME       reduce using rule 81 (assignment_operator -> SUB_ASSIGN .)
    GENERIC         reduce using rule 81 (assignment_operator -> SUB_ASSIGN .)


state 260

    (82) assignment_operator -> LEFT_ASSIGN .

    INC_OP          reduce using rule 82 (assignment_operator -> LEFT_ASSIGN .)
    DEC_OP          reduce using rule 82 (assignment_operator -> LEFT_ASSIGN .)
    SIZEOF          reduce using rule 82 (assignment_operator -> LEFT_ASSIGN .)
    ALIGNOF         reduce using rule 82 (assignment_operator -> LEFT_ASSIGN .)
    LPAREN          reduce using rule 82 (assignment_operator -> LEFT_ASSIGN .)
    AND             reduce using rule 82 (assignment_operator -> LEFT_ASSIGN .)
    TIMES           reduce using rule 82 (assignment_operator -> LEFT_ASSIGN .)
    PLUS            reduce using rule 82 (assignment_operator -> LEFT_ASSIGN .)
    MINUS           reduce using rule 82 (assignment_operator -> LEFT_ASSIGN .)
    TILDE           reduce using rule 82 (assignment_operator -> LEFT_ASSIGN .)
    NOT             reduce using rule 82 (assignment_operator -> LEFT_ASSIGN .)
    IDENTIFIER      reduce using rule 82 (assignment_operator -> LEFT_ASSIGN .)
    INTEGER         reduce using rule 82 (assignment_operator -> LEFT_ASSIGN .)
    F_CONSTANT      reduce using rule 82 (assignment_operator -> LEFT_ASSIGN .)
    ENUMERATION_CONSTANT reduce using rule 82 (assignment_operator -> LEFT_ASSIGN .)
    STRING_LITERAL  reduce using rule 82 (assignment_operator -> LEFT_ASSIGN .)
    FUNC_NAME       reduce using rule 82 (assignment_operator -> LEFT_ASSIGN .)
    GENERIC         reduce using rule 82 (assignment_operator -> LEFT_ASSIGN .)


state 261

    (83) assignment_operator -> RIGHT_ASSIGN .

    INC_OP          reduce using rule 83 (assignment_operator -> RIGHT_ASSIGN .)
    DEC_OP          reduce using rule 83 (assignment_operator -> RIGHT_ASSIGN .)
    SIZEOF          reduce using rule 83 (assignment_operator -> RIGHT_ASSIGN .)
    ALIGNOF         reduce using rule 83 (assignment_operator -> RIGHT_ASSIGN .)
    LPAREN          reduce using rule 83 (assignment_operator -> RIGHT_ASSIGN .)
    AND             reduce using rule 83 (assignment_operator -> RIGHT_ASSIGN .)
    TIMES           reduce using rule 83 (assignment_operator -> RIGHT_ASSIGN .)
    PLUS            reduce using rule 83 (assignment_operator -> RIGHT_ASSIGN .)
    MINUS           reduce using rule 83 (assignment_operator -> RIGHT_ASSIGN .)
    TILDE           reduce using rule 83 (assignment_operator -> RIGHT_ASSIGN .)
    NOT             reduce using rule 83 (assignment_operator -> RIGHT_ASSIGN .)
    IDENTIFIER      reduce using rule 83 (assignment_operator -> RIGHT_ASSIGN .)
    INTEGER         reduce using rule 83 (assignment_operator -> RIGHT_ASSIGN .)
    F_CONSTANT      reduce using rule 83 (assignment_operator -> RIGHT_ASSIGN .)
    ENUMERATION_CONSTANT reduce using rule 83 (assignment_operator -> RIGHT_ASSIGN .)
    STRING_LITERAL  reduce using rule 83 (assignment_operator -> RIGHT_ASSIGN .)
    FUNC_NAME       reduce using rule 83 (assignment_operator -> RIGHT_ASSIGN .)
    GENERIC         reduce using rule 83 (assignment_operator -> RIGHT_ASSIGN .)


state 262

    (84) assignment_operator -> AND_ASSIGN .

    INC_OP          reduce using rule 84 (assignment_operator -> AND_ASSIGN .)
    DEC_OP          reduce using rule 84 (assignment_operator -> AND_ASSIGN .)
    SIZEOF          reduce using rule 84 (assignment_operator -> AND_ASSIGN .)
    ALIGNOF         reduce using rule 84 (assignment_operator -> AND_ASSIGN .)
    LPAREN          reduce using rule 84 (assignment_operator -> AND_ASSIGN .)
    AND             reduce using rule 84 (assignment_operator -> AND_ASSIGN .)
    TIMES           reduce using rule 84 (assignment_operator -> AND_ASSIGN .)
    PLUS            reduce using rule 84 (assignment_operator -> AND_ASSIGN .)
    MINUS           reduce using rule 84 (assignment_operator -> AND_ASSIGN .)
    TILDE           reduce using rule 84 (assignment_operator -> AND_ASSIGN .)
    NOT             reduce using rule 84 (assignment_operator -> AND_ASSIGN .)
    IDENTIFIER      reduce using rule 84 (assignment_operator -> AND_ASSIGN .)
    INTEGER         reduce using rule 84 (assignment_operator -> AND_ASSIGN .)
    F_CONSTANT      reduce using rule 84 (assignment_operator -> AND_ASSIGN .)
    ENUMERATION_CONSTANT reduce using rule 84 (assignment_operator -> AND_ASSIGN .)
    STRING_LITERAL  reduce using rule 84 (assignment_operator -> AND_ASSIGN .)
    FUNC_NAME       reduce using rule 84 (assignment_operator -> AND_ASSIGN .)
    GENERIC         reduce using rule 84 (assignment_operator -> AND_ASSIGN .)


state 263

    (85) assignment_operator -> XOR_ASSIGN .

    INC_OP          reduce using rule 85 (assignment_operator -> XOR_ASSIGN .)
    DEC_OP          reduce using rule 85 (assignment_operator -> XOR_ASSIGN .)
    SIZEOF          reduce using rule 85 (assignment_operator -> XOR_ASSIGN .)
    ALIGNOF         reduce using rule 85 (assignment_operator -> XOR_ASSIGN .)
    LPAREN          reduce using rule 85 (assignment_operator -> XOR_ASSIGN .)
    AND             reduce using rule 85 (assignment_operator -> XOR_ASSIGN .)
    TIMES           reduce using rule 85 (assignment_operator -> XOR_ASSIGN .)
    PLUS            reduce using rule 85 (assignment_operator -> XOR_ASSIGN .)
    MINUS           reduce using rule 85 (assignment_operator -> XOR_ASSIGN .)
    TILDE           reduce using rule 85 (assignment_operator -> XOR_ASSIGN .)
    NOT             reduce using rule 85 (assignment_operator -> XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 85 (assignment_operator -> XOR_ASSIGN .)
    INTEGER         reduce using rule 85 (assignment_operator -> XOR_ASSIGN .)
    F_CONSTANT      reduce using rule 85 (assignment_operator -> XOR_ASSIGN .)
    ENUMERATION_CONSTANT reduce using rule 85 (assignment_operator -> XOR_ASSIGN .)
    STRING_LITERAL  reduce using rule 85 (assignment_operator -> XOR_ASSIGN .)
    FUNC_NAME       reduce using rule 85 (assignment_operator -> XOR_ASSIGN .)
    GENERIC         reduce using rule 85 (assignment_operator -> XOR_ASSIGN .)


state 264

    (86) assignment_operator -> OR_ASSIGN .

    INC_OP          reduce using rule 86 (assignment_operator -> OR_ASSIGN .)
    DEC_OP          reduce using rule 86 (assignment_operator -> OR_ASSIGN .)
    SIZEOF          reduce using rule 86 (assignment_operator -> OR_ASSIGN .)
    ALIGNOF         reduce using rule 86 (assignment_operator -> OR_ASSIGN .)
    LPAREN          reduce using rule 86 (assignment_operator -> OR_ASSIGN .)
    AND             reduce using rule 86 (assignment_operator -> OR_ASSIGN .)
    TIMES           reduce using rule 86 (assignment_operator -> OR_ASSIGN .)
    PLUS            reduce using rule 86 (assignment_operator -> OR_ASSIGN .)
    MINUS           reduce using rule 86 (assignment_operator -> OR_ASSIGN .)
    TILDE           reduce using rule 86 (assignment_operator -> OR_ASSIGN .)
    NOT             reduce using rule 86 (assignment_operator -> OR_ASSIGN .)
    IDENTIFIER      reduce using rule 86 (assignment_operator -> OR_ASSIGN .)
    INTEGER         reduce using rule 86 (assignment_operator -> OR_ASSIGN .)
    F_CONSTANT      reduce using rule 86 (assignment_operator -> OR_ASSIGN .)
    ENUMERATION_CONSTANT reduce using rule 86 (assignment_operator -> OR_ASSIGN .)
    STRING_LITERAL  reduce using rule 86 (assignment_operator -> OR_ASSIGN .)
    FUNC_NAME       reduce using rule 86 (assignment_operator -> OR_ASSIGN .)
    GENERIC         reduce using rule 86 (assignment_operator -> OR_ASSIGN .)


state 265

    (25) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list COMMA RBRACE
    (43) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 360


state 266

    (244) compound_statement -> LBRACE block_item_list RBRACE .

    SEMICOLON       reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    STATIC_ASSERT   reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    TYPEDEF         reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    EXTERN          reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    STATIC          reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    THREAD_LOCAL    reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    AUTO            reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    REGISTER        reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    VOID            reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    CHAR            reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    SHORT           reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    INT             reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    LONG            reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    FLOAT           reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    DOUBLE          reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    SIGNED          reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    UNSIGNED        reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    BOOL            reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    COMPLEX         reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    IMAGINARY       reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    CONST           reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    RESTRICT        reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    VOLATILE        reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    ATOMIC          reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    INLINE          reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    NORETURN        reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    ALIGNAS         reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    ENUM            reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    STRUCT          reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    UNION           reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    $end            reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    RBRACE          reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    IDENTIFIER      reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    CASE            reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    DEFAULT         reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    LBRACE          reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    IF              reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    SWITCH          reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    WHILE           reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    DO              reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    FOR             reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    GOTO            reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    CONTINUE        reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    BREAK           reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    RETURN          reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    INC_OP          reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    DEC_OP          reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    SIZEOF          reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    ALIGNOF         reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    LPAREN          reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    AND             reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    TIMES           reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    PLUS            reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    MINUS           reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    TILDE           reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    NOT             reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    INTEGER         reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    F_CONSTANT      reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    ENUMERATION_CONSTANT reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    STRING_LITERAL  reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    FUNC_NAME       reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    GENERIC         reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)
    ELSE            reduce using rule 244 (compound_statement -> LBRACE block_item_list RBRACE .)


state 267

    (246) block_item_list -> block_item_list block_item .

    RBRACE          reduce using rule 246 (block_item_list -> block_item_list block_item .)
    STATIC_ASSERT   reduce using rule 246 (block_item_list -> block_item_list block_item .)
    IDENTIFIER      reduce using rule 246 (block_item_list -> block_item_list block_item .)
    CASE            reduce using rule 246 (block_item_list -> block_item_list block_item .)
    DEFAULT         reduce using rule 246 (block_item_list -> block_item_list block_item .)
    LBRACE          reduce using rule 246 (block_item_list -> block_item_list block_item .)
    SEMICOLON       reduce using rule 246 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 246 (block_item_list -> block_item_list block_item .)
    SWITCH          reduce using rule 246 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 246 (block_item_list -> block_item_list block_item .)
    DO              reduce using rule 246 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 246 (block_item_list -> block_item_list block_item .)
    GOTO            reduce using rule 246 (block_item_list -> block_item_list block_item .)
    CONTINUE        reduce using rule 246 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 246 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 246 (block_item_list -> block_item_list block_item .)
    TYPEDEF         reduce using rule 246 (block_item_list -> block_item_list block_item .)
    EXTERN          reduce using rule 246 (block_item_list -> block_item_list block_item .)
    STATIC          reduce using rule 246 (block_item_list -> block_item_list block_item .)
    THREAD_LOCAL    reduce using rule 246 (block_item_list -> block_item_list block_item .)
    AUTO            reduce using rule 246 (block_item_list -> block_item_list block_item .)
    REGISTER        reduce using rule 246 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 246 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 246 (block_item_list -> block_item_list block_item .)
    SHORT           reduce using rule 246 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 246 (block_item_list -> block_item_list block_item .)
    LONG            reduce using rule 246 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 246 (block_item_list -> block_item_list block_item .)
    DOUBLE          reduce using rule 246 (block_item_list -> block_item_list block_item .)
    SIGNED          reduce using rule 246 (block_item_list -> block_item_list block_item .)
    UNSIGNED        reduce using rule 246 (block_item_list -> block_item_list block_item .)
    BOOL            reduce using rule 246 (block_item_list -> block_item_list block_item .)
    COMPLEX         reduce using rule 246 (block_item_list -> block_item_list block_item .)
    IMAGINARY       reduce using rule 246 (block_item_list -> block_item_list block_item .)
    CONST           reduce using rule 246 (block_item_list -> block_item_list block_item .)
    RESTRICT        reduce using rule 246 (block_item_list -> block_item_list block_item .)
    VOLATILE        reduce using rule 246 (block_item_list -> block_item_list block_item .)
    ATOMIC          reduce using rule 246 (block_item_list -> block_item_list block_item .)
    INLINE          reduce using rule 246 (block_item_list -> block_item_list block_item .)
    NORETURN        reduce using rule 246 (block_item_list -> block_item_list block_item .)
    ALIGNAS         reduce using rule 246 (block_item_list -> block_item_list block_item .)
    ENUM            reduce using rule 246 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 246 (block_item_list -> block_item_list block_item .)
    UNION           reduce using rule 246 (block_item_list -> block_item_list block_item .)
    INC_OP          reduce using rule 246 (block_item_list -> block_item_list block_item .)
    DEC_OP          reduce using rule 246 (block_item_list -> block_item_list block_item .)
    SIZEOF          reduce using rule 246 (block_item_list -> block_item_list block_item .)
    ALIGNOF         reduce using rule 246 (block_item_list -> block_item_list block_item .)
    LPAREN          reduce using rule 246 (block_item_list -> block_item_list block_item .)
    AND             reduce using rule 246 (block_item_list -> block_item_list block_item .)
    TIMES           reduce using rule 246 (block_item_list -> block_item_list block_item .)
    PLUS            reduce using rule 246 (block_item_list -> block_item_list block_item .)
    MINUS           reduce using rule 246 (block_item_list -> block_item_list block_item .)
    TILDE           reduce using rule 246 (block_item_list -> block_item_list block_item .)
    NOT             reduce using rule 246 (block_item_list -> block_item_list block_item .)
    INTEGER         reduce using rule 246 (block_item_list -> block_item_list block_item .)
    F_CONSTANT      reduce using rule 246 (block_item_list -> block_item_list block_item .)
    ENUMERATION_CONSTANT reduce using rule 246 (block_item_list -> block_item_list block_item .)
    STRING_LITERAL  reduce using rule 246 (block_item_list -> block_item_list block_item .)
    FUNC_NAME       reduce using rule 246 (block_item_list -> block_item_list block_item .)
    GENERIC         reduce using rule 246 (block_item_list -> block_item_list block_item .)


state 268

    (240) labeled_statement -> IDENTIFIER COLON . statement
    (234) statement -> . labeled_statement
    (235) statement -> . compound_statement
    (236) statement -> . expression_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) labeled_statement -> . IDENTIFIER COLON statement
    (241) labeled_statement -> . CASE constant_expression COLON statement
    (242) labeled_statement -> . DEFAULT COLON statement
    (243) compound_statement -> . LBRACE RBRACE
    (244) compound_statement -> . LBRACE block_item_list RBRACE
    (249) expression_statement -> . expression SEMICOLON
    (250) expression_statement -> . SEMICOLON
    (251) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (252) selection_statement -> . IF LPAREN expression RPAREN statement
    (253) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (260) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (261) jump_statement -> . CONTINUE SEMICOLON
    (262) jump_statement -> . BREAK SEMICOLON
    (263) jump_statement -> . RETURN SEMICOLON
    (264) jump_statement -> . RETURN expression SEMICOLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LBRACE          shift and go to state 72
    SEMICOLON       shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    statement                      shift and go to state 361
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    expression_statement           shift and go to state 154
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    expression                     shift and go to state 161
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 269

    (241) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 362


state 270

    (242) labeled_statement -> DEFAULT COLON . statement
    (234) statement -> . labeled_statement
    (235) statement -> . compound_statement
    (236) statement -> . expression_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) labeled_statement -> . IDENTIFIER COLON statement
    (241) labeled_statement -> . CASE constant_expression COLON statement
    (242) labeled_statement -> . DEFAULT COLON statement
    (243) compound_statement -> . LBRACE RBRACE
    (244) compound_statement -> . LBRACE block_item_list RBRACE
    (249) expression_statement -> . expression SEMICOLON
    (250) expression_statement -> . SEMICOLON
    (251) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (252) selection_statement -> . IF LPAREN expression RPAREN statement
    (253) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (260) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (261) jump_statement -> . CONTINUE SEMICOLON
    (262) jump_statement -> . BREAK SEMICOLON
    (263) jump_statement -> . RETURN SEMICOLON
    (264) jump_statement -> . RETURN expression SEMICOLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LBRACE          shift and go to state 72
    SEMICOLON       shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    statement                      shift and go to state 363
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    expression_statement           shift and go to state 154
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    expression                     shift and go to state 161
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 271

    (249) expression_statement -> expression SEMICOLON .

    RBRACE          reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    STATIC_ASSERT   reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    CASE            reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    LBRACE          reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    DO              reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    GOTO            reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    TYPEDEF         reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    EXTERN          reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    STATIC          reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    THREAD_LOCAL    reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    AUTO            reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    REGISTER        reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    VOID            reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    SHORT           reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    LONG            reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    SIGNED          reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    UNSIGNED        reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    BOOL            reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    COMPLEX         reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    IMAGINARY       reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    CONST           reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    RESTRICT        reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    VOLATILE        reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    ATOMIC          reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    INLINE          reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    NORETURN        reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    ALIGNAS         reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    ENUM            reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    STRUCT          reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    UNION           reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    INC_OP          reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    DEC_OP          reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    SIZEOF          reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    ALIGNOF         reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    AND             reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    TIMES           reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    PLUS            reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    TILDE           reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    NOT             reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    INTEGER         reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    F_CONSTANT      reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    ENUMERATION_CONSTANT reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    FUNC_NAME       reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    GENERIC         reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 249 (expression_statement -> expression SEMICOLON .)
    RPAREN          reduce using rule 249 (expression_statement -> expression SEMICOLON .)


state 272

    (88) expression -> expression COMMA . assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 364
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 273

    (251) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (252) selection_statement -> IF LPAREN . expression RPAREN statement
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression                     shift and go to state 365
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 274

    (253) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression                     shift and go to state 366
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 275

    (254) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression                     shift and go to state 367
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 276

    (255) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 368


state 277

    (256) iteration_statement -> FOR LPAREN . expression_statement expression_statement RPAREN statement
    (257) iteration_statement -> FOR LPAREN . expression_statement expression_statement expression RPAREN statement
    (258) iteration_statement -> FOR LPAREN . declaration expression_statement RPAREN statement
    (259) iteration_statement -> FOR LPAREN . declaration expression_statement expression RPAREN statement
    (249) expression_statement -> . expression SEMICOLON
    (250) expression_statement -> . SEMICOLON
    (90) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (91) declaration -> . static_assert_declaration
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (92) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (93) declaration_specifiers -> . storage_class_specifier
    (94) declaration_specifiers -> . type_specifier declaration_specifiers
    (95) declaration_specifiers -> . type_specifier
    (96) declaration_specifiers -> . type_qualifier declaration_specifiers
    (97) declaration_specifiers -> . type_qualifier
    (98) declaration_specifiers -> . function_specifier declaration_specifiers
    (99) declaration_specifiers -> . function_specifier
    (100) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (101) declaration_specifiers -> . alignment_specifier
    (233) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (106) storage_class_specifier -> . TYPEDEF
    (107) storage_class_specifier -> . EXTERN
    (108) storage_class_specifier -> . STATIC
    (109) storage_class_specifier -> . THREAD_LOCAL
    (110) storage_class_specifier -> . AUTO
    (111) storage_class_specifier -> . REGISTER
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (160) function_specifier -> . INLINE
    (161) function_specifier -> . NORETURN
    (162) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (163) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 151
    STATIC_ASSERT   shift and go to state 13
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    INLINE          shift and go to state 39
    NORETURN        shift and go to state 40
    ALIGNAS         shift and go to state 41
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    ENUM            shift and go to state 43
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression_statement           shift and go to state 369
    expression                     shift and go to state 161
    declaration                    shift and go to state 370
    declaration_specifiers         shift and go to state 67
    static_assert_declaration      shift and go to state 7
    assignment_expression          shift and go to state 171
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    struct_or_union                shift and go to state 42
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 278

    (260) jump_statement -> GOTO IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 371


state 279

    (261) jump_statement -> CONTINUE SEMICOLON .

    RBRACE          reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    STATIC_ASSERT   reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    LBRACE          reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    GOTO            reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    TYPEDEF         reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    EXTERN          reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    STATIC          reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    THREAD_LOCAL    reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    AUTO            reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    REGISTER        reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    SHORT           reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    LONG            reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    SIGNED          reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    UNSIGNED        reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    BOOL            reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    COMPLEX         reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    IMAGINARY       reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    RESTRICT        reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    VOLATILE        reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    ATOMIC          reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    INLINE          reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    NORETURN        reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    ALIGNAS         reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    ENUM            reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    STRUCT          reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    UNION           reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    INC_OP          reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    DEC_OP          reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    SIZEOF          reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    ALIGNOF         reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    AND             reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    TIMES           reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    TILDE           reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    NOT             reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    INTEGER         reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    F_CONSTANT      reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    ENUMERATION_CONSTANT reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_LITERAL  reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    FUNC_NAME       reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    GENERIC         reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 261 (jump_statement -> CONTINUE SEMICOLON .)


state 280

    (262) jump_statement -> BREAK SEMICOLON .

    RBRACE          reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    STATIC_ASSERT   reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    GOTO            reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    TYPEDEF         reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    EXTERN          reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    STATIC          reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    THREAD_LOCAL    reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    AUTO            reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    REGISTER        reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    INT             reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    LONG            reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    SIGNED          reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    UNSIGNED        reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    BOOL            reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    COMPLEX         reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    IMAGINARY       reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    CONST           reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    RESTRICT        reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    VOLATILE        reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    ATOMIC          reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    INLINE          reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    NORETURN        reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    ALIGNAS         reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    ENUM            reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    STRUCT          reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    UNION           reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    INC_OP          reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    DEC_OP          reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    SIZEOF          reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    ALIGNOF         reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    AND             reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    TIMES           reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    TILDE           reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    NOT             reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    INTEGER         reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    F_CONSTANT      reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    ENUMERATION_CONSTANT reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    STRING_LITERAL  reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    FUNC_NAME       reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    GENERIC         reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 262 (jump_statement -> BREAK SEMICOLON .)


state 281

    (263) jump_statement -> RETURN SEMICOLON .

    RBRACE          reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    STATIC_ASSERT   reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    CASE            reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    GOTO            reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    TYPEDEF         reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    EXTERN          reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    STATIC          reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    THREAD_LOCAL    reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    AUTO            reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    REGISTER        reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    VOID            reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    SHORT           reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    INT             reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    LONG            reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    SIGNED          reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    UNSIGNED        reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    BOOL            reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    COMPLEX         reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    IMAGINARY       reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    CONST           reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    RESTRICT        reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    VOLATILE        reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    ATOMIC          reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    INLINE          reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    NORETURN        reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    ALIGNAS         reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    ENUM            reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    STRUCT          reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    UNION           reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    INC_OP          reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    DEC_OP          reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    SIZEOF          reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    ALIGNOF         reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    AND             reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    TIMES           reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    TILDE           reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    NOT             reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    INTEGER         reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    F_CONSTANT      reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    ENUMERATION_CONSTANT reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    STRING_LITERAL  reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    FUNC_NAME       reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    GENERIC         reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 263 (jump_statement -> RETURN SEMICOLON .)


state 282

    (264) jump_statement -> RETURN expression . SEMICOLON
    (88) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 372
    COMMA           shift and go to state 272


state 283

    (169) direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .

    LBRACKET        reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    LPAREN          reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    EQUALS          reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    LBRACE          reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    STATIC_ASSERT   reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    TYPEDEF         reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    EXTERN          reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    STATIC          reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    THREAD_LOCAL    reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    AUTO            reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    REGISTER        reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    VOID            reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    CHAR            reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    SHORT           reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    INT             reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    LONG            reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    FLOAT           reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    DOUBLE          reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    SIGNED          reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    UNSIGNED        reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    BOOL            reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    COMPLEX         reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    IMAGINARY       reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    CONST           reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    RESTRICT        reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    VOLATILE        reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    ATOMIC          reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    INLINE          reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    NORETURN        reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    ALIGNAS         reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    ENUM            reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    STRUCT          reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    UNION           reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    SEMICOLON       reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    COMMA           reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    COLON           reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)


state 284

    (170) direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list . assignment_expression RBRACKET
    (185) type_qualifier_list -> type_qualifier_list . type_qualifier
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 81
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 373
    type_qualifier                 shift and go to state 186
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 285

    (171) direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 374


state 286

    (172) direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES . RBRACKET
    (37) unary_operator -> TIMES .

    RBRACKET        shift and go to state 375
    LPAREN          reduce using rule 37 (unary_operator -> TIMES .)
    INC_OP          reduce using rule 37 (unary_operator -> TIMES .)
    DEC_OP          reduce using rule 37 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 37 (unary_operator -> TIMES .)
    ALIGNOF         reduce using rule 37 (unary_operator -> TIMES .)
    AND             reduce using rule 37 (unary_operator -> TIMES .)
    TIMES           reduce using rule 37 (unary_operator -> TIMES .)
    PLUS            reduce using rule 37 (unary_operator -> TIMES .)
    MINUS           reduce using rule 37 (unary_operator -> TIMES .)
    TILDE           reduce using rule 37 (unary_operator -> TIMES .)
    NOT             reduce using rule 37 (unary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 37 (unary_operator -> TIMES .)
    INTEGER         reduce using rule 37 (unary_operator -> TIMES .)
    F_CONSTANT      reduce using rule 37 (unary_operator -> TIMES .)
    ENUMERATION_CONSTANT reduce using rule 37 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 37 (unary_operator -> TIMES .)
    FUNC_NAME       reduce using rule 37 (unary_operator -> TIMES .)
    GENERIC         reduce using rule 37 (unary_operator -> TIMES .)


state 287

    (175) direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .

    LBRACKET        reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    LPAREN          reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    EQUALS          reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    LBRACE          reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    STATIC_ASSERT   reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    TYPEDEF         reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    EXTERN          reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    STATIC          reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    THREAD_LOCAL    reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    AUTO            reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    REGISTER        reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    VOID            reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    CHAR            reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    SHORT           reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    INT             reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    LONG            reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    FLOAT           reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    DOUBLE          reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    SIGNED          reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    UNSIGNED        reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    BOOL            reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    COMPLEX         reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    IMAGINARY       reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    CONST           reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    RESTRICT        reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    VOLATILE        reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    ATOMIC          reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    INLINE          reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    NORETURN        reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    ALIGNAS         reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    ENUM            reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    STRUCT          reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    UNION           reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    SEMICOLON       reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    COMMA           reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    RPAREN          reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    COLON           reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)


state 288

    (173) direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC . assignment_expression RBRACKET
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 376
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 289

    (174) direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression . RBRACKET

    RBRACKET        shift and go to state 377


state 290

    (176) direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .

    LBRACKET        reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    LPAREN          reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    EQUALS          reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    LBRACE          reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    STATIC_ASSERT   reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    EXTERN          reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    STATIC          reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    THREAD_LOCAL    reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    AUTO            reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    REGISTER        reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    VOID            reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    CHAR            reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    SHORT           reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    INT             reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    LONG            reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    FLOAT           reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    SIGNED          reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    BOOL            reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    COMPLEX         reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    IMAGINARY       reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    CONST           reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    RESTRICT        reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    ATOMIC          reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    INLINE          reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    NORETURN        reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    ALIGNAS         reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    ENUM            reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    STRUCT          reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    UNION           reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    SEMICOLON       reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    COMMA           reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    RPAREN          reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    COLON           reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)


state 291

    (177) direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LBRACE          reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STATIC_ASSERT   reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEDEF         reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EXTERN          reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STATIC          reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    THREAD_LOCAL    reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    AUTO            reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    REGISTER        reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOID            reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CHAR            reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SHORT           reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INT             reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LONG            reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    FLOAT           reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    DOUBLE          reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SIGNED          reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNSIGNED        reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    BOOL            reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMPLEX         reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    IMAGINARY       reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CONST           reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RESTRICT        reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOLATILE        reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    ATOMIC          reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INLINE          reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    NORETURN        reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    ALIGNAS         reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    ENUM            reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STRUCT          reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNION           reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SEMICOLON       reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 177 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)


state 292

    (179) direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .

    LBRACKET        reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LPAREN          reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    EQUALS          reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LBRACE          reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    STATIC_ASSERT   reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    TYPEDEF         reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    EXTERN          reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    STATIC          reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    THREAD_LOCAL    reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    AUTO            reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    REGISTER        reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOID            reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    CHAR            reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SHORT           reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    INT             reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LONG            reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    FLOAT           reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    DOUBLE          reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SIGNED          reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    UNSIGNED        reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    BOOL            reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COMPLEX         reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    IMAGINARY       reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    CONST           reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    RESTRICT        reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOLATILE        reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    ATOMIC          reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    INLINE          reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    NORETURN        reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    ALIGNAS         reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    ENUM            reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    STRUCT          reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    UNION           reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SEMICOLON       reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COMMA           reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    RPAREN          reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COLON           reduce using rule 179 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)


state 293

    (194) identifier_list -> identifier_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 378


state 294

    (186) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (189) parameter_list -> parameter_list COMMA . parameter_declaration
    (190) parameter_declaration -> . declaration_specifiers declarator
    (191) parameter_declaration -> . declaration_specifiers abstract_declarator
    (192) parameter_declaration -> . declaration_specifiers
    (92) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (93) declaration_specifiers -> . storage_class_specifier
    (94) declaration_specifiers -> . type_specifier declaration_specifiers
    (95) declaration_specifiers -> . type_specifier
    (96) declaration_specifiers -> . type_qualifier declaration_specifiers
    (97) declaration_specifiers -> . type_qualifier
    (98) declaration_specifiers -> . function_specifier declaration_specifiers
    (99) declaration_specifiers -> . function_specifier
    (100) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (101) declaration_specifiers -> . alignment_specifier
    (106) storage_class_specifier -> . TYPEDEF
    (107) storage_class_specifier -> . EXTERN
    (108) storage_class_specifier -> . STATIC
    (109) storage_class_specifier -> . THREAD_LOCAL
    (110) storage_class_specifier -> . AUTO
    (111) storage_class_specifier -> . REGISTER
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (160) function_specifier -> . INLINE
    (161) function_specifier -> . NORETURN
    (162) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (163) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 379
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    INLINE          shift and go to state 39
    NORETURN        shift and go to state 40
    ALIGNAS         shift and go to state 41
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    parameter_declaration          shift and go to state 380
    declaration_specifiers         shift and go to state 184
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 42

state 295

    (190) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 190 (parameter_declaration -> declaration_specifiers declarator .)
    RPAREN          reduce using rule 190 (parameter_declaration -> declaration_specifiers declarator .)


state 296

    (191) parameter_declaration -> declaration_specifiers abstract_declarator .

    COMMA           reduce using rule 191 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    RPAREN          reduce using rule 191 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 297

    (164) declarator -> pointer . direct_declarator
    (197) abstract_declarator -> pointer . direct_abstract_declarator
    (198) abstract_declarator -> pointer .
    (166) direct_declarator -> . IDENTIFIER
    (167) direct_declarator -> . LPAREN declarator RPAREN
    (168) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (169) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (170) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (171) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (172) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (173) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (174) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (175) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (176) direct_declarator -> . direct_declarator LBRACKET assignment_expression RBRACKET
    (177) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (178) direct_declarator -> . direct_declarator LPAREN RPAREN
    (179) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (200) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (201) direct_abstract_declarator -> . LBRACKET RBRACKET
    (202) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (203) direct_abstract_declarator -> . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (204) direct_abstract_declarator -> . LBRACKET STATIC assignment_expression RBRACKET
    (205) direct_abstract_declarator -> . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (206) direct_abstract_declarator -> . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (207) direct_abstract_declarator -> . LBRACKET type_qualifier_list RBRACKET
    (208) direct_abstract_declarator -> . LBRACKET assignment_expression RBRACKET
    (209) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (210) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (211) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (212) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (214) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET
    (216) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression RBRACKET
    (217) direct_abstract_declarator -> . LPAREN RPAREN
    (218) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (219) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (220) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 198 (abstract_declarator -> pointer .)
    RPAREN          reduce using rule 198 (abstract_declarator -> pointer .)
    IDENTIFIER      shift and go to state 53
    LPAREN          shift and go to state 298
    LBRACKET        shift and go to state 229

    direct_declarator              shift and go to state 75
    direct_abstract_declarator     shift and go to state 331

state 298

    (167) direct_declarator -> LPAREN . declarator RPAREN
    (200) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (217) direct_abstract_declarator -> LPAREN . RPAREN
    (218) direct_abstract_declarator -> LPAREN . parameter_type_list RPAREN
    (164) declarator -> . pointer direct_declarator
    (165) declarator -> . direct_declarator
    (197) abstract_declarator -> . pointer direct_abstract_declarator
    (198) abstract_declarator -> . pointer
    (199) abstract_declarator -> . direct_abstract_declarator
    (186) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (187) parameter_type_list -> . parameter_list
    (180) pointer -> . TIMES type_qualifier_list pointer
    (181) pointer -> . TIMES type_qualifier_list
    (182) pointer -> . TIMES pointer
    (183) pointer -> . TIMES
    (166) direct_declarator -> . IDENTIFIER
    (167) direct_declarator -> . LPAREN declarator RPAREN
    (168) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (169) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (170) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (171) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (172) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (173) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (174) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (175) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (176) direct_declarator -> . direct_declarator LBRACKET assignment_expression RBRACKET
    (177) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (178) direct_declarator -> . direct_declarator LPAREN RPAREN
    (179) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (200) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (201) direct_abstract_declarator -> . LBRACKET RBRACKET
    (202) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (203) direct_abstract_declarator -> . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (204) direct_abstract_declarator -> . LBRACKET STATIC assignment_expression RBRACKET
    (205) direct_abstract_declarator -> . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (206) direct_abstract_declarator -> . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (207) direct_abstract_declarator -> . LBRACKET type_qualifier_list RBRACKET
    (208) direct_abstract_declarator -> . LBRACKET assignment_expression RBRACKET
    (209) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (210) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (211) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (212) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (214) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET
    (216) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression RBRACKET
    (217) direct_abstract_declarator -> . LPAREN RPAREN
    (218) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (219) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (220) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN
    (188) parameter_list -> . parameter_declaration
    (189) parameter_list -> . parameter_list COMMA parameter_declaration
    (190) parameter_declaration -> . declaration_specifiers declarator
    (191) parameter_declaration -> . declaration_specifiers abstract_declarator
    (192) parameter_declaration -> . declaration_specifiers
    (92) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (93) declaration_specifiers -> . storage_class_specifier
    (94) declaration_specifiers -> . type_specifier declaration_specifiers
    (95) declaration_specifiers -> . type_specifier
    (96) declaration_specifiers -> . type_qualifier declaration_specifiers
    (97) declaration_specifiers -> . type_qualifier
    (98) declaration_specifiers -> . function_specifier declaration_specifiers
    (99) declaration_specifiers -> . function_specifier
    (100) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (101) declaration_specifiers -> . alignment_specifier
    (106) storage_class_specifier -> . TYPEDEF
    (107) storage_class_specifier -> . EXTERN
    (108) storage_class_specifier -> . STATIC
    (109) storage_class_specifier -> . THREAD_LOCAL
    (110) storage_class_specifier -> . AUTO
    (111) storage_class_specifier -> . REGISTER
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (160) function_specifier -> . INLINE
    (161) function_specifier -> . NORETURN
    (162) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (163) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    RPAREN          shift and go to state 335
    TIMES           shift and go to state 52
    IDENTIFIER      shift and go to state 53
    LPAREN          shift and go to state 298
    LBRACKET        shift and go to state 229
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    INLINE          shift and go to state 39
    NORETURN        shift and go to state 40
    ALIGNAS         shift and go to state 41
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    declarator                     shift and go to state 82
    abstract_declarator            shift and go to state 334
    parameter_type_list            shift and go to state 336
    pointer                        shift and go to state 297
    direct_declarator              shift and go to state 50
    direct_abstract_declarator     shift and go to state 227
    parameter_list                 shift and go to state 181
    parameter_declaration          shift and go to state 183
    declaration_specifiers         shift and go to state 184
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 42

state 299

    (43) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (25) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list COMMA RBRACE
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LBRACE          shift and go to state 382
    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    cast_expression                shift and go to state 381
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 300

    (4) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    PTR_OP          reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    INC_OP          reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    DEC_OP          reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    LEFT_OP         reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    RIGHT_OP        reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    LE_OP           reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    GE_OP           reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    EQ_OP           reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    NE_OP           reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    AND_OP          reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    QUESTION        reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    OR_OP           reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    MUL_ASSIGN      reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    DIV_ASSIGN      reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    MOD_ASSIGN      reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    ADD_ASSIGN      reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    SUB_ASSIGN      reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    LEFT_ASSIGN     reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    RIGHT_ASSIGN    reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    AND_ASSIGN      reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    XOR_ASSIGN      reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    OR_ASSIGN       reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)


state 301

    (233) static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL . RPAREN SEMICOLON

    RPAREN          shift and go to state 383


state 302

    (73) conditional_expression -> logical_or_expression QUESTION expression . COLON conditional_expression
    (88) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 384
    COMMA           shift and go to state 272


state 303

    (71) logical_or_expression -> logical_or_expression OR_OP logical_and_expression .
    (69) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    QUESTION        reduce using rule 71 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    OR_OP           reduce using rule 71 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    COMMA           reduce using rule 71 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    RPAREN          reduce using rule 71 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    SEMICOLON       reduce using rule 71 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    RBRACKET        reduce using rule 71 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    RBRACE          reduce using rule 71 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    COLON           reduce using rule 71 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    AND_OP          shift and go to state 193


state 304

    (69) logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .
    (67) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    AND_OP          reduce using rule 69 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    QUESTION        reduce using rule 69 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    OR_OP           reduce using rule 69 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    COMMA           reduce using rule 69 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    RPAREN          reduce using rule 69 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    SEMICOLON       reduce using rule 69 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    RBRACKET        reduce using rule 69 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    RBRACE          reduce using rule 69 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    COLON           reduce using rule 69 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    OR              shift and go to state 194


state 305

    (67) inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .
    (65) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 67 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    AND_OP          reduce using rule 67 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    QUESTION        reduce using rule 67 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    OR_OP           reduce using rule 67 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COMMA           reduce using rule 67 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RPAREN          reduce using rule 67 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    SEMICOLON       reduce using rule 67 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RBRACKET        reduce using rule 67 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RBRACE          reduce using rule 67 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COLON           reduce using rule 67 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    XOR             shift and go to state 195


state 306

    (65) exclusive_or_expression -> exclusive_or_expression XOR and_expression .
    (63) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 65 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR              reduce using rule 65 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND_OP          reduce using rule 65 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    QUESTION        reduce using rule 65 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR_OP           reduce using rule 65 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COMMA           reduce using rule 65 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RPAREN          reduce using rule 65 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    SEMICOLON       reduce using rule 65 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBRACKET        reduce using rule 65 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBRACE          reduce using rule 65 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COLON           reduce using rule 65 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND             shift and go to state 196


state 307

    (63) and_expression -> and_expression AND equality_expression .
    (60) equality_expression -> equality_expression . EQ_OP relational_expression
    (61) equality_expression -> equality_expression . NE_OP relational_expression

    AND             reduce using rule 63 (and_expression -> and_expression AND equality_expression .)
    XOR             reduce using rule 63 (and_expression -> and_expression AND equality_expression .)
    OR              reduce using rule 63 (and_expression -> and_expression AND equality_expression .)
    AND_OP          reduce using rule 63 (and_expression -> and_expression AND equality_expression .)
    QUESTION        reduce using rule 63 (and_expression -> and_expression AND equality_expression .)
    OR_OP           reduce using rule 63 (and_expression -> and_expression AND equality_expression .)
    COMMA           reduce using rule 63 (and_expression -> and_expression AND equality_expression .)
    RPAREN          reduce using rule 63 (and_expression -> and_expression AND equality_expression .)
    SEMICOLON       reduce using rule 63 (and_expression -> and_expression AND equality_expression .)
    RBRACKET        reduce using rule 63 (and_expression -> and_expression AND equality_expression .)
    RBRACE          reduce using rule 63 (and_expression -> and_expression AND equality_expression .)
    COLON           reduce using rule 63 (and_expression -> and_expression AND equality_expression .)
    EQ_OP           shift and go to state 197
    NE_OP           shift and go to state 198


state 308

    (60) equality_expression -> equality_expression EQ_OP relational_expression .
    (55) relational_expression -> relational_expression . LT shift_expression
    (56) relational_expression -> relational_expression . GT shift_expression
    (57) relational_expression -> relational_expression . LE_OP shift_expression
    (58) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 60 (equality_expression -> equality_expression EQ_OP relational_expression .)
    NE_OP           reduce using rule 60 (equality_expression -> equality_expression EQ_OP relational_expression .)
    AND             reduce using rule 60 (equality_expression -> equality_expression EQ_OP relational_expression .)
    XOR             reduce using rule 60 (equality_expression -> equality_expression EQ_OP relational_expression .)
    OR              reduce using rule 60 (equality_expression -> equality_expression EQ_OP relational_expression .)
    AND_OP          reduce using rule 60 (equality_expression -> equality_expression EQ_OP relational_expression .)
    QUESTION        reduce using rule 60 (equality_expression -> equality_expression EQ_OP relational_expression .)
    OR_OP           reduce using rule 60 (equality_expression -> equality_expression EQ_OP relational_expression .)
    COMMA           reduce using rule 60 (equality_expression -> equality_expression EQ_OP relational_expression .)
    RPAREN          reduce using rule 60 (equality_expression -> equality_expression EQ_OP relational_expression .)
    SEMICOLON       reduce using rule 60 (equality_expression -> equality_expression EQ_OP relational_expression .)
    RBRACKET        reduce using rule 60 (equality_expression -> equality_expression EQ_OP relational_expression .)
    RBRACE          reduce using rule 60 (equality_expression -> equality_expression EQ_OP relational_expression .)
    COLON           reduce using rule 60 (equality_expression -> equality_expression EQ_OP relational_expression .)
    LT              shift and go to state 199
    GT              shift and go to state 200
    LE_OP           shift and go to state 201
    GE_OP           shift and go to state 202


state 309

    (61) equality_expression -> equality_expression NE_OP relational_expression .
    (55) relational_expression -> relational_expression . LT shift_expression
    (56) relational_expression -> relational_expression . GT shift_expression
    (57) relational_expression -> relational_expression . LE_OP shift_expression
    (58) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 61 (equality_expression -> equality_expression NE_OP relational_expression .)
    NE_OP           reduce using rule 61 (equality_expression -> equality_expression NE_OP relational_expression .)
    AND             reduce using rule 61 (equality_expression -> equality_expression NE_OP relational_expression .)
    XOR             reduce using rule 61 (equality_expression -> equality_expression NE_OP relational_expression .)
    OR              reduce using rule 61 (equality_expression -> equality_expression NE_OP relational_expression .)
    AND_OP          reduce using rule 61 (equality_expression -> equality_expression NE_OP relational_expression .)
    QUESTION        reduce using rule 61 (equality_expression -> equality_expression NE_OP relational_expression .)
    OR_OP           reduce using rule 61 (equality_expression -> equality_expression NE_OP relational_expression .)
    COMMA           reduce using rule 61 (equality_expression -> equality_expression NE_OP relational_expression .)
    RPAREN          reduce using rule 61 (equality_expression -> equality_expression NE_OP relational_expression .)
    SEMICOLON       reduce using rule 61 (equality_expression -> equality_expression NE_OP relational_expression .)
    RBRACKET        reduce using rule 61 (equality_expression -> equality_expression NE_OP relational_expression .)
    RBRACE          reduce using rule 61 (equality_expression -> equality_expression NE_OP relational_expression .)
    COLON           reduce using rule 61 (equality_expression -> equality_expression NE_OP relational_expression .)
    LT              shift and go to state 199
    GT              shift and go to state 200
    LE_OP           shift and go to state 201
    GE_OP           shift and go to state 202


state 310

    (55) relational_expression -> relational_expression LT shift_expression .
    (52) shift_expression -> shift_expression . LEFT_OP additive_expression
    (53) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LT              reduce using rule 55 (relational_expression -> relational_expression LT shift_expression .)
    GT              reduce using rule 55 (relational_expression -> relational_expression LT shift_expression .)
    LE_OP           reduce using rule 55 (relational_expression -> relational_expression LT shift_expression .)
    GE_OP           reduce using rule 55 (relational_expression -> relational_expression LT shift_expression .)
    EQ_OP           reduce using rule 55 (relational_expression -> relational_expression LT shift_expression .)
    NE_OP           reduce using rule 55 (relational_expression -> relational_expression LT shift_expression .)
    AND             reduce using rule 55 (relational_expression -> relational_expression LT shift_expression .)
    XOR             reduce using rule 55 (relational_expression -> relational_expression LT shift_expression .)
    OR              reduce using rule 55 (relational_expression -> relational_expression LT shift_expression .)
    AND_OP          reduce using rule 55 (relational_expression -> relational_expression LT shift_expression .)
    QUESTION        reduce using rule 55 (relational_expression -> relational_expression LT shift_expression .)
    OR_OP           reduce using rule 55 (relational_expression -> relational_expression LT shift_expression .)
    COMMA           reduce using rule 55 (relational_expression -> relational_expression LT shift_expression .)
    RPAREN          reduce using rule 55 (relational_expression -> relational_expression LT shift_expression .)
    SEMICOLON       reduce using rule 55 (relational_expression -> relational_expression LT shift_expression .)
    RBRACKET        reduce using rule 55 (relational_expression -> relational_expression LT shift_expression .)
    RBRACE          reduce using rule 55 (relational_expression -> relational_expression LT shift_expression .)
    COLON           reduce using rule 55 (relational_expression -> relational_expression LT shift_expression .)
    LEFT_OP         shift and go to state 203
    RIGHT_OP        shift and go to state 204


state 311

    (56) relational_expression -> relational_expression GT shift_expression .
    (52) shift_expression -> shift_expression . LEFT_OP additive_expression
    (53) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LT              reduce using rule 56 (relational_expression -> relational_expression GT shift_expression .)
    GT              reduce using rule 56 (relational_expression -> relational_expression GT shift_expression .)
    LE_OP           reduce using rule 56 (relational_expression -> relational_expression GT shift_expression .)
    GE_OP           reduce using rule 56 (relational_expression -> relational_expression GT shift_expression .)
    EQ_OP           reduce using rule 56 (relational_expression -> relational_expression GT shift_expression .)
    NE_OP           reduce using rule 56 (relational_expression -> relational_expression GT shift_expression .)
    AND             reduce using rule 56 (relational_expression -> relational_expression GT shift_expression .)
    XOR             reduce using rule 56 (relational_expression -> relational_expression GT shift_expression .)
    OR              reduce using rule 56 (relational_expression -> relational_expression GT shift_expression .)
    AND_OP          reduce using rule 56 (relational_expression -> relational_expression GT shift_expression .)
    QUESTION        reduce using rule 56 (relational_expression -> relational_expression GT shift_expression .)
    OR_OP           reduce using rule 56 (relational_expression -> relational_expression GT shift_expression .)
    COMMA           reduce using rule 56 (relational_expression -> relational_expression GT shift_expression .)
    RPAREN          reduce using rule 56 (relational_expression -> relational_expression GT shift_expression .)
    SEMICOLON       reduce using rule 56 (relational_expression -> relational_expression GT shift_expression .)
    RBRACKET        reduce using rule 56 (relational_expression -> relational_expression GT shift_expression .)
    RBRACE          reduce using rule 56 (relational_expression -> relational_expression GT shift_expression .)
    COLON           reduce using rule 56 (relational_expression -> relational_expression GT shift_expression .)
    LEFT_OP         shift and go to state 203
    RIGHT_OP        shift and go to state 204


state 312

    (57) relational_expression -> relational_expression LE_OP shift_expression .
    (52) shift_expression -> shift_expression . LEFT_OP additive_expression
    (53) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LT              reduce using rule 57 (relational_expression -> relational_expression LE_OP shift_expression .)
    GT              reduce using rule 57 (relational_expression -> relational_expression LE_OP shift_expression .)
    LE_OP           reduce using rule 57 (relational_expression -> relational_expression LE_OP shift_expression .)
    GE_OP           reduce using rule 57 (relational_expression -> relational_expression LE_OP shift_expression .)
    EQ_OP           reduce using rule 57 (relational_expression -> relational_expression LE_OP shift_expression .)
    NE_OP           reduce using rule 57 (relational_expression -> relational_expression LE_OP shift_expression .)
    AND             reduce using rule 57 (relational_expression -> relational_expression LE_OP shift_expression .)
    XOR             reduce using rule 57 (relational_expression -> relational_expression LE_OP shift_expression .)
    OR              reduce using rule 57 (relational_expression -> relational_expression LE_OP shift_expression .)
    AND_OP          reduce using rule 57 (relational_expression -> relational_expression LE_OP shift_expression .)
    QUESTION        reduce using rule 57 (relational_expression -> relational_expression LE_OP shift_expression .)
    OR_OP           reduce using rule 57 (relational_expression -> relational_expression LE_OP shift_expression .)
    COMMA           reduce using rule 57 (relational_expression -> relational_expression LE_OP shift_expression .)
    RPAREN          reduce using rule 57 (relational_expression -> relational_expression LE_OP shift_expression .)
    SEMICOLON       reduce using rule 57 (relational_expression -> relational_expression LE_OP shift_expression .)
    RBRACKET        reduce using rule 57 (relational_expression -> relational_expression LE_OP shift_expression .)
    RBRACE          reduce using rule 57 (relational_expression -> relational_expression LE_OP shift_expression .)
    COLON           reduce using rule 57 (relational_expression -> relational_expression LE_OP shift_expression .)
    LEFT_OP         shift and go to state 203
    RIGHT_OP        shift and go to state 204


state 313

    (58) relational_expression -> relational_expression GE_OP shift_expression .
    (52) shift_expression -> shift_expression . LEFT_OP additive_expression
    (53) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LT              reduce using rule 58 (relational_expression -> relational_expression GE_OP shift_expression .)
    GT              reduce using rule 58 (relational_expression -> relational_expression GE_OP shift_expression .)
    LE_OP           reduce using rule 58 (relational_expression -> relational_expression GE_OP shift_expression .)
    GE_OP           reduce using rule 58 (relational_expression -> relational_expression GE_OP shift_expression .)
    EQ_OP           reduce using rule 58 (relational_expression -> relational_expression GE_OP shift_expression .)
    NE_OP           reduce using rule 58 (relational_expression -> relational_expression GE_OP shift_expression .)
    AND             reduce using rule 58 (relational_expression -> relational_expression GE_OP shift_expression .)
    XOR             reduce using rule 58 (relational_expression -> relational_expression GE_OP shift_expression .)
    OR              reduce using rule 58 (relational_expression -> relational_expression GE_OP shift_expression .)
    AND_OP          reduce using rule 58 (relational_expression -> relational_expression GE_OP shift_expression .)
    QUESTION        reduce using rule 58 (relational_expression -> relational_expression GE_OP shift_expression .)
    OR_OP           reduce using rule 58 (relational_expression -> relational_expression GE_OP shift_expression .)
    COMMA           reduce using rule 58 (relational_expression -> relational_expression GE_OP shift_expression .)
    RPAREN          reduce using rule 58 (relational_expression -> relational_expression GE_OP shift_expression .)
    SEMICOLON       reduce using rule 58 (relational_expression -> relational_expression GE_OP shift_expression .)
    RBRACKET        reduce using rule 58 (relational_expression -> relational_expression GE_OP shift_expression .)
    RBRACE          reduce using rule 58 (relational_expression -> relational_expression GE_OP shift_expression .)
    COLON           reduce using rule 58 (relational_expression -> relational_expression GE_OP shift_expression .)
    LEFT_OP         shift and go to state 203
    RIGHT_OP        shift and go to state 204


state 314

    (52) shift_expression -> shift_expression LEFT_OP additive_expression .
    (49) additive_expression -> additive_expression . PLUS multiplicative_expression
    (50) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 52 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_OP        reduce using rule 52 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LT              reduce using rule 52 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GT              reduce using rule 52 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LE_OP           reduce using rule 52 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GE_OP           reduce using rule 52 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    EQ_OP           reduce using rule 52 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    NE_OP           reduce using rule 52 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AND             reduce using rule 52 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    XOR             reduce using rule 52 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    OR              reduce using rule 52 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AND_OP          reduce using rule 52 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    QUESTION        reduce using rule 52 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    OR_OP           reduce using rule 52 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    COMMA           reduce using rule 52 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RPAREN          reduce using rule 52 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    SEMICOLON       reduce using rule 52 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RBRACKET        reduce using rule 52 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RBRACE          reduce using rule 52 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    COLON           reduce using rule 52 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    PLUS            shift and go to state 205
    MINUS           shift and go to state 206


state 315

    (53) shift_expression -> shift_expression RIGHT_OP additive_expression .
    (49) additive_expression -> additive_expression . PLUS multiplicative_expression
    (50) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 53 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_OP        reduce using rule 53 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LT              reduce using rule 53 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GT              reduce using rule 53 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LE_OP           reduce using rule 53 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GE_OP           reduce using rule 53 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    EQ_OP           reduce using rule 53 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    NE_OP           reduce using rule 53 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AND             reduce using rule 53 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    XOR             reduce using rule 53 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    OR              reduce using rule 53 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AND_OP          reduce using rule 53 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    QUESTION        reduce using rule 53 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    OR_OP           reduce using rule 53 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    COMMA           reduce using rule 53 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RPAREN          reduce using rule 53 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    SEMICOLON       reduce using rule 53 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RBRACKET        reduce using rule 53 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RBRACE          reduce using rule 53 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    COLON           reduce using rule 53 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    PLUS            shift and go to state 205
    MINUS           shift and go to state 206


state 316

    (49) additive_expression -> additive_expression PLUS multiplicative_expression .
    (45) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (46) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (47) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LEFT_OP         reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_OP        reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE_OP           reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE_OP           reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ_OP           reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE_OP           reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND_OP          reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    QUESTION        reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR_OP           reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACE          reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 207
    DIVIDE          shift and go to state 208
    MOD             shift and go to state 209


state 317

    (50) additive_expression -> additive_expression MINUS multiplicative_expression .
    (45) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (46) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (47) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LEFT_OP         reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_OP        reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE_OP           reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE_OP           reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ_OP           reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE_OP           reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND_OP          reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    QUESTION        reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR_OP           reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACE          reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 207
    DIVIDE          shift and go to state 208
    MOD             shift and go to state 209


state 318

    (45) multiplicative_expression -> multiplicative_expression TIMES cast_expression .

    TIMES           reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    DIVIDE          reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MOD             reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    PLUS            reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MINUS           reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LEFT_OP         reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RIGHT_OP        reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LT              reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GT              reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LE_OP           reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GE_OP           reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    EQ_OP           reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    NE_OP           reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    AND             reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    XOR             reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    OR              reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    AND_OP          reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    QUESTION        reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    OR_OP           reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COMMA           reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RPAREN          reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    SEMICOLON       reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACKET        reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACE          reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COLON           reduce using rule 45 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)


state 319

    (46) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    TIMES           reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MOD             reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    PLUS            reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MINUS           reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LEFT_OP         reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RIGHT_OP        reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LT              reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GT              reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LE_OP           reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GE_OP           reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQ_OP           reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    NE_OP           reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AND             reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    XOR             reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    OR              reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AND_OP          reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    QUESTION        reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    OR_OP           reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RPAREN          reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SEMICOLON       reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACKET        reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACE          reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COLON           reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)


state 320

    (47) multiplicative_expression -> multiplicative_expression MOD cast_expression .

    TIMES           reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    DIVIDE          reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MOD             reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    PLUS            reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MINUS           reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LEFT_OP         reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RIGHT_OP        reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LT              reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GT              reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LE_OP           reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GE_OP           reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    EQ_OP           reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    NE_OP           reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    AND             reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    XOR             reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    OR              reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    AND_OP          reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    QUESTION        reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    OR_OP           reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COMMA           reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RPAREN          reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    SEMICOLON       reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACKET        reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACE          reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COLON           reduce using rule 47 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)


state 321

    (18) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (88) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 385
    COMMA           shift and go to state 272


state 322

    (19) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOT             reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PTR_OP          reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    INC_OP          reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DEC_OP          reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LEFT_OP         reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RIGHT_OP        reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE_OP           reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE_OP           reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ_OP           reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NE_OP           reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR             reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND_OP          reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    QUESTION        reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR_OP           reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MUL_ASSIGN      reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIV_ASSIGN      reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD_ASSIGN      reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ADD_ASSIGN      reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SUB_ASSIGN      reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LEFT_ASSIGN     reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RIGHT_ASSIGN    reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND_ASSIGN      reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR_ASSIGN      reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR_ASSIGN       reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMICOLON       reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 19 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 323

    (20) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (28) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 386
    COMMA           shift and go to state 387


state 324

    (27) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 27 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 27 (argument_expression_list -> assignment_expression .)


state 325

    (21) postfix_expression -> postfix_expression DOT IDENTIFIER .

    LBRACKET        reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LPAREN          reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DOT             reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PTR_OP          reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    INC_OP          reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DEC_OP          reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    TIMES           reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIVIDE          reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MOD             reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PLUS            reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MINUS           reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_OP         reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_OP        reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LT              reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GT              reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LE_OP           reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GE_OP           reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQ_OP           reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    NE_OP           reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AND             reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    XOR             reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR              reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AND_OP          reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    QUESTION        reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR_OP           reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COMMA           reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RPAREN          reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQUALS          reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AND_ASSIGN      reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR_ASSIGN       reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RBRACKET        reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RBRACE          reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COLON           reduce using rule 21 (postfix_expression -> postfix_expression DOT IDENTIFIER .)


state 326

    (22) postfix_expression -> postfix_expression PTR_OP IDENTIFIER .

    LBRACKET        reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LPAREN          reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DOT             reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PTR_OP          reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    INC_OP          reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DEC_OP          reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    TIMES           reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DIVIDE          reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MOD             reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PLUS            reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MINUS           reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_OP         reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_OP        reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LT              reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    GT              reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LE_OP           reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    GE_OP           reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQ_OP           reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    NE_OP           reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND             reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    XOR             reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR              reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_OP          reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    QUESTION        reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_OP           reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    COMMA           reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RPAREN          reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQUALS          reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_ASSIGN      reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_ASSIGN       reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SEMICOLON       reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RBRACKET        reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RBRACE          reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    COLON           reduce using rule 22 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)


state 327

    (25) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list COMMA RBRACE

    RPAREN          shift and go to state 388


state 328

    (34) unary_expression -> SIZEOF LPAREN type_name . RPAREN
    (25) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list COMMA RBRACE

    RPAREN          shift and go to state 389


state 329

    (35) unary_expression -> ALIGNOF LPAREN type_name . RPAREN

    RPAREN          shift and go to state 390


state 330

    (12) generic_selection -> GENERIC LPAREN assignment_expression . COMMA generic_assoc_list RPAREN

    COMMA           shift and go to state 391


state 331

    (197) abstract_declarator -> pointer direct_abstract_declarator .
    (209) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET RBRACKET
    (210) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET TIMES RBRACKET
    (211) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (212) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET STATIC assignment_expression RBRACKET
    (213) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (214) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (215) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET type_qualifier_list RBRACKET
    (216) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET assignment_expression RBRACKET
    (219) direct_abstract_declarator -> direct_abstract_declarator . LPAREN RPAREN
    (220) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 197 (abstract_declarator -> pointer direct_abstract_declarator .)
    COLON           reduce using rule 197 (abstract_declarator -> pointer direct_abstract_declarator .)
    COMMA           reduce using rule 197 (abstract_declarator -> pointer direct_abstract_declarator .)
    LBRACKET        shift and go to state 332
    LPAREN          shift and go to state 333


state 332

    (209) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . RBRACKET
    (210) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . TIMES RBRACKET
    (211) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . STATIC type_qualifier_list assignment_expression RBRACKET
    (212) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . STATIC assignment_expression RBRACKET
    (213) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . type_qualifier_list assignment_expression RBRACKET
    (214) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . type_qualifier_list STATIC assignment_expression RBRACKET
    (215) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . type_qualifier_list RBRACKET
    (216) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . assignment_expression RBRACKET
    (184) type_qualifier_list -> . type_qualifier
    (185) type_qualifier_list -> . type_qualifier_list type_qualifier
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACKET        shift and go to state 392
    TIMES           shift and go to state 393
    STATIC          shift and go to state 394
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 81
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    type_qualifier_list            shift and go to state 395
    assignment_expression          shift and go to state 396
    type_qualifier                 shift and go to state 80
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 333

    (219) direct_abstract_declarator -> direct_abstract_declarator LPAREN . RPAREN
    (220) direct_abstract_declarator -> direct_abstract_declarator LPAREN . parameter_type_list RPAREN
    (186) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (187) parameter_type_list -> . parameter_list
    (188) parameter_list -> . parameter_declaration
    (189) parameter_list -> . parameter_list COMMA parameter_declaration
    (190) parameter_declaration -> . declaration_specifiers declarator
    (191) parameter_declaration -> . declaration_specifiers abstract_declarator
    (192) parameter_declaration -> . declaration_specifiers
    (92) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (93) declaration_specifiers -> . storage_class_specifier
    (94) declaration_specifiers -> . type_specifier declaration_specifiers
    (95) declaration_specifiers -> . type_specifier
    (96) declaration_specifiers -> . type_qualifier declaration_specifiers
    (97) declaration_specifiers -> . type_qualifier
    (98) declaration_specifiers -> . function_specifier declaration_specifiers
    (99) declaration_specifiers -> . function_specifier
    (100) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (101) declaration_specifiers -> . alignment_specifier
    (106) storage_class_specifier -> . TYPEDEF
    (107) storage_class_specifier -> . EXTERN
    (108) storage_class_specifier -> . STATIC
    (109) storage_class_specifier -> . THREAD_LOCAL
    (110) storage_class_specifier -> . AUTO
    (111) storage_class_specifier -> . REGISTER
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (160) function_specifier -> . INLINE
    (161) function_specifier -> . NORETURN
    (162) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (163) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    RPAREN          shift and go to state 397
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    INLINE          shift and go to state 39
    NORETURN        shift and go to state 40
    ALIGNAS         shift and go to state 41
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    parameter_type_list            shift and go to state 398
    parameter_list                 shift and go to state 181
    parameter_declaration          shift and go to state 183
    declaration_specifiers         shift and go to state 184
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 42

state 334

    (200) direct_abstract_declarator -> LPAREN abstract_declarator . RPAREN

    RPAREN          shift and go to state 399


state 335

    (217) direct_abstract_declarator -> LPAREN RPAREN .

    LBRACKET        reduce using rule 217 (direct_abstract_declarator -> LPAREN RPAREN .)
    LPAREN          reduce using rule 217 (direct_abstract_declarator -> LPAREN RPAREN .)
    RPAREN          reduce using rule 217 (direct_abstract_declarator -> LPAREN RPAREN .)
    COLON           reduce using rule 217 (direct_abstract_declarator -> LPAREN RPAREN .)
    COMMA           reduce using rule 217 (direct_abstract_declarator -> LPAREN RPAREN .)


state 336

    (218) direct_abstract_declarator -> LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 400


state 337

    (201) direct_abstract_declarator -> LBRACKET RBRACKET .

    LBRACKET        reduce using rule 201 (direct_abstract_declarator -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 201 (direct_abstract_declarator -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 201 (direct_abstract_declarator -> LBRACKET RBRACKET .)
    COLON           reduce using rule 201 (direct_abstract_declarator -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 201 (direct_abstract_declarator -> LBRACKET RBRACKET .)


state 338

    (202) direct_abstract_declarator -> LBRACKET TIMES . RBRACKET
    (37) unary_operator -> TIMES .

    RBRACKET        shift and go to state 401
    LPAREN          reduce using rule 37 (unary_operator -> TIMES .)
    INC_OP          reduce using rule 37 (unary_operator -> TIMES .)
    DEC_OP          reduce using rule 37 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 37 (unary_operator -> TIMES .)
    ALIGNOF         reduce using rule 37 (unary_operator -> TIMES .)
    AND             reduce using rule 37 (unary_operator -> TIMES .)
    TIMES           reduce using rule 37 (unary_operator -> TIMES .)
    PLUS            reduce using rule 37 (unary_operator -> TIMES .)
    MINUS           reduce using rule 37 (unary_operator -> TIMES .)
    TILDE           reduce using rule 37 (unary_operator -> TIMES .)
    NOT             reduce using rule 37 (unary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 37 (unary_operator -> TIMES .)
    INTEGER         reduce using rule 37 (unary_operator -> TIMES .)
    F_CONSTANT      reduce using rule 37 (unary_operator -> TIMES .)
    ENUMERATION_CONSTANT reduce using rule 37 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 37 (unary_operator -> TIMES .)
    FUNC_NAME       reduce using rule 37 (unary_operator -> TIMES .)
    GENERIC         reduce using rule 37 (unary_operator -> TIMES .)


state 339

    (203) direct_abstract_declarator -> LBRACKET STATIC . type_qualifier_list assignment_expression RBRACKET
    (204) direct_abstract_declarator -> LBRACKET STATIC . assignment_expression RBRACKET
    (184) type_qualifier_list -> . type_qualifier
    (185) type_qualifier_list -> . type_qualifier_list type_qualifier
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 81
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    type_qualifier_list            shift and go to state 402
    assignment_expression          shift and go to state 403
    type_qualifier                 shift and go to state 80
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 340

    (205) direct_abstract_declarator -> LBRACKET type_qualifier_list . STATIC assignment_expression RBRACKET
    (206) direct_abstract_declarator -> LBRACKET type_qualifier_list . assignment_expression RBRACKET
    (207) direct_abstract_declarator -> LBRACKET type_qualifier_list . RBRACKET
    (185) type_qualifier_list -> type_qualifier_list . type_qualifier
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    STATIC          shift and go to state 404
    RBRACKET        shift and go to state 406
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 81
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 405
    type_qualifier                 shift and go to state 186
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 341

    (208) direct_abstract_declarator -> LBRACKET assignment_expression . RBRACKET

    RBRACKET        shift and go to state 407


state 342

    (135) struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .

    RBRACE          reduce using rule 135 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    STATIC_ASSERT   reduce using rule 135 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    VOID            reduce using rule 135 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    CHAR            reduce using rule 135 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    SHORT           reduce using rule 135 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    INT             reduce using rule 135 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    LONG            reduce using rule 135 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 135 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 135 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 135 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 135 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    BOOL            reduce using rule 135 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    COMPLEX         reduce using rule 135 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    IMAGINARY       reduce using rule 135 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    CONST           reduce using rule 135 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    RESTRICT        reduce using rule 135 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 135 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    ATOMIC          reduce using rule 135 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    ENUM            reduce using rule 135 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 135 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    UNION           reduce using rule 135 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)


state 343

    (142) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (143) struct_declarator -> . COLON constant_expression
    (144) struct_declarator -> . declarator COLON constant_expression
    (145) struct_declarator -> . declarator
    (164) declarator -> . pointer direct_declarator
    (165) declarator -> . direct_declarator
    (180) pointer -> . TIMES type_qualifier_list pointer
    (181) pointer -> . TIMES type_qualifier_list
    (182) pointer -> . TIMES pointer
    (183) pointer -> . TIMES
    (166) direct_declarator -> . IDENTIFIER
    (167) direct_declarator -> . LPAREN declarator RPAREN
    (168) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (169) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (170) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (171) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (172) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (173) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (174) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (175) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (176) direct_declarator -> . direct_declarator LBRACKET assignment_expression RBRACKET
    (177) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (178) direct_declarator -> . direct_declarator LPAREN RPAREN
    (179) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN

    COLON           shift and go to state 239
    TIMES           shift and go to state 52
    IDENTIFIER      shift and go to state 53
    LPAREN          shift and go to state 54

    struct_declarator              shift and go to state 408
    declarator                     shift and go to state 240
    pointer                        shift and go to state 49
    direct_declarator              shift and go to state 50

state 344

    (143) struct_declarator -> COLON constant_expression .

    SEMICOLON       reduce using rule 143 (struct_declarator -> COLON constant_expression .)
    COMMA           reduce using rule 143 (struct_declarator -> COLON constant_expression .)


state 345

    (144) struct_declarator -> declarator COLON . constant_expression
    (89) constant_expression -> . conditional_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    constant_expression            shift and go to state 409
    conditional_expression         shift and go to state 86
    logical_or_expression          shift and go to state 87
    logical_and_expression         shift and go to state 88
    inclusive_or_expression        shift and go to state 89
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 346

    (128) struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .

    TYPEDEF         reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    EXTERN          reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    STATIC          reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    THREAD_LOCAL    reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    AUTO            reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    REGISTER        reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    VOID            reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    CHAR            reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    SHORT           reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    INT             reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    LONG            reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    FLOAT           reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    DOUBLE          reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    SIGNED          reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    UNSIGNED        reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    BOOL            reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    COMPLEX         reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    IMAGINARY       reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    CONST           reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    RESTRICT        reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    VOLATILE        reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    ATOMIC          reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    INLINE          reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    NORETURN        reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    ALIGNAS         reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    ENUM            reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    STRUCT          reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    UNION           reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    TIMES           reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    IDENTIFIER      reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    LPAREN          reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    LBRACKET        reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    COMMA           reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    RPAREN          reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    SEMICOLON       reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    COLON           reduce using rule 128 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)


state 347

    (147) enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .

    TYPEDEF         reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    EXTERN          reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    STATIC          reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    THREAD_LOCAL    reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    AUTO            reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    REGISTER        reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    VOID            reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    CHAR            reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    SHORT           reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    INT             reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    LONG            reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    FLOAT           reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    DOUBLE          reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    SIGNED          reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    UNSIGNED        reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    BOOL            reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    COMPLEX         reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    IMAGINARY       reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    CONST           reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    RESTRICT        reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    VOLATILE        reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    ATOMIC          reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    INLINE          reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    NORETURN        reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    ALIGNAS         reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    ENUM            reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    STRUCT          reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    UNION           reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    TIMES           reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    IDENTIFIER      reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    LPAREN          reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    LBRACKET        reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    COMMA           reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    RPAREN          reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    SEMICOLON       reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    COLON           reduce using rule 147 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)


state 348

    (152) enumerator_list -> enumerator_list COMMA enumerator .

    RBRACE          reduce using rule 152 (enumerator_list -> enumerator_list COMMA enumerator .)
    COMMA           reduce using rule 152 (enumerator_list -> enumerator_list COMMA enumerator .)


state 349

    (153) enumerator -> enumeration_constant EQUALS constant_expression .

    RBRACE          reduce using rule 153 (enumerator -> enumeration_constant EQUALS constant_expression .)
    COMMA           reduce using rule 153 (enumerator -> enumeration_constant EQUALS constant_expression .)


state 350

    (148) enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .

    TYPEDEF         reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    EXTERN          reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    STATIC          reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    THREAD_LOCAL    reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    AUTO            reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    REGISTER        reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    VOID            reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    CHAR            reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    SHORT           reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    INT             reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    LONG            reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    FLOAT           reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    DOUBLE          reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    SIGNED          reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    UNSIGNED        reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    BOOL            reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    COMPLEX         reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    IMAGINARY       reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    CONST           reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    RESTRICT        reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    VOLATILE        reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    ATOMIC          reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    INLINE          reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    NORETURN        reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    ALIGNAS         reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    ENUM            reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    STRUCT          reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    UNION           reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    TIMES           reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    IDENTIFIER      reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    LPAREN          reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    LBRACKET        reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    COMMA           reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    RPAREN          reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    SEMICOLON       reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    COLON           reduce using rule 148 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)


state 351

    (149) enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA . RBRACE
    (152) enumerator_list -> enumerator_list COMMA . enumerator
    (153) enumerator -> . enumeration_constant EQUALS constant_expression
    (154) enumerator -> . enumeration_constant
    (9) enumeration_constant -> . IDENTIFIER

    RBRACE          shift and go to state 410
    IDENTIFIER      shift and go to state 135

    enumerator                     shift and go to state 348
    enumeration_constant           shift and go to state 134

state 352

    (221) initializer -> LBRACE initializer_list RBRACE .

    SEMICOLON       reduce using rule 221 (initializer -> LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 221 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 221 (initializer -> LBRACE initializer_list RBRACE .)


state 353

    (222) initializer -> LBRACE initializer_list COMMA . RBRACE
    (226) initializer_list -> initializer_list COMMA . designation initializer
    (227) initializer_list -> initializer_list COMMA . initializer
    (228) designation -> . designator_list EQUALS
    (221) initializer -> . LBRACE initializer_list RBRACE
    (222) initializer -> . LBRACE initializer_list COMMA RBRACE
    (223) initializer -> . assignment_expression
    (229) designator_list -> . designator
    (230) designator_list -> . designator_list designator
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (231) designator -> . LBRACKET constant_expression RBRACKET
    (232) designator -> . DOT IDENTIFIER
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 411
    LBRACE          shift and go to state 141
    LBRACKET        shift and go to state 251
    DOT             shift and go to state 252
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    designation                    shift and go to state 412
    initializer                    shift and go to state 413
    designator_list                shift and go to state 249
    assignment_expression          shift and go to state 142
    designator                     shift and go to state 250
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 354

    (224) initializer_list -> designation initializer .

    RBRACE          reduce using rule 224 (initializer_list -> designation initializer .)
    COMMA           reduce using rule 224 (initializer_list -> designation initializer .)


state 355

    (228) designation -> designator_list EQUALS .

    LBRACE          reduce using rule 228 (designation -> designator_list EQUALS .)
    INC_OP          reduce using rule 228 (designation -> designator_list EQUALS .)
    DEC_OP          reduce using rule 228 (designation -> designator_list EQUALS .)
    SIZEOF          reduce using rule 228 (designation -> designator_list EQUALS .)
    ALIGNOF         reduce using rule 228 (designation -> designator_list EQUALS .)
    LPAREN          reduce using rule 228 (designation -> designator_list EQUALS .)
    AND             reduce using rule 228 (designation -> designator_list EQUALS .)
    TIMES           reduce using rule 228 (designation -> designator_list EQUALS .)
    PLUS            reduce using rule 228 (designation -> designator_list EQUALS .)
    MINUS           reduce using rule 228 (designation -> designator_list EQUALS .)
    TILDE           reduce using rule 228 (designation -> designator_list EQUALS .)
    NOT             reduce using rule 228 (designation -> designator_list EQUALS .)
    IDENTIFIER      reduce using rule 228 (designation -> designator_list EQUALS .)
    INTEGER         reduce using rule 228 (designation -> designator_list EQUALS .)
    F_CONSTANT      reduce using rule 228 (designation -> designator_list EQUALS .)
    ENUMERATION_CONSTANT reduce using rule 228 (designation -> designator_list EQUALS .)
    STRING_LITERAL  reduce using rule 228 (designation -> designator_list EQUALS .)
    FUNC_NAME       reduce using rule 228 (designation -> designator_list EQUALS .)
    GENERIC         reduce using rule 228 (designation -> designator_list EQUALS .)


state 356

    (230) designator_list -> designator_list designator .

    EQUALS          reduce using rule 230 (designator_list -> designator_list designator .)
    LBRACKET        reduce using rule 230 (designator_list -> designator_list designator .)
    DOT             reduce using rule 230 (designator_list -> designator_list designator .)


state 357

    (231) designator -> LBRACKET constant_expression . RBRACKET

    RBRACKET        shift and go to state 414


state 358

    (232) designator -> DOT IDENTIFIER .

    EQUALS          reduce using rule 232 (designator -> DOT IDENTIFIER .)
    LBRACKET        reduce using rule 232 (designator -> DOT IDENTIFIER .)
    DOT             reduce using rule 232 (designator -> DOT IDENTIFIER .)


state 359

    (75) assignment_expression -> unary_expression assignment_operator assignment_expression .

    SEMICOLON       reduce using rule 75 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 75 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 75 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 75 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 75 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 75 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 360

    (25) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list COMMA RBRACE
    (43) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LBRACE          shift and go to state 382
    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    cast_expression                shift and go to state 381
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 361

    (240) labeled_statement -> IDENTIFIER COLON statement .

    RBRACE          reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    STATIC_ASSERT   reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    IDENTIFIER      reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    LBRACE          reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    SEMICOLON       reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    TYPEDEF         reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    EXTERN          reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    STATIC          reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    THREAD_LOCAL    reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    AUTO            reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    REGISTER        reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    VOID            reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    CHAR            reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    SHORT           reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    INT             reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    LONG            reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    FLOAT           reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    DOUBLE          reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    SIGNED          reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    UNSIGNED        reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    BOOL            reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    COMPLEX         reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    IMAGINARY       reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    CONST           reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    RESTRICT        reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    VOLATILE        reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    ATOMIC          reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    INLINE          reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    NORETURN        reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    ALIGNAS         reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    ENUM            reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    STRUCT          reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    UNION           reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    INC_OP          reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    DEC_OP          reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    SIZEOF          reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    ALIGNOF         reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    LPAREN          reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    AND             reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    TIMES           reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    PLUS            reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    MINUS           reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    TILDE           reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    NOT             reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    INTEGER         reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    F_CONSTANT      reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    ENUMERATION_CONSTANT reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING_LITERAL  reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    FUNC_NAME       reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    GENERIC         reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)
    ELSE            reduce using rule 240 (labeled_statement -> IDENTIFIER COLON statement .)


state 362

    (241) labeled_statement -> CASE constant_expression COLON . statement
    (234) statement -> . labeled_statement
    (235) statement -> . compound_statement
    (236) statement -> . expression_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) labeled_statement -> . IDENTIFIER COLON statement
    (241) labeled_statement -> . CASE constant_expression COLON statement
    (242) labeled_statement -> . DEFAULT COLON statement
    (243) compound_statement -> . LBRACE RBRACE
    (244) compound_statement -> . LBRACE block_item_list RBRACE
    (249) expression_statement -> . expression SEMICOLON
    (250) expression_statement -> . SEMICOLON
    (251) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (252) selection_statement -> . IF LPAREN expression RPAREN statement
    (253) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (260) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (261) jump_statement -> . CONTINUE SEMICOLON
    (262) jump_statement -> . BREAK SEMICOLON
    (263) jump_statement -> . RETURN SEMICOLON
    (264) jump_statement -> . RETURN expression SEMICOLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LBRACE          shift and go to state 72
    SEMICOLON       shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    statement                      shift and go to state 415
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    expression_statement           shift and go to state 154
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    expression                     shift and go to state 161
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 363

    (242) labeled_statement -> DEFAULT COLON statement .

    RBRACE          reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    STATIC_ASSERT   reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    IDENTIFIER      reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    LBRACE          reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    SEMICOLON       reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    TYPEDEF         reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    EXTERN          reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    STATIC          reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    THREAD_LOCAL    reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    AUTO            reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    REGISTER        reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    VOID            reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    CHAR            reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    SHORT           reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    INT             reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    LONG            reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT           reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLE          reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    SIGNED          reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    UNSIGNED        reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    BOOL            reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    COMPLEX         reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    IMAGINARY       reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    CONST           reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    RESTRICT        reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    VOLATILE        reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    ATOMIC          reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    INLINE          reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    NORETURN        reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    ALIGNAS         reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    ENUM            reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    STRUCT          reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    UNION           reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    INC_OP          reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    DEC_OP          reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    ALIGNOF         reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    AND             reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    TIMES           reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    PLUS            reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    MINUS           reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    TILDE           reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    NOT             reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    INTEGER         reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    F_CONSTANT      reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    ENUMERATION_CONSTANT reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    STRING_LITERAL  reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    FUNC_NAME       reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    GENERIC         reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 242 (labeled_statement -> DEFAULT COLON statement .)


state 364

    (88) expression -> expression COMMA assignment_expression .

    SEMICOLON       reduce using rule 88 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 88 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 88 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 88 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 88 (expression -> expression COMMA assignment_expression .)


state 365

    (251) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (252) selection_statement -> IF LPAREN expression . RPAREN statement
    (88) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 416
    COMMA           shift and go to state 272


state 366

    (253) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (88) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 417
    COMMA           shift and go to state 272


state 367

    (254) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (88) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 418
    COMMA           shift and go to state 272


state 368

    (255) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 419


state 369

    (256) iteration_statement -> FOR LPAREN expression_statement . expression_statement RPAREN statement
    (257) iteration_statement -> FOR LPAREN expression_statement . expression_statement expression RPAREN statement
    (249) expression_statement -> . expression SEMICOLON
    (250) expression_statement -> . SEMICOLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 151
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression_statement           shift and go to state 420
    expression                     shift and go to state 161
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 370

    (258) iteration_statement -> FOR LPAREN declaration . expression_statement RPAREN statement
    (259) iteration_statement -> FOR LPAREN declaration . expression_statement expression RPAREN statement
    (249) expression_statement -> . expression SEMICOLON
    (250) expression_statement -> . SEMICOLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 151
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression_statement           shift and go to state 421
    expression                     shift and go to state 161
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 371

    (260) jump_statement -> GOTO IDENTIFIER SEMICOLON .

    RBRACE          reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STATIC_ASSERT   reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LBRACE          reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IF              reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DO              reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TYPEDEF         reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    EXTERN          reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    THREAD_LOCAL    reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    REGISTER        reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    INT             reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIGNED          reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    UNSIGNED        reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    COMPLEX         reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IMAGINARY       reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    RESTRICT        reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    VOLATILE        reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ATOMIC          reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    INLINE          reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NORETURN        reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ALIGNAS         reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ENUM            reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRUCT          reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    UNION           reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    INC_OP          reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DEC_OP          reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIZEOF          reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ALIGNOF         reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    AND             reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TIMES           reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    PLUS            reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TILDE           reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NOT             reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    INTEGER         reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    F_CONSTANT      reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ENUMERATION_CONSTANT reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING_LITERAL  reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FUNC_NAME       reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    GENERIC         reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 260 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)


state 372

    (264) jump_statement -> RETURN expression SEMICOLON .

    RBRACE          reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    STATIC_ASSERT   reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    GOTO            reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    TYPEDEF         reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    EXTERN          reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    STATIC          reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    THREAD_LOCAL    reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    AUTO            reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    REGISTER        reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    VOID            reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    SHORT           reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    LONG            reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    DOUBLE          reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    SIGNED          reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    UNSIGNED        reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    BOOL            reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    COMPLEX         reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    IMAGINARY       reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    CONST           reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    RESTRICT        reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    VOLATILE        reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    ATOMIC          reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    INLINE          reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    NORETURN        reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    ALIGNAS         reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    ENUM            reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    STRUCT          reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    UNION           reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    INC_OP          reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    DEC_OP          reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    SIZEOF          reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    ALIGNOF         reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    AND             reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    TIMES           reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    PLUS            reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    TILDE           reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    INTEGER         reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    F_CONSTANT      reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    ENUMERATION_CONSTANT reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    FUNC_NAME       reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    GENERIC         reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 264 (jump_statement -> RETURN expression SEMICOLON .)


state 373

    (170) direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression . RBRACKET

    RBRACKET        shift and go to state 422


state 374

    (171) direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    EQUALS          reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    LBRACE          reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    STATIC_ASSERT   reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    EXTERN          reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    STATIC          reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    THREAD_LOCAL    reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    AUTO            reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    REGISTER        reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    VOID            reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    CHAR            reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    SHORT           reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    INT             reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    LONG            reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    FLOAT           reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    SIGNED          reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    BOOL            reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    COMPLEX         reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    IMAGINARY       reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    CONST           reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    RESTRICT        reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    ATOMIC          reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    INLINE          reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    NORETURN        reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    ALIGNAS         reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    ENUM            reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    STRUCT          reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    UNION           reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    SEMICOLON       reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)


state 375

    (172) direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .

    LBRACKET        reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    LPAREN          reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    EQUALS          reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    LBRACE          reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    STATIC_ASSERT   reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    TYPEDEF         reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    EXTERN          reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    STATIC          reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    THREAD_LOCAL    reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    AUTO            reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    REGISTER        reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    VOID            reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    CHAR            reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    SHORT           reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    INT             reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    LONG            reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    FLOAT           reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    DOUBLE          reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    SIGNED          reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    UNSIGNED        reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    BOOL            reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    COMPLEX         reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    IMAGINARY       reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    CONST           reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    RESTRICT        reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    VOLATILE        reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    ATOMIC          reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    INLINE          reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    NORETURN        reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    ALIGNAS         reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    ENUM            reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    STRUCT          reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    UNION           reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    SEMICOLON       reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    COMMA           reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    RPAREN          reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    COLON           reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)


state 376

    (173) direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 423


state 377

    (174) direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .

    LBRACKET        reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    LPAREN          reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    EQUALS          reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    LBRACE          reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    STATIC_ASSERT   reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    EXTERN          reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    STATIC          reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    THREAD_LOCAL    reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    AUTO            reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    REGISTER        reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    VOID            reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    CHAR            reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    SHORT           reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    INT             reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    LONG            reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    FLOAT           reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    SIGNED          reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    BOOL            reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    COMPLEX         reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    IMAGINARY       reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    CONST           reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    RESTRICT        reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    ATOMIC          reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    INLINE          reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    NORETURN        reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    ALIGNAS         reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    ENUM            reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    STRUCT          reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    UNION           reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    SEMICOLON       reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    COMMA           reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    RPAREN          reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    COLON           reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)


state 378

    (194) identifier_list -> identifier_list COMMA IDENTIFIER .

    RPAREN          reduce using rule 194 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 194 (identifier_list -> identifier_list COMMA IDENTIFIER .)


state 379

    (186) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    RPAREN          reduce using rule 186 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 380

    (189) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 189 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 189 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 381

    (43) cast_expression -> LPAREN type_name RPAREN cast_expression .

    TIMES           reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDE          reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD             reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUS            reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUS           reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LEFT_OP         reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RIGHT_OP        reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LT              reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GT              reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LE_OP           reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GE_OP           reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQ_OP           reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NE_OP           reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND             reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR             reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR              reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND_OP          reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    QUESTION        reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR_OP           reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMICOLON       reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACKET        reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUALS          reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MUL_ASSIGN      reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIV_ASSIGN      reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD_ASSIGN      reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ADD_ASSIGN      reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SUB_ASSIGN      reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LEFT_ASSIGN     reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RIGHT_ASSIGN    reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND_ASSIGN      reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR_ASSIGN      reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR_ASSIGN       reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACE          reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 43 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 382

    (25) postfix_expression -> LPAREN type_name RPAREN LBRACE . initializer_list RBRACE
    (26) postfix_expression -> LPAREN type_name RPAREN LBRACE . initializer_list COMMA RBRACE
    (224) initializer_list -> . designation initializer
    (225) initializer_list -> . initializer
    (226) initializer_list -> . initializer_list COMMA designation initializer
    (227) initializer_list -> . initializer_list COMMA initializer
    (228) designation -> . designator_list EQUALS
    (221) initializer -> . LBRACE initializer_list RBRACE
    (222) initializer -> . LBRACE initializer_list COMMA RBRACE
    (223) initializer -> . assignment_expression
    (229) designator_list -> . designator
    (230) designator_list -> . designator_list designator
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (231) designator -> . LBRACKET constant_expression RBRACKET
    (232) designator -> . DOT IDENTIFIER
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 141
    LBRACKET        shift and go to state 251
    DOT             shift and go to state 252
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    initializer_list               shift and go to state 424
    designation                    shift and go to state 247
    initializer                    shift and go to state 248
    designator_list                shift and go to state 249
    assignment_expression          shift and go to state 142
    designator                     shift and go to state 250
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 383

    (233) static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 425


state 384

    (73) conditional_expression -> logical_or_expression QUESTION expression COLON . conditional_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    logical_or_expression          shift and go to state 87
    conditional_expression         shift and go to state 426
    logical_and_expression         shift and go to state 88
    inclusive_or_expression        shift and go to state 89
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 385

    (18) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DOT             reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PTR_OP          reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    INC_OP          reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DEC_OP          reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LEFT_OP         reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RIGHT_OP        reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE_OP           reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE_OP           reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ_OP           reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE_OP           reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOR             reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND_OP          reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    QUESTION        reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR_OP           reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MUL_ASSIGN      reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIV_ASSIGN      reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD_ASSIGN      reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ADD_ASSIGN      reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SUB_ASSIGN      reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LEFT_ASSIGN     reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RIGHT_ASSIGN    reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND_ASSIGN      reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOR_ASSIGN      reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR_ASSIGN       reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 18 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 386

    (20) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LBRACKET        reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DOT             reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PTR_OP          reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    INC_OP          reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DEC_OP          reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMES           reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD             reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LEFT_OP         reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RIGHT_OP        reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LT              reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GT              reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LE_OP           reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GE_OP           reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ_OP           reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NE_OP           reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND             reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR             reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR              reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND_OP          reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    QUESTION        reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR_OP           reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUALS          reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MUL_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIV_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ADD_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SUB_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LEFT_ASSIGN     reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RIGHT_ASSIGN    reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR_ASSIGN       reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMICOLON       reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 20 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 387

    (28) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 427
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 388

    (25) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list COMMA RBRACE

    LBRACE          shift and go to state 382


state 389

    (34) unary_expression -> SIZEOF LPAREN type_name RPAREN .
    (25) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list COMMA RBRACE

    TIMES           reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVIDE          reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MOD             reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUS            reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LEFT_OP         reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RIGHT_OP        reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LT              reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GT              reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LE_OP           reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GE_OP           reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQ_OP           reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NE_OP           reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND             reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR             reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR              reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND_OP          reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    QUESTION        reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR_OP           reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQUALS          reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MUL_ASSIGN      reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIV_ASSIGN      reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MOD_ASSIGN      reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ADD_ASSIGN      reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SUB_ASSIGN      reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LEFT_ASSIGN     reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RIGHT_ASSIGN    reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND_ASSIGN      reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR_ASSIGN      reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR_ASSIGN       reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACKET        reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACE          reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 34 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LBRACE          shift and go to state 382


state 390

    (35) unary_expression -> ALIGNOF LPAREN type_name RPAREN .

    TIMES           reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    DIVIDE          reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    MOD             reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    PLUS            reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    LEFT_OP         reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    RIGHT_OP        reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    LT              reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    GT              reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    LE_OP           reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    GE_OP           reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    EQ_OP           reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    NE_OP           reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    AND             reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    XOR             reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    OR              reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    AND_OP          reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    QUESTION        reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    OR_OP           reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    EQUALS          reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    MUL_ASSIGN      reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    DIV_ASSIGN      reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    MOD_ASSIGN      reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    ADD_ASSIGN      reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    SUB_ASSIGN      reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    LEFT_ASSIGN     reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    RIGHT_ASSIGN    reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    AND_ASSIGN      reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    XOR_ASSIGN      reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    OR_ASSIGN       reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    RBRACKET        reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    RBRACE          reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 35 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)


state 391

    (12) generic_selection -> GENERIC LPAREN assignment_expression COMMA . generic_assoc_list RPAREN
    (13) generic_assoc_list -> . generic_association
    (14) generic_assoc_list -> . generic_assoc_list COMMA generic_association
    (15) generic_association -> . type_name COLON assignment_expression
    (16) generic_association -> . DEFAULT COLON assignment_expression
    (195) type_name -> . specifier_qualifier_list abstract_declarator
    (196) type_name -> . specifier_qualifier_list
    (137) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (138) specifier_qualifier_list -> . type_specifier
    (139) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (140) specifier_qualifier_list -> . type_qualifier
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    DEFAULT         shift and go to state 431
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    generic_assoc_list             shift and go to state 428
    generic_association            shift and go to state 429
    type_name                      shift and go to state 430
    specifier_qualifier_list       shift and go to state 122
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 42

state 392

    (209) direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .

    LBRACKET        reduce using rule 209 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)
    LPAREN          reduce using rule 209 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)
    RPAREN          reduce using rule 209 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)
    COLON           reduce using rule 209 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)
    COMMA           reduce using rule 209 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)


state 393

    (210) direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES . RBRACKET
    (37) unary_operator -> TIMES .

    RBRACKET        shift and go to state 432
    LPAREN          reduce using rule 37 (unary_operator -> TIMES .)
    INC_OP          reduce using rule 37 (unary_operator -> TIMES .)
    DEC_OP          reduce using rule 37 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 37 (unary_operator -> TIMES .)
    ALIGNOF         reduce using rule 37 (unary_operator -> TIMES .)
    AND             reduce using rule 37 (unary_operator -> TIMES .)
    TIMES           reduce using rule 37 (unary_operator -> TIMES .)
    PLUS            reduce using rule 37 (unary_operator -> TIMES .)
    MINUS           reduce using rule 37 (unary_operator -> TIMES .)
    TILDE           reduce using rule 37 (unary_operator -> TIMES .)
    NOT             reduce using rule 37 (unary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 37 (unary_operator -> TIMES .)
    INTEGER         reduce using rule 37 (unary_operator -> TIMES .)
    F_CONSTANT      reduce using rule 37 (unary_operator -> TIMES .)
    ENUMERATION_CONSTANT reduce using rule 37 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 37 (unary_operator -> TIMES .)
    FUNC_NAME       reduce using rule 37 (unary_operator -> TIMES .)
    GENERIC         reduce using rule 37 (unary_operator -> TIMES .)


state 394

    (211) direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC . type_qualifier_list assignment_expression RBRACKET
    (212) direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC . assignment_expression RBRACKET
    (184) type_qualifier_list -> . type_qualifier
    (185) type_qualifier_list -> . type_qualifier_list type_qualifier
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 81
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    type_qualifier_list            shift and go to state 433
    assignment_expression          shift and go to state 434
    type_qualifier                 shift and go to state 80
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 395

    (213) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list . assignment_expression RBRACKET
    (214) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list . STATIC assignment_expression RBRACKET
    (215) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list . RBRACKET
    (185) type_qualifier_list -> type_qualifier_list . type_qualifier
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    STATIC          shift and go to state 437
    RBRACKET        shift and go to state 436
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 81
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 435
    type_qualifier                 shift and go to state 186
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 396

    (216) direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression . RBRACKET

    RBRACKET        shift and go to state 438


state 397

    (219) direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .

    LBRACKET        reduce using rule 219 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 219 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 219 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    COLON           reduce using rule 219 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 219 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)


state 398

    (220) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 439


state 399

    (200) direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .

    LBRACKET        reduce using rule 200 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LPAREN          reduce using rule 200 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 200 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COLON           reduce using rule 200 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 200 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 400

    (218) direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 218 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 218 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 218 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 218 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 218 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)


state 401

    (202) direct_abstract_declarator -> LBRACKET TIMES RBRACKET .

    LBRACKET        reduce using rule 202 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    LPAREN          reduce using rule 202 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 202 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    COLON           reduce using rule 202 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    COMMA           reduce using rule 202 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)


state 402

    (203) direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list . assignment_expression RBRACKET
    (185) type_qualifier_list -> type_qualifier_list . type_qualifier
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 81
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 440
    type_qualifier                 shift and go to state 186
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 403

    (204) direct_abstract_declarator -> LBRACKET STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 441


state 404

    (205) direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC . assignment_expression RBRACKET
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 442
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 405

    (206) direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression . RBRACKET

    RBRACKET        shift and go to state 443


state 406

    (207) direct_abstract_declarator -> LBRACKET type_qualifier_list RBRACKET .

    LBRACKET        reduce using rule 207 (direct_abstract_declarator -> LBRACKET type_qualifier_list RBRACKET .)
    LPAREN          reduce using rule 207 (direct_abstract_declarator -> LBRACKET type_qualifier_list RBRACKET .)
    RPAREN          reduce using rule 207 (direct_abstract_declarator -> LBRACKET type_qualifier_list RBRACKET .)
    COLON           reduce using rule 207 (direct_abstract_declarator -> LBRACKET type_qualifier_list RBRACKET .)
    COMMA           reduce using rule 207 (direct_abstract_declarator -> LBRACKET type_qualifier_list RBRACKET .)


state 407

    (208) direct_abstract_declarator -> LBRACKET assignment_expression RBRACKET .

    LBRACKET        reduce using rule 208 (direct_abstract_declarator -> LBRACKET assignment_expression RBRACKET .)
    LPAREN          reduce using rule 208 (direct_abstract_declarator -> LBRACKET assignment_expression RBRACKET .)
    RPAREN          reduce using rule 208 (direct_abstract_declarator -> LBRACKET assignment_expression RBRACKET .)
    COLON           reduce using rule 208 (direct_abstract_declarator -> LBRACKET assignment_expression RBRACKET .)
    COMMA           reduce using rule 208 (direct_abstract_declarator -> LBRACKET assignment_expression RBRACKET .)


state 408

    (142) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    SEMICOLON       reduce using rule 142 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    COMMA           reduce using rule 142 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 409

    (144) struct_declarator -> declarator COLON constant_expression .

    SEMICOLON       reduce using rule 144 (struct_declarator -> declarator COLON constant_expression .)
    COMMA           reduce using rule 144 (struct_declarator -> declarator COLON constant_expression .)


state 410

    (149) enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .

    TYPEDEF         reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    EXTERN          reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    STATIC          reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    THREAD_LOCAL    reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    AUTO            reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    REGISTER        reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    VOID            reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    CHAR            reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    SHORT           reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    INT             reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    LONG            reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    FLOAT           reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    DOUBLE          reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    SIGNED          reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    UNSIGNED        reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    BOOL            reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    COMPLEX         reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    IMAGINARY       reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    CONST           reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    RESTRICT        reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    VOLATILE        reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    ATOMIC          reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    INLINE          reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    NORETURN        reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    ALIGNAS         reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    ENUM            reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    STRUCT          reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    UNION           reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    TIMES           reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    IDENTIFIER      reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    LPAREN          reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    LBRACKET        reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    COMMA           reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    RPAREN          reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    SEMICOLON       reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    COLON           reduce using rule 149 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)


state 411

    (222) initializer -> LBRACE initializer_list COMMA RBRACE .

    SEMICOLON       reduce using rule 222 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 222 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 222 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 412

    (226) initializer_list -> initializer_list COMMA designation . initializer
    (221) initializer -> . LBRACE initializer_list RBRACE
    (222) initializer -> . LBRACE initializer_list COMMA RBRACE
    (223) initializer -> . assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 141
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    initializer                    shift and go to state 444
    assignment_expression          shift and go to state 142
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 413

    (227) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 227 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 227 (initializer_list -> initializer_list COMMA initializer .)


state 414

    (231) designator -> LBRACKET constant_expression RBRACKET .

    EQUALS          reduce using rule 231 (designator -> LBRACKET constant_expression RBRACKET .)
    LBRACKET        reduce using rule 231 (designator -> LBRACKET constant_expression RBRACKET .)
    DOT             reduce using rule 231 (designator -> LBRACKET constant_expression RBRACKET .)


state 415

    (241) labeled_statement -> CASE constant_expression COLON statement .

    RBRACE          reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    STATIC_ASSERT   reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    IDENTIFIER      reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    LBRACE          reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMICOLON       reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPEDEF         reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    EXTERN          reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    STATIC          reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    THREAD_LOCAL    reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    AUTO            reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    REGISTER        reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    VOID            reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR            reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    SHORT           reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    INT             reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    LONG            reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT           reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLE          reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    SIGNED          reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    UNSIGNED        reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    BOOL            reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    COMPLEX         reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    IMAGINARY       reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    CONST           reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    RESTRICT        reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    VOLATILE        reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    ATOMIC          reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    INLINE          reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    NORETURN        reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    ALIGNAS         reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    ENUM            reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    STRUCT          reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    UNION           reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    INC_OP          reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    DEC_OP          reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    ALIGNOF         reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    AND             reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    TIMES           reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUS            reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUS           reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    TILDE           reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    NOT             reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    INTEGER         reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    F_CONSTANT      reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    ENUMERATION_CONSTANT reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING_LITERAL  reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    FUNC_NAME       reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    GENERIC         reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 241 (labeled_statement -> CASE constant_expression COLON statement .)


state 416

    (251) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (252) selection_statement -> IF LPAREN expression RPAREN . statement
    (234) statement -> . labeled_statement
    (235) statement -> . compound_statement
    (236) statement -> . expression_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) labeled_statement -> . IDENTIFIER COLON statement
    (241) labeled_statement -> . CASE constant_expression COLON statement
    (242) labeled_statement -> . DEFAULT COLON statement
    (243) compound_statement -> . LBRACE RBRACE
    (244) compound_statement -> . LBRACE block_item_list RBRACE
    (249) expression_statement -> . expression SEMICOLON
    (250) expression_statement -> . SEMICOLON
    (251) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (252) selection_statement -> . IF LPAREN expression RPAREN statement
    (253) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (260) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (261) jump_statement -> . CONTINUE SEMICOLON
    (262) jump_statement -> . BREAK SEMICOLON
    (263) jump_statement -> . RETURN SEMICOLON
    (264) jump_statement -> . RETURN expression SEMICOLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LBRACE          shift and go to state 72
    SEMICOLON       shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression                     shift and go to state 161
    statement                      shift and go to state 445
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    expression_statement           shift and go to state 154
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 417

    (253) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (234) statement -> . labeled_statement
    (235) statement -> . compound_statement
    (236) statement -> . expression_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) labeled_statement -> . IDENTIFIER COLON statement
    (241) labeled_statement -> . CASE constant_expression COLON statement
    (242) labeled_statement -> . DEFAULT COLON statement
    (243) compound_statement -> . LBRACE RBRACE
    (244) compound_statement -> . LBRACE block_item_list RBRACE
    (249) expression_statement -> . expression SEMICOLON
    (250) expression_statement -> . SEMICOLON
    (251) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (252) selection_statement -> . IF LPAREN expression RPAREN statement
    (253) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (260) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (261) jump_statement -> . CONTINUE SEMICOLON
    (262) jump_statement -> . BREAK SEMICOLON
    (263) jump_statement -> . RETURN SEMICOLON
    (264) jump_statement -> . RETURN expression SEMICOLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LBRACE          shift and go to state 72
    SEMICOLON       shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression                     shift and go to state 161
    statement                      shift and go to state 446
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    expression_statement           shift and go to state 154
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 418

    (254) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (234) statement -> . labeled_statement
    (235) statement -> . compound_statement
    (236) statement -> . expression_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) labeled_statement -> . IDENTIFIER COLON statement
    (241) labeled_statement -> . CASE constant_expression COLON statement
    (242) labeled_statement -> . DEFAULT COLON statement
    (243) compound_statement -> . LBRACE RBRACE
    (244) compound_statement -> . LBRACE block_item_list RBRACE
    (249) expression_statement -> . expression SEMICOLON
    (250) expression_statement -> . SEMICOLON
    (251) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (252) selection_statement -> . IF LPAREN expression RPAREN statement
    (253) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (260) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (261) jump_statement -> . CONTINUE SEMICOLON
    (262) jump_statement -> . BREAK SEMICOLON
    (263) jump_statement -> . RETURN SEMICOLON
    (264) jump_statement -> . RETURN expression SEMICOLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LBRACE          shift and go to state 72
    SEMICOLON       shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression                     shift and go to state 161
    statement                      shift and go to state 447
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    expression_statement           shift and go to state 154
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 419

    (255) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMICOLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression                     shift and go to state 448
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 420

    (256) iteration_statement -> FOR LPAREN expression_statement expression_statement . RPAREN statement
    (257) iteration_statement -> FOR LPAREN expression_statement expression_statement . expression RPAREN statement
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 449
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression                     shift and go to state 450
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 421

    (258) iteration_statement -> FOR LPAREN declaration expression_statement . RPAREN statement
    (259) iteration_statement -> FOR LPAREN declaration expression_statement . expression RPAREN statement
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 451
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression                     shift and go to state 452
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 422

    (170) direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .

    LBRACKET        reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    LPAREN          reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    EQUALS          reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    LBRACE          reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    STATIC_ASSERT   reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    EXTERN          reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    STATIC          reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    THREAD_LOCAL    reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    AUTO            reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    REGISTER        reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    VOID            reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    CHAR            reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    SHORT           reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    INT             reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    LONG            reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    FLOAT           reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    SIGNED          reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    BOOL            reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    COMPLEX         reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    IMAGINARY       reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    CONST           reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    RESTRICT        reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    ATOMIC          reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    INLINE          reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    NORETURN        reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    ALIGNAS         reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    ENUM            reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    STRUCT          reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    UNION           reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    SEMICOLON       reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    COMMA           reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    RPAREN          reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    COLON           reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)


state 423

    (173) direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    EQUALS          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LBRACE          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    STATIC_ASSERT   reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    EXTERN          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    STATIC          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    THREAD_LOCAL    reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    AUTO            reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    REGISTER        reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    VOID            reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    CHAR            reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SHORT           reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    INT             reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LONG            reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    FLOAT           reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SIGNED          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    BOOL            reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COMPLEX         reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    IMAGINARY       reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    CONST           reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RESTRICT        reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    ATOMIC          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    INLINE          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    NORETURN        reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    ALIGNAS         reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    ENUM            reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    STRUCT          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    UNION           reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SEMICOLON       reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)


state 424

    (25) postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list . RBRACE
    (26) postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list . COMMA RBRACE
    (226) initializer_list -> initializer_list . COMMA designation initializer
    (227) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 453
    COMMA           shift and go to state 454


state 425

    (233) static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .

    SEMICOLON       reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    STATIC_ASSERT   reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    TYPEDEF         reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    EXTERN          reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    STATIC          reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    THREAD_LOCAL    reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    AUTO            reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    REGISTER        reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    VOID            reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    CHAR            reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    SHORT           reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    INT             reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    LONG            reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    FLOAT           reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    SIGNED          reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    UNSIGNED        reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    BOOL            reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    COMPLEX         reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    IMAGINARY       reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    CONST           reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    RESTRICT        reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    ATOMIC          reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    INLINE          reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    NORETURN        reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    ALIGNAS         reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    ENUM            reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    STRUCT          reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    UNION           reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    $end            reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    LBRACE          reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    RBRACE          reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    CASE            reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    IF              reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    SWITCH          reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    WHILE           reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    DO              reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    FOR             reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    GOTO            reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    BREAK           reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    RETURN          reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    INC_OP          reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    DEC_OP          reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    ALIGNOF         reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    LPAREN          reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    AND             reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    TIMES           reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    PLUS            reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    MINUS           reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    TILDE           reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    NOT             reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    INTEGER         reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    F_CONSTANT      reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    ENUMERATION_CONSTANT reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    STRING_LITERAL  reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    FUNC_NAME       reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)
    GENERIC         reduce using rule 233 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON .)


state 426

    (73) conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .

    COMMA           reduce using rule 73 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    RPAREN          reduce using rule 73 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    SEMICOLON       reduce using rule 73 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    RBRACKET        reduce using rule 73 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    RBRACE          reduce using rule 73 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    COLON           reduce using rule 73 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)


state 427

    (28) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 28 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 28 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 428

    (12) generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list . RPAREN
    (14) generic_assoc_list -> generic_assoc_list . COMMA generic_association

    RPAREN          shift and go to state 456
    COMMA           shift and go to state 455


state 429

    (13) generic_assoc_list -> generic_association .

    RPAREN          reduce using rule 13 (generic_assoc_list -> generic_association .)
    COMMA           reduce using rule 13 (generic_assoc_list -> generic_association .)


state 430

    (15) generic_association -> type_name . COLON assignment_expression

    COLON           shift and go to state 457


state 431

    (16) generic_association -> DEFAULT . COLON assignment_expression

    COLON           shift and go to state 458


state 432

    (210) direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .

    LBRACKET        reduce using rule 210 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    LPAREN          reduce using rule 210 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 210 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    COLON           reduce using rule 210 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    COMMA           reduce using rule 210 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)


state 433

    (211) direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list . assignment_expression RBRACKET
    (185) type_qualifier_list -> type_qualifier_list . type_qualifier
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 81
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 459
    type_qualifier                 shift and go to state 186
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 434

    (212) direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 460


state 435

    (213) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression . RBRACKET

    RBRACKET        shift and go to state 461


state 436

    (215) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET .

    LBRACKET        reduce using rule 215 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET .)
    LPAREN          reduce using rule 215 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET .)
    RPAREN          reduce using rule 215 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET .)
    COLON           reduce using rule 215 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET .)
    COMMA           reduce using rule 215 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET .)


state 437

    (214) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC . assignment_expression RBRACKET
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 462
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 438

    (216) direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression RBRACKET .

    LBRACKET        reduce using rule 216 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression RBRACKET .)
    LPAREN          reduce using rule 216 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression RBRACKET .)
    RPAREN          reduce using rule 216 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression RBRACKET .)
    COLON           reduce using rule 216 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression RBRACKET .)
    COMMA           reduce using rule 216 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression RBRACKET .)


state 439

    (220) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 220 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 220 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 220 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 220 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 220 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)


state 440

    (203) direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression . RBRACKET

    RBRACKET        shift and go to state 463


state 441

    (204) direct_abstract_declarator -> LBRACKET STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 204 (direct_abstract_declarator -> LBRACKET STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 204 (direct_abstract_declarator -> LBRACKET STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 204 (direct_abstract_declarator -> LBRACKET STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 204 (direct_abstract_declarator -> LBRACKET STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 204 (direct_abstract_declarator -> LBRACKET STATIC assignment_expression RBRACKET .)


state 442

    (205) direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 464


state 443

    (206) direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression RBRACKET .

    LBRACKET        reduce using rule 206 (direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    LPAREN          reduce using rule 206 (direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    RPAREN          reduce using rule 206 (direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    COLON           reduce using rule 206 (direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    COMMA           reduce using rule 206 (direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression RBRACKET .)


state 444

    (226) initializer_list -> initializer_list COMMA designation initializer .

    RBRACE          reduce using rule 226 (initializer_list -> initializer_list COMMA designation initializer .)
    COMMA           reduce using rule 226 (initializer_list -> initializer_list COMMA designation initializer .)


state 445

    (251) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement
    (252) selection_statement -> IF LPAREN expression RPAREN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 465
    RBRACE          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STATIC_ASSERT   reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    THREAD_LOCAL    reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LONG            reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    COMPLEX         reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IMAGINARY       reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONST           reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RESTRICT        reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ATOMIC          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NORETURN        reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ALIGNAS         reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNION           reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INC_OP          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEC_OP          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ALIGNOF         reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AND             reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TILDE           reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INTEGER         reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    F_CONSTANT      reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ENUMERATION_CONSTANT reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FUNC_NAME       reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GENERIC         reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .)

  ! ELSE            [ reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 446

    (253) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STATIC_ASSERT   reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CASE            reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    THREAD_LOCAL    reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOID            reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT             reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LONG            reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    COMPLEX         reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IMAGINARY       reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONST           reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RESTRICT        reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ATOMIC          reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NORETURN        reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ALIGNAS         reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNION           reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INC_OP          reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEC_OP          reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ALIGNOF         reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AND             reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TILDE           reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NOT             reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INTEGER         reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    F_CONSTANT      reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ENUMERATION_CONSTANT reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FUNC_NAME       reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GENERIC         reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 253 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 447

    (254) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STATIC_ASSERT   reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    THREAD_LOCAL    reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LONG            reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    COMPLEX         reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IMAGINARY       reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONST           reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RESTRICT        reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ATOMIC          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NORETURN        reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ALIGNAS         reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNION           reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INC_OP          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEC_OP          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ALIGNOF         reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AND             reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TILDE           reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INTEGER         reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    F_CONSTANT      reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ENUMERATION_CONSTANT reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FUNC_NAME       reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GENERIC         reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 448

    (255) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMICOLON
    (88) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 466
    COMMA           shift and go to state 272


state 449

    (256) iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN . statement
    (234) statement -> . labeled_statement
    (235) statement -> . compound_statement
    (236) statement -> . expression_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) labeled_statement -> . IDENTIFIER COLON statement
    (241) labeled_statement -> . CASE constant_expression COLON statement
    (242) labeled_statement -> . DEFAULT COLON statement
    (243) compound_statement -> . LBRACE RBRACE
    (244) compound_statement -> . LBRACE block_item_list RBRACE
    (249) expression_statement -> . expression SEMICOLON
    (250) expression_statement -> . SEMICOLON
    (251) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (252) selection_statement -> . IF LPAREN expression RPAREN statement
    (253) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (260) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (261) jump_statement -> . CONTINUE SEMICOLON
    (262) jump_statement -> . BREAK SEMICOLON
    (263) jump_statement -> . RETURN SEMICOLON
    (264) jump_statement -> . RETURN expression SEMICOLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LBRACE          shift and go to state 72
    SEMICOLON       shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression_statement           shift and go to state 154
    statement                      shift and go to state 467
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    expression                     shift and go to state 161
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 450

    (257) iteration_statement -> FOR LPAREN expression_statement expression_statement expression . RPAREN statement
    (88) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 468
    COMMA           shift and go to state 272


state 451

    (258) iteration_statement -> FOR LPAREN declaration expression_statement RPAREN . statement
    (234) statement -> . labeled_statement
    (235) statement -> . compound_statement
    (236) statement -> . expression_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) labeled_statement -> . IDENTIFIER COLON statement
    (241) labeled_statement -> . CASE constant_expression COLON statement
    (242) labeled_statement -> . DEFAULT COLON statement
    (243) compound_statement -> . LBRACE RBRACE
    (244) compound_statement -> . LBRACE block_item_list RBRACE
    (249) expression_statement -> . expression SEMICOLON
    (250) expression_statement -> . SEMICOLON
    (251) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (252) selection_statement -> . IF LPAREN expression RPAREN statement
    (253) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (260) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (261) jump_statement -> . CONTINUE SEMICOLON
    (262) jump_statement -> . BREAK SEMICOLON
    (263) jump_statement -> . RETURN SEMICOLON
    (264) jump_statement -> . RETURN expression SEMICOLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LBRACE          shift and go to state 72
    SEMICOLON       shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression_statement           shift and go to state 154
    statement                      shift and go to state 469
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    expression                     shift and go to state 161
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 452

    (259) iteration_statement -> FOR LPAREN declaration expression_statement expression . RPAREN statement
    (88) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 470
    COMMA           shift and go to state 272


state 453

    (25) postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .

    LBRACKET        reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    LPAREN          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    DOT             reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    PTR_OP          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    INC_OP          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    DEC_OP          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    TIMES           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    DIVIDE          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    MOD             reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    PLUS            reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    MINUS           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    LEFT_OP         reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    RIGHT_OP        reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    LT              reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    GT              reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    LE_OP           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    GE_OP           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    EQ_OP           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    NE_OP           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    AND             reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    XOR             reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    OR              reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    AND_OP          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    QUESTION        reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    OR_OP           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    RPAREN          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    EQUALS          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    MUL_ASSIGN      reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    DIV_ASSIGN      reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    MOD_ASSIGN      reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    ADD_ASSIGN      reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    SUB_ASSIGN      reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    LEFT_ASSIGN     reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    RIGHT_ASSIGN    reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    AND_ASSIGN      reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    XOR_ASSIGN      reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    OR_ASSIGN       reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    SEMICOLON       reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    RBRACKET        reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    COLON           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)


state 454

    (26) postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA . RBRACE
    (226) initializer_list -> initializer_list COMMA . designation initializer
    (227) initializer_list -> initializer_list COMMA . initializer
    (228) designation -> . designator_list EQUALS
    (221) initializer -> . LBRACE initializer_list RBRACE
    (222) initializer -> . LBRACE initializer_list COMMA RBRACE
    (223) initializer -> . assignment_expression
    (229) designator_list -> . designator
    (230) designator_list -> . designator_list designator
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (231) designator -> . LBRACKET constant_expression RBRACKET
    (232) designator -> . DOT IDENTIFIER
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 471
    LBRACE          shift and go to state 141
    LBRACKET        shift and go to state 251
    DOT             shift and go to state 252
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    designation                    shift and go to state 412
    initializer                    shift and go to state 413
    designator_list                shift and go to state 249
    assignment_expression          shift and go to state 142
    designator                     shift and go to state 250
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 455

    (14) generic_assoc_list -> generic_assoc_list COMMA . generic_association
    (15) generic_association -> . type_name COLON assignment_expression
    (16) generic_association -> . DEFAULT COLON assignment_expression
    (195) type_name -> . specifier_qualifier_list abstract_declarator
    (196) type_name -> . specifier_qualifier_list
    (137) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (138) specifier_qualifier_list -> . type_specifier
    (139) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (140) specifier_qualifier_list -> . type_qualifier
    (112) type_specifier -> . VOID
    (113) type_specifier -> . CHAR
    (114) type_specifier -> . SHORT
    (115) type_specifier -> . INT
    (116) type_specifier -> . LONG
    (117) type_specifier -> . FLOAT
    (118) type_specifier -> . DOUBLE
    (119) type_specifier -> . SIGNED
    (120) type_specifier -> . UNSIGNED
    (121) type_specifier -> . BOOL
    (122) type_specifier -> . COMPLEX
    (123) type_specifier -> . IMAGINARY
    (124) type_specifier -> . atomic_type_specifier
    (125) type_specifier -> . struct_or_union_specifier
    (126) type_specifier -> . enum_specifier
    (156) type_qualifier -> . CONST
    (157) type_qualifier -> . RESTRICT
    (158) type_qualifier -> . VOLATILE
    (159) type_qualifier -> . ATOMIC
    (155) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (127) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (128) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (129) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (146) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (147) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (148) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (149) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (150) enum_specifier -> . ENUM IDENTIFIER
    (130) struct_or_union -> . STRUCT
    (131) struct_or_union -> . UNION

    DEFAULT         shift and go to state 431
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    RESTRICT        shift and go to state 36
    VOLATILE        shift and go to state 37
    ATOMIC          shift and go to state 38
    ENUM            shift and go to state 43
    STRUCT          shift and go to state 44
    UNION           shift and go to state 45

    generic_association            shift and go to state 472
    type_name                      shift and go to state 430
    specifier_qualifier_list       shift and go to state 122
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 42

state 456

    (12) generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .

    LBRACKET        reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LPAREN          reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    DOT             reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    PTR_OP          reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    INC_OP          reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    DEC_OP          reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    TIMES           reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    DIVIDE          reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    MOD             reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    PLUS            reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    MINUS           reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LEFT_OP         reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    RIGHT_OP        reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LT              reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    GT              reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LE_OP           reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    GE_OP           reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    EQ_OP           reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    NE_OP           reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    AND             reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    XOR             reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    OR              reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    AND_OP          reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    QUESTION        reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    OR_OP           reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    COMMA           reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    RPAREN          reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    EQUALS          reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    MUL_ASSIGN      reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    DIV_ASSIGN      reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    MOD_ASSIGN      reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    ADD_ASSIGN      reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    SUB_ASSIGN      reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LEFT_ASSIGN     reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    RIGHT_ASSIGN    reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    AND_ASSIGN      reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    XOR_ASSIGN      reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    OR_ASSIGN       reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    SEMICOLON       reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    RBRACKET        reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    RBRACE          reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    COLON           reduce using rule 12 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)


state 457

    (15) generic_association -> type_name COLON . assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 473
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 458

    (16) generic_association -> DEFAULT COLON . assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 474
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 459

    (211) direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression . RBRACKET

    RBRACKET        shift and go to state 475


state 460

    (212) direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 212 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 212 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 212 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 212 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 212 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET .)


state 461

    (213) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .

    LBRACKET        reduce using rule 213 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    LPAREN          reduce using rule 213 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    RPAREN          reduce using rule 213 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    COLON           reduce using rule 213 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    COMMA           reduce using rule 213 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)


state 462

    (214) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 476


state 463

    (203) direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .

    LBRACKET        reduce using rule 203 (direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    LPAREN          reduce using rule 203 (direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    RPAREN          reduce using rule 203 (direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    COLON           reduce using rule 203 (direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    COMMA           reduce using rule 203 (direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)


state 464

    (205) direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 205 (direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 205 (direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 205 (direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 205 (direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 205 (direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)


state 465

    (251) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (234) statement -> . labeled_statement
    (235) statement -> . compound_statement
    (236) statement -> . expression_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) labeled_statement -> . IDENTIFIER COLON statement
    (241) labeled_statement -> . CASE constant_expression COLON statement
    (242) labeled_statement -> . DEFAULT COLON statement
    (243) compound_statement -> . LBRACE RBRACE
    (244) compound_statement -> . LBRACE block_item_list RBRACE
    (249) expression_statement -> . expression SEMICOLON
    (250) expression_statement -> . SEMICOLON
    (251) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (252) selection_statement -> . IF LPAREN expression RPAREN statement
    (253) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (260) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (261) jump_statement -> . CONTINUE SEMICOLON
    (262) jump_statement -> . BREAK SEMICOLON
    (263) jump_statement -> . RETURN SEMICOLON
    (264) jump_statement -> . RETURN expression SEMICOLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LBRACE          shift and go to state 72
    SEMICOLON       shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression                     shift and go to state 161
    statement                      shift and go to state 477
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    expression_statement           shift and go to state 154
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 466

    (255) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 478


state 467

    (256) iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .

    RBRACE          reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    STATIC_ASSERT   reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    IDENTIFIER      reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CASE            reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DEFAULT         reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LBRACE          reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SEMICOLON       reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    IF              reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SWITCH          reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    WHILE           reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DO              reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FOR             reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    GOTO            reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CONTINUE        reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    BREAK           reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    RETURN          reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    TYPEDEF         reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    EXTERN          reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    STATIC          reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    THREAD_LOCAL    reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    AUTO            reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    REGISTER        reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    VOID            reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CHAR            reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SHORT           reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INT             reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LONG            reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FLOAT           reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DOUBLE          reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SIGNED          reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    UNSIGNED        reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    BOOL            reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    COMPLEX         reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    IMAGINARY       reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CONST           reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    RESTRICT        reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    VOLATILE        reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ATOMIC          reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INLINE          reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    NORETURN        reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ALIGNAS         reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ENUM            reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    STRUCT          reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    UNION           reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INC_OP          reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DEC_OP          reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SIZEOF          reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ALIGNOF         reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LPAREN          reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    AND             reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    TIMES           reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    PLUS            reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    MINUS           reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    TILDE           reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    NOT             reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INTEGER         reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    F_CONSTANT      reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ENUMERATION_CONSTANT reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    STRING_LITERAL  reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FUNC_NAME       reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    GENERIC         reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ELSE            reduce using rule 256 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)


state 468

    (257) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN . statement
    (234) statement -> . labeled_statement
    (235) statement -> . compound_statement
    (236) statement -> . expression_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) labeled_statement -> . IDENTIFIER COLON statement
    (241) labeled_statement -> . CASE constant_expression COLON statement
    (242) labeled_statement -> . DEFAULT COLON statement
    (243) compound_statement -> . LBRACE RBRACE
    (244) compound_statement -> . LBRACE block_item_list RBRACE
    (249) expression_statement -> . expression SEMICOLON
    (250) expression_statement -> . SEMICOLON
    (251) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (252) selection_statement -> . IF LPAREN expression RPAREN statement
    (253) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (260) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (261) jump_statement -> . CONTINUE SEMICOLON
    (262) jump_statement -> . BREAK SEMICOLON
    (263) jump_statement -> . RETURN SEMICOLON
    (264) jump_statement -> . RETURN expression SEMICOLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LBRACE          shift and go to state 72
    SEMICOLON       shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression_statement           shift and go to state 154
    expression                     shift and go to state 161
    statement                      shift and go to state 479
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 469

    (258) iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .

    RBRACE          reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    STATIC_ASSERT   reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    IDENTIFIER      reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    CASE            reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    DEFAULT         reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    LBRACE          reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    SEMICOLON       reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    IF              reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    SWITCH          reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    WHILE           reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    DO              reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    FOR             reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    GOTO            reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    CONTINUE        reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    BREAK           reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    RETURN          reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    TYPEDEF         reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    EXTERN          reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    STATIC          reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    THREAD_LOCAL    reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    AUTO            reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    REGISTER        reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    VOID            reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    CHAR            reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    SHORT           reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    INT             reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    LONG            reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    FLOAT           reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    DOUBLE          reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    SIGNED          reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    UNSIGNED        reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    BOOL            reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    COMPLEX         reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    IMAGINARY       reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    CONST           reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    RESTRICT        reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    VOLATILE        reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    ATOMIC          reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    INLINE          reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    NORETURN        reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    ALIGNAS         reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    ENUM            reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    STRUCT          reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    UNION           reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    INC_OP          reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    DEC_OP          reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    SIZEOF          reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    ALIGNOF         reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    LPAREN          reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    AND             reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    TIMES           reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    PLUS            reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    MINUS           reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    TILDE           reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    NOT             reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    INTEGER         reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    F_CONSTANT      reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    ENUMERATION_CONSTANT reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    STRING_LITERAL  reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    FUNC_NAME       reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    GENERIC         reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    ELSE            reduce using rule 258 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)


state 470

    (259) iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN . statement
    (234) statement -> . labeled_statement
    (235) statement -> . compound_statement
    (236) statement -> . expression_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) labeled_statement -> . IDENTIFIER COLON statement
    (241) labeled_statement -> . CASE constant_expression COLON statement
    (242) labeled_statement -> . DEFAULT COLON statement
    (243) compound_statement -> . LBRACE RBRACE
    (244) compound_statement -> . LBRACE block_item_list RBRACE
    (249) expression_statement -> . expression SEMICOLON
    (250) expression_statement -> . SEMICOLON
    (251) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (252) selection_statement -> . IF LPAREN expression RPAREN statement
    (253) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (260) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (261) jump_statement -> . CONTINUE SEMICOLON
    (262) jump_statement -> . BREAK SEMICOLON
    (263) jump_statement -> . RETURN SEMICOLON
    (264) jump_statement -> . RETURN expression SEMICOLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (29) unary_expression -> . postfix_expression
    (30) unary_expression -> . INC_OP unary_expression
    (31) unary_expression -> . DEC_OP unary_expression
    (32) unary_expression -> . unary_operator cast_expression
    (33) unary_expression -> . SIZEOF unary_expression
    (34) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (35) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (17) postfix_expression -> . primary_expression
    (18) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (19) postfix_expression -> . postfix_expression LPAREN RPAREN
    (20) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (21) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (22) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (23) postfix_expression -> . postfix_expression INC_OP
    (24) postfix_expression -> . postfix_expression DEC_OP
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (36) unary_operator -> . AND
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . TILDE
    (41) unary_operator -> . NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . constant
    (3) primary_expression -> . string
    (4) primary_expression -> . LPAREN expression RPAREN
    (5) primary_expression -> . generic_selection
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (6) constant -> . INTEGER
    (7) constant -> . F_CONSTANT
    (8) constant -> . ENUMERATION_CONSTANT
    (10) string -> . STRING_LITERAL
    (11) string -> . FUNC_NAME
    (12) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQ_OP relational_expression
    (61) equality_expression -> . equality_expression NE_OP relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LT shift_expression
    (56) relational_expression -> . relational_expression GT shift_expression
    (57) relational_expression -> . relational_expression LE_OP shift_expression
    (58) relational_expression -> . relational_expression GE_OP shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_OP additive_expression
    (53) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LBRACE          shift and go to state 72
    SEMICOLON       shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AND             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    INTEGER         shift and go to state 116
    F_CONSTANT      shift and go to state 117
    ENUMERATION_CONSTANT shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression_statement           shift and go to state 154
    expression                     shift and go to state 161
    statement                      shift and go to state 480
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_operator                 shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 471

    (26) postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .

    LBRACKET        reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    LPAREN          reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    DOT             reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    PTR_OP          reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    INC_OP          reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    DEC_OP          reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    TIMES           reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    DIVIDE          reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    MOD             reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    PLUS            reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    MINUS           reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    LEFT_OP         reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    RIGHT_OP        reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    LT              reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    GT              reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    LE_OP           reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    GE_OP           reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    EQ_OP           reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    NE_OP           reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    AND             reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    XOR             reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    OR              reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    AND_OP          reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    QUESTION        reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    OR_OP           reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    RPAREN          reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    EQUALS          reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    MUL_ASSIGN      reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    DIV_ASSIGN      reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    MOD_ASSIGN      reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    ADD_ASSIGN      reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    SUB_ASSIGN      reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    LEFT_ASSIGN     reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    RIGHT_ASSIGN    reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    AND_ASSIGN      reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    XOR_ASSIGN      reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    OR_ASSIGN       reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    SEMICOLON       reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    RBRACKET        reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    COLON           reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)


state 472

    (14) generic_assoc_list -> generic_assoc_list COMMA generic_association .

    RPAREN          reduce using rule 14 (generic_assoc_list -> generic_assoc_list COMMA generic_association .)
    COMMA           reduce using rule 14 (generic_assoc_list -> generic_assoc_list COMMA generic_association .)


state 473

    (15) generic_association -> type_name COLON assignment_expression .

    RPAREN          reduce using rule 15 (generic_association -> type_name COLON assignment_expression .)
    COMMA           reduce using rule 15 (generic_association -> type_name COLON assignment_expression .)


state 474

    (16) generic_association -> DEFAULT COLON assignment_expression .

    RPAREN          reduce using rule 16 (generic_association -> DEFAULT COLON assignment_expression .)
    COMMA           reduce using rule 16 (generic_association -> DEFAULT COLON assignment_expression .)


state 475

    (211) direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .

    LBRACKET        reduce using rule 211 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    LPAREN          reduce using rule 211 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    RPAREN          reduce using rule 211 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    COLON           reduce using rule 211 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    COMMA           reduce using rule 211 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)


state 476

    (214) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 214 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 214 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 214 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 214 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 214 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)


state 477

    (251) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STATIC_ASSERT   reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GOTO            reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPEDEF         reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    EXTERN          reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STATIC          reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    THREAD_LOCAL    reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AUTO            reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    REGISTER        reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SHORT           reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LONG            reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLE          reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIGNED          reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNSIGNED        reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BOOL            reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    COMPLEX         reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IMAGINARY       reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONST           reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RESTRICT        reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOLATILE        reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ATOMIC          reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INLINE          reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NORETURN        reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ALIGNAS         reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ENUM            reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRUCT          reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNION           reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INC_OP          reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEC_OP          reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIZEOF          reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ALIGNOF         reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AND             reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TILDE           reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INTEGER         reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    F_CONSTANT      reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ENUMERATION_CONSTANT reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING_LITERAL  reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FUNC_NAME       reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GENERIC         reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 251 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 478

    (255) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .

    RBRACE          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STATIC_ASSERT   reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CASE            reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LBRACE          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SWITCH          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    GOTO            reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPEDEF         reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    EXTERN          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STATIC          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    THREAD_LOCAL    reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    AUTO            reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    REGISTER        reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    VOID            reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CHAR            reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SHORT           reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INT             reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LONG            reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SIGNED          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    UNSIGNED        reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BOOL            reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    COMPLEX         reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IMAGINARY       reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONST           reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RESTRICT        reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ATOMIC          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INLINE          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NORETURN        reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ALIGNAS         reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ENUM            reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRUCT          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    UNION           reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INC_OP          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DEC_OP          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ALIGNOF         reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    AND             reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TIMES           reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    PLUS            reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TILDE           reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NOT             reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INTEGER         reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    F_CONSTANT      reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ENUMERATION_CONSTANT reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRING_LITERAL  reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FUNC_NAME       reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    GENERIC         reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)


state 479

    (257) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .

    RBRACE          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STATIC_ASSERT   reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IDENTIFIER      reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CASE            reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DEFAULT         reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LBRACE          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SEMICOLON       reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IF              reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SWITCH          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    WHILE           reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DO              reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FOR             reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    GOTO            reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CONTINUE        reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BREAK           reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RETURN          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    TYPEDEF         reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    EXTERN          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STATIC          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    THREAD_LOCAL    reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    AUTO            reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    REGISTER        reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    VOID            reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CHAR            reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SHORT           reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INT             reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LONG            reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FLOAT           reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DOUBLE          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SIGNED          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    UNSIGNED        reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BOOL            reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    COMPLEX         reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IMAGINARY       reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CONST           reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RESTRICT        reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    VOLATILE        reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ATOMIC          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INLINE          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    NORETURN        reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ALIGNAS         reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ENUM            reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STRUCT          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    UNION           reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INC_OP          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DEC_OP          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SIZEOF          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ALIGNOF         reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LPAREN          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    AND             reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    TIMES           reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    PLUS            reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    MINUS           reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    TILDE           reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    NOT             reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INTEGER         reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    F_CONSTANT      reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ENUMERATION_CONSTANT reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FUNC_NAME       reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    GENERIC         reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ELSE            reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)


state 480

    (259) iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .

    RBRACE          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    STATIC_ASSERT   reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    IDENTIFIER      reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    CASE            reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    DEFAULT         reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    LBRACE          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    SEMICOLON       reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    IF              reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    SWITCH          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    WHILE           reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    DO              reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    FOR             reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    GOTO            reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    CONTINUE        reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    BREAK           reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    RETURN          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    TYPEDEF         reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    EXTERN          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    STATIC          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    THREAD_LOCAL    reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    AUTO            reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    REGISTER        reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    VOID            reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    CHAR            reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    SHORT           reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    INT             reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    LONG            reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    FLOAT           reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    DOUBLE          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    SIGNED          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    UNSIGNED        reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    BOOL            reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    COMPLEX         reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    IMAGINARY       reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    CONST           reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    RESTRICT        reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    VOLATILE        reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    ATOMIC          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    INLINE          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    NORETURN        reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    ALIGNAS         reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    ENUM            reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    STRUCT          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    UNION           reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    INC_OP          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    DEC_OP          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    SIZEOF          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    ALIGNOF         reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    LPAREN          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    AND             reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    TIMES           reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    PLUS            reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    MINUS           reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    TILDE           reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    NOT             reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    INTEGER         reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    F_CONSTANT      reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    ENUMERATION_CONSTANT reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    FUNC_NAME       reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    GENERIC         reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    ELSE            reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 38 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 445 resolved as shift
